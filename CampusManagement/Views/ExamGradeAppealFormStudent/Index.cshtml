@model CampusManagement.Models.ExamStudentSubjectForGradeAppealRequestViewModel
@using CampusManagement.Models
<!-- Include Twitter Bootstrap and jQuery: -->
<!-- Include the plugin's CSS and JS: -->
<link href="~/assets/css/bootstrap.min.css" rel="stylesheet" />
<script src="~/assets/js/bootstrap.min.js"></script>
@*<script src="~/assets/js/jquery-2.1.1.min.js"></script>*@
<script src="~/assets/js/bootstrap-multiselect.js"></script>
<link href="~/assets/css/bootstrap-multiselect.css" rel="stylesheet" />



<div class="row">
    <h2><span class="col-sm-12"> My Exam Subjects For Grade Appeal Request</span></h2>
</div>
<hr style="border-top: 1px solid #6d9b90;" />
@Html.Partial("_MessageView")
@using (Html.BeginForm("ExamGradeAppealRequestForm", "ExamGradeAppealFormStudent", FormMethod.Post, new { enctype = "multipart/form-data" }))
{
    @Html.AntiForgeryToken()

<div class="row">
    <div class="col-sm-4">
        <label>Exam</label>
        @Html.DropDownListFor(model => model.ExamID, null, htmlAttributes: new { @class = "form-control", @disabled = "disabled" })
        @Html.HiddenFor(model => model.ExamID)
        @Html.ValidationMessageFor(model => model.ExamID, "", new { @class = "text-danger" })
    </div>
</div>
<br />

    string errorstring = ViewBag.MessageType;
    ModelCMSNewContainer dbc = new ModelCMSNewContainer();
    GetCourseAppealStatusForStudent_Result CourseAppealStatusForStudent_ResultObj;

    int hdnExamID = (ViewBag.hdnExamID == null) ? 0 : ViewBag.hdnExamID;
    int hdnStudentUserID = (ViewBag.StudentUserID == null) ? 0 : ViewBag.StudentUserID;



    <input name="hdnExamID" value="@ViewBag.hdnExamID" type="hidden" id="hdnExamID" />

    Model.SubjectList = dbc.GetExamStudentSubjectForGradeAppealRequest(hdnExamID, hdnStudentUserID).ToList();

    if (Model.SubjectList.Count > 0)
    {
        <table class="table">
            <tr>

                <th>
                    Session
                </th>
                <th>
                    Subject
                </th>
                <th>Select Grade Appeal Request Subjects</th>
            </tr>
            @for (var i = 0; i < Model.SubjectList.Count; i++)
            {
                <tr>

                    <td>

                        <span style="font-weight:bold">Session : </span>  @Html.DisplayFor(modelItem => Model.SubjectList[i].BatchSession)<br />
                        <span style="font-weight:bold">Program : </span>  @Html.DisplayFor(modelItem => Model.SubjectList[i].ProgramName)<br />
                        @Html.HiddenFor(model => Model.SubjectList[i].StudentID)
                        @Html.HiddenFor(model => Model.SubjectList[i].ExamID)
                        @Html.HiddenFor(model => Model.SubjectList[i].ProgramCourseID)
                        @Html.HiddenFor(model => Model.SubjectList[i].ExamSubjectTitle)
                        @Html.HiddenFor(model => Model.SubjectList[i].BatchName)
                        @Html.HiddenFor(model => Model.SubjectList[i].BatchSession)
                        @Html.HiddenFor(model => Model.SubjectList[i].ProgramName)
                        @Html.HiddenFor(model => Model.SubjectList[i].ProgramCode)
                        @Html.HiddenFor(model => Model.SubjectList[i].YearSemesterNo)
                    </td>
                    <td>
                        <span style="font-weight:bold">Subject : </span>  @Html.DisplayFor(modelItem => Model.SubjectList[i].ExamSubjectTitle)<br />
                        <span style="font-weight:bold">Year Sementer : </span>  @Html.DisplayFor(modelItem => Model.SubjectList[i].YearSemesterNo)<br />

                    </td>
                    <td>@{ 
                        CourseAppealStatusForStudent_ResultObj = new GetCourseAppealStatusForStudent_Result();
                        CourseAppealStatusForStudent_ResultObj = dbc.GetCourseAppealStatusForStudent(hdnExamID, hdnStudentUserID, Model.SubjectList[i].ProgramCourseID).FirstOrDefault();
                    }
                         @if (CourseAppealStatusForStudent_ResultObj.CourseAppealStatus == true)
                         {
                              
                            Model.SubjectList[i].IsGradeAppealRequest = true;
                            @Html.CheckBoxFor(model => Model.SubjectList[i].IsGradeAppealRequest, new { @class = "checkbox-inline", @style = "width:18px;height:18px"  })
                         }
                         else
                         {
                            @Html.CheckBoxFor(model => Model.SubjectList[i].IsGradeAppealRequest, new { @class = "checkbox-inline", @style = "width:18px;height:18px" })
                         }
                        
                        @*@Html.ActionLink("(View / Make)  Grade From Request", "ExamSubjectsStudentMarkDisplay", new { ExamID = Model.SubjectList[i].ExamID, ProgramCourseID = Model.SubjectList[i].ProgramCourseID, StudentID = Model.SubjectList[i].StudentID })*@
                    </td>
                </tr>
            }

        </table>
    }
    else
    {
        <span style="color:red">Found No Subject For This Exam </span>
    }




    <div class="row">
        <div class="col-sm-4"></div>
        <div class="col-sm-5"></div>
        <div class="col-sm-3">
            <input type="submit" value="Proceed Grade Appeal Request" class="btn btn-primary pull-right" />
        </div>
    </div>


}

@section Scripts {
    <script>
                    $(document).ready(function () {

                    });


    </script>



}

