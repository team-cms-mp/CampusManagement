@model CampusManagement.Models.ExamStudentSubjectMarkDetailViewModel
@using CampusManagement.Models
@using (Html.BeginForm("CreateExamSubjectsStudentMarkDetailEntry", "ExamSubjectsForResult", FormMethod.Post, new { enctype = "multipart/form-data" }))
{
    @Html.AntiForgeryToken()

    <div class="row">
        <h2><span class="col-sm-12">Add Student Quiz / Assignment Marks</span></h2>
    </div>
    <hr style="border-top: 1px solid #6d9b90;" />
    @Html.Partial("_MessageView")
    @Html.HiddenFor(model => model.ExamStudentSubjectMarkDetailObj.ExamStudentSubjectMarkDetailID)
    @Html.HiddenFor(model => model.ExamStudentSubjectMarkDetailObj.ExamStudentSubjectMarkID)
    @Html.HiddenFor(model => model.ExamStudentSubjectMarkDetailObj.ExamID)
    @Html.HiddenFor(model => model.ExamStudentSubjectMarkDetailObj.ProgramCourseID)
    @Html.HiddenFor(model => model.ExamStudentSubjectMarkDetailObj.StudentID)
    @Html.HiddenFor(model => model.ExamStudentSubjectMarkDetailObj.MarkTypeName)
    @Html.HiddenFor(model => model.ExamStudentSubjectMarkDetailObj.CreatedBy)
    @Html.HiddenFor(model => model.ExamStudentSubjectMarkDetailObj.IsActive)
    @Html.HiddenFor(model => model.ExamStudentSubjectMarkDetailObj.ModifiedOn)
    @Html.HiddenFor(model => model.ExamStudentSubjectMarkDetailObj.ModifiedBy)


    <div class="row">
        <div class="col-sm-4">
            <label>Total Marks</label>

            @Html.EditorFor(model => model.ExamStudentSubjectMarkDetailObj.TotalMarks, new { htmlAttributes = new { @onkeyup = "DecimalValidate(1);", @class = "form-control TotalMarks ", required = "required" } })
            @Html.ValidationMessageFor(model => model.ExamStudentSubjectMarkDetailObj.TotalMarks, "", new { @class = "text-danger" })


        </div>

        <div class="col-sm-4">
            <label>Obtain Marks</label>

            @Html.EditorFor(model => model.ExamStudentSubjectMarkDetailObj.ObtainMarks, new { htmlAttributes = new { @onkeyup = "DecimalValidate(2);", @class = "form-control ObtainMarks", required = "required" } })
            @Html.ValidationMessageFor(model => model.ExamStudentSubjectMarkDetailObj.ObtainMarks, "", new { @class = "text-danger" })


        </div>
        <div class="col-sm-4">
            <label>Mark Type </label>
            @Html.DropDownList("ExamStudentSubjectMarkTypeID", null, htmlAttributes: new { @class = "form-control" })
            @Html.ValidationMessageFor(model => model.ExamStudentSubjectMarkDetailObj.ExamStudentSubjectMarkTypeID, "", new { @class = "text-danger" })
        </div>

        <div class="col-sm-4">
            <label>Is Present </label>
            @Html.DropDownList("StudentPresentStatusID", null, htmlAttributes: new { @class = "form-control" })
            @Html.ValidationMessageFor(model => model.ExamStudentSubjectMarkDetailObj.StudentPresentStatusID, "", new { @class = "text-danger" })
        </div>
        <div class="col-sm-4">
            <label>Is Active</label>

            @Html.DropDownList("IsActive", null, htmlAttributes: new { @class = "form-control" })
            @Html.ValidationMessageFor(model => model.ExamStudentSubjectMarkDetailObj.IsActive, "", new { @class = "text-danger" })


        </div>

    </div>
    <br />

    <div class="row">
        <div class="col-sm-3">
            <input type="submit" value="Add" class="btn btn-primary" />
        </div>
    </div>


}


@if (Model.ExamStudentSubjectMarkDetailList.Count > 0)
{
    if (Model.ExamStudentSubjectMarkDetailList[0].ExamStudentSubjectMarkDetailID != 0)
    {

        <table class="table">
            <tr>


                <th>
                    Total Marks
                </th>

                <th>
                    Obtain Marks
                </th>
                <th>
                    Marks Type
                </th>
                <th>
                    Status
                </th>
                <th>
                    Is Submitted
                </th>

                <th>Actions</th>
            </tr>
            @for (var i = 0; i < Model.ExamStudentSubjectMarkDetailList.Count; i++)
            {
                <tr>

                    <td>
                        @Html.DisplayFor(model => model.ExamStudentSubjectMarkDetailList[i].TotalMarks)

                    </td>

                    <td>

                        @Html.DisplayFor(model => model.ExamStudentSubjectMarkDetailList[i].ObtainMarks)
                    </td>
                    <td>
                        @Html.DisplayFor(model => model.ExamStudentSubjectMarkDetailList[i].MarkTypeName)
                    </td>
                    <td>
                        @if (Model.ExamStudentSubjectMarkDetailList[i].StudentPresentStatusID == 1)
                        {
                            <div>Present </div>
                        }
                        else if (Model.ExamStudentSubjectMarkDetailList[i].StudentPresentStatusID == 2)
                        {
                            <div>Absent </div>
                        }
                        else if (Model.ExamStudentSubjectMarkDetailList[i].StudentPresentStatusID == 3)
                        {
                            <div>On Sick Leave </div>

                        }
                        else if (Model.ExamStudentSubjectMarkDetailList[i].StudentPresentStatusID == 4)
                        {
                            <div>On Casual Leave </div>

                        }

                    </td>
                    <td>
                        @if (Model.ExamStudentSubjectMarkDetailList[i].IsTeacherSubmitted == 1)
                        {
                            <div style="color:green">Submitted</div>
                        }
                        else
                        {
                            <div style="color:red">Not Submitted</div>
                        }
                    </td>
                    <td>
                        @if (Model.ExamStudentSubjectMarkDetailList[i].IsTeacherSubmitted == 1)
                        {
                            <div style="color:red">You can not update now</div>
                        }
                        else
                        {
                            @Html.ActionLink("Confirm Submit", "UpdateExamSubjectsStudentMarkDetailEntry", new { ExamStudentSubjectMarkDetailID = Model.ExamStudentSubjectMarkDetailList[i].ExamStudentSubjectMarkDetailID, ExamStudentSubjectMarkID = Model.ExamStudentSubjectMarkDetailList[i].ExamStudentSubjectMarkID, ExamID = Model.ExamStudentSubjectMarkDetailList[i].ExamID, ProgramCourseID = Model.ExamStudentSubjectMarkDetailList[i].ProgramCourseID, StudentID = Model.ExamStudentSubjectMarkDetailList[i].StudentID })
                        }
                        @*@Html.ActionLink("Add Assignment Martks", "Index", new { ExamStudentSubjectMarkID = Model.ExamStudentSubjectMarkObj.ExamStudentSubjectMarkID, ExamID = Model.ExamStudentSubjectMarkObj.ExamID, ProgramCourseID = Model.ExamStudentSubjectMarkObj.ProgramCourseID, StudentID = Model.ExamStudentSubjectMarkObj.StudentID })  |
                            @Html.ActionLink("Add Quiz Martks", "Index", new { ExamStudentSubjectMarkID = Model.ExamStudentSubjectMarkObj.ExamStudentSubjectMarkID, ExamID = Model.ExamStudentSubjectMarkObj.ExamID, ProgramCourseID = Model.ExamStudentSubjectMarkObj.ProgramCourseID, StudentID = Model.ExamStudentSubjectMarkObj.StudentID })  |*@


                    </td>
                </tr>
            }





        </table>
    }
}







<script>
    $(document).ready(function () {

        // $("#TotalSubjectMarks").val("");

    });


    function DecimalValidate(myvalue) {
        var CurrentControle = $('.TotalMarks');
        if (myvalue == 1) {
            CurrentControle = $('.TotalMarks');
        } else if (myvalue == 2) {
            CurrentControle = $('.ObtainMarks');
        }
        if ($.isNumeric(CurrentControle.val())) {
            var currentvalue = CurrentControle.val() + "";
            var currentarrayvalue = currentvalue.split('.');
            if (currentarrayvalue[1].length > 4) {
                var currentvalueReplace = currentvalue.substring(0, currentvalue.length - 1)
                CurrentControle.val(currentvalueReplace);
            }

        } else {
            var currentvalue = CurrentControle.val() + "";
            var currentvalueReplace = currentvalue.substring(0, currentvalue.length - 1)
            CurrentControle.val(currentvalueReplace);
        }

    }

    //function DecimalValidate() {
    //    var TotalSubjectMarks = $('#ExamStudentSubjectMarkObj_TotalSubjectMarks');
    //   // alert(TotalSubjectMarks.val());


    //    if ($.isNumeric(TotalSubjectMarks.val())) {
    //        var currentvalue = TotalSubjectMarks.val() + "";
    //      var currentarrayvalue =  currentvalue.split('.');
    //      if (currentarrayvalue[1].length > 4) {
    //            var currentvalueReplace = currentvalue.substring(0, currentvalue.length - 1)
    //            TotalSubjectMarks.val(currentvalueReplace);
    //        }

    //      //  alert("Valid");
    //    } else {
    //        var currentvalue = TotalSubjectMarks.val() +"";
    //        var currentvalueReplace =  currentvalue.substring(0, currentvalue.length-1)
    //        TotalSubjectMarks.val(currentvalueReplace);
    //       // alert("Invalid");
    //    }
    //    //var regex = /(?:\d*\.\d{1,2}|\d+)$/;
    //    //if (regex.test(TotalSubjectMarks.val())) {
    //    //    alert("Valid");
    //    //} else {
    //    //    alert("Invalid");
    //    //}
    //}
</script>
