@model CampusManagement.Models.ExamStudentSubjectMarkViewModel
@using CampusManagement.Models
@using (Html.BeginForm("CreateExamSubjectsStudentMarkEntry", "ExamSubjectsForResult", FormMethod.Post, new { enctype = "multipart/form-data" }))
{
    @Html.AntiForgeryToken()

    <div class="row">
        <h2><span class="col-sm-12">Add Student Marks</span></h2>
    </div>
    <hr style="border-top: 1px solid #6d9b90;" />
    @Html.Partial("_MessageView")
    @Html.HiddenFor(model => model.ExamStudentSubjectMarkObj.ExamStudentSubjectMarkID)
    @Html.HiddenFor(model => model.ExamStudentSubjectMarkObj.ExamID)
    @Html.HiddenFor(model => model.ExamStudentSubjectMarkObj.ProgramCourseID)
    @Html.HiddenFor(model => model.ExamStudentSubjectMarkObj.StudentID)
    @Html.HiddenFor(model => model.ExamStudentSubjectMarkObj.CreatedBy)
    @Html.HiddenFor(model => model.ExamStudentSubjectMarkObj.IsActive)
    @Html.HiddenFor(model => model.ExamStudentSubjectMarkObj.ModifiedBy)


    <div class="row">
        <div class="col-sm-4">
            <label>Total Subject Marks</label>
            @if (Model.ExamStudentSubjectMarkObj.IsTeacherSubmitted == 1)
            {
                @Html.EditorFor(model => model.ExamStudentSubjectMarkObj.TotalSubjectMarks,  new { htmlAttributes = new { @onkeyup = "DecimalValidate(1);", @class = "form-control", @disabled = "disabled" } })
            }
            else
            {
                @Html.EditorFor(model => model.ExamStudentSubjectMarkObj.TotalSubjectMarks, new { htmlAttributes = new { @onkeyup = "DecimalValidate(1);", @class = "form-control", required = "required" } })
                @Html.ValidationMessageFor(model => model.ExamStudentSubjectMarkObj.TotalSubjectMarks, "", new { @class = "text-danger" })
            }
           
        </div>

        <div class="col-sm-4">
            <label>Written Test Marks</label>
            @if (Model.ExamStudentSubjectMarkObj.IsTeacherSubmitted == 1)
            {
                @Html.EditorFor(model => model.ExamStudentSubjectMarkObj.WrittenTestMarks, new { htmlAttributes = new { @onkeyup = "DecimalValidate(2);", @class = "form-control", @disabled = "disabled" } })
            }
            else
            {
                @Html.EditorFor(model => model.ExamStudentSubjectMarkObj.WrittenTestMarks, new { htmlAttributes = new { @onkeyup = "DecimalValidate(2);", @class = "form-control", required = "required" } })
                @Html.ValidationMessageFor(model => model.ExamStudentSubjectMarkObj.WrittenTestMarks, "", new { @class = "text-danger" })
            }
           
        </div>
        <div class="col-sm-4">
            <label>Obtain Written Test Marks</label>
            @if (Model.ExamStudentSubjectMarkObj.IsTeacherSubmitted == 1)
            {
                @Html.EditorFor(model => model.ExamStudentSubjectMarkObj.ObtainWrittenTestMarks, new { htmlAttributes = new { @onkeyup = "DecimalValidate(3);", @class = "form-control", @disabled = "disabled" } })
            }
            else
            {
                @Html.EditorFor(model => model.ExamStudentSubjectMarkObj.ObtainWrittenTestMarks, new { htmlAttributes = new { @onkeyup = "DecimalValidate(3);", @class = "form-control", required = "required" } })
                @Html.ValidationMessageFor(model => model.ExamStudentSubjectMarkObj.ObtainWrittenTestMarks, "", new { @class = "text-danger" })
            }
           
        </div>

        <div class="col-sm-4">
            <label>Is Present </label>
            @if (Model.ExamStudentSubjectMarkObj.IsTeacherSubmitted == 1)
            {
                @Html.DropDownList("StudentPresentStatusID", null, htmlAttributes: new { @class = "form-control", @disabled = "disabled" })
               
            }
            else
            {
                @Html.DropDownList("StudentPresentStatusID", null, htmlAttributes: new { @class = "form-control" })
                @Html.ValidationMessageFor(model => model.ExamStudentSubjectMarkObj.StudentPresentStatusID, "", new { @class = "text-danger" })
            }
           
        </div>
        <div class="col-sm-4">
            <label>Is Active</label>
            @if (Model.ExamStudentSubjectMarkObj.IsTeacherSubmitted == 1)
            {
                @Html.DropDownList("IsActive", null, htmlAttributes: new { @class = "form-control", @disabled = "disabled" })

            }
            else
            {
                @Html.DropDownList("IsActive", null, htmlAttributes: new { @class = "form-control" })
                @Html.ValidationMessageFor(model => model.ExamStudentSubjectMarkObj.IsActive, "", new { @class = "text-danger" })
            }
         
        </div>

    </div>
    <br />
    if (Model.ExamStudentSubjectMarkObj.IsTeacherSubmitted == 1)
    {
    }
    else
    {
        <div class="row">
            <div class="col-sm-3">
                <input type="submit" value="Add" class="btn btn-primary" />
            </div>
        </div>
    }

}


<table class="table">
    <tr>


        <th>
            Total Subject Marks
        </th>

        <th>
            Written Test Marks
        </th>
        <th>
            Obtain Written Test Marks
        </th>
        <th>
           Status
        </th>

        <th>Actions</th>
    </tr>

  
        <tr>

            <td>
                @Html.DisplayFor(model => model.ExamStudentSubjectMarkObj.TotalSubjectMarks)

            </td>

            <td>

                @Html.DisplayFor(model => model.ExamStudentSubjectMarkObj.WrittenTestMarks)
            </td>
            <td>
               @Html.DisplayFor(model => model.ExamStudentSubjectMarkObj.ObtainWrittenTestMarks)
            </td>
            <td>
                @if (Model.ExamStudentSubjectMarkObj.StudentPresentStatusID == 1)
                {
                   <div>Present </div>
                }
                else if (Model.ExamStudentSubjectMarkObj.StudentPresentStatusID == 2)
                {
                    <div>Absent </div>
                }
                else if (Model.ExamStudentSubjectMarkObj.StudentPresentStatusID == 3)
                {
                    <div>On Sick Leave </div>

                }
                else if (Model.ExamStudentSubjectMarkObj.StudentPresentStatusID == 4)
                {
                    <div>On Casual Leave </div>

                }
              
            </td>

            <td>
                @if (Model.ExamStudentSubjectMarkObj.ExamStudentSubjectMarkID > 0)
                {
                    string OROperator = " | ";
                    @Html.ActionLink("Add Assignment / Quiz Martks", "ExamSubjectsStudentMarkDetailEntry", new { ExamStudentSubjectMarkID = Model.ExamStudentSubjectMarkObj.ExamStudentSubjectMarkID, ExamID = Model.ExamStudentSubjectMarkObj.ExamID, ProgramCourseID = Model.ExamStudentSubjectMarkObj.ProgramCourseID, StudentID = Model.ExamStudentSubjectMarkObj.StudentID })
                    if (Model.ExamStudentSubjectMarkObj.IsTeacherSubmitted == 1)
                    {
                        @OROperator<span style="color:red"> You Allready Submitted</span>
                    }
                    else
                    {
                        @OROperator @Html.ActionLink("Confirm Submit", "UpdateExamSubjectsStudentMarkEntry", new { ExamStudentSubjectMarkID = Model.ExamStudentSubjectMarkObj.ExamStudentSubjectMarkID, ExamID = Model.ExamStudentSubjectMarkObj.ExamID, ProgramCourseID = Model.ExamStudentSubjectMarkObj.ProgramCourseID, StudentID = Model.ExamStudentSubjectMarkObj.StudentID })
                    }
                }
                
            </td>
        </tr>

    

</table>





<script>
 $(document).ready(function () {

    // $("#TotalSubjectMarks").val("");

 });


 function DecimalValidate(myvalue) {
    
     var CurrentControle = $('#ExamStudentSubjectMarkObj_TotalSubjectMarks');
     if (myvalue == 1) {
         CurrentControle = $('#ExamStudentSubjectMarkObj_TotalSubjectMarks');
     } else if (myvalue == 2) {
         CurrentControle = $('#ExamStudentSubjectMarkObj_WrittenTestMarks');
     }
     else if (myvalue == 3) {
         CurrentControle = $('#ExamStudentSubjectMarkObj_ObtainWrittenTestMarks');
     }

     if ($.isNumeric(CurrentControle.val())) {
         var currentvalue = CurrentControle.val() + "";
         var currentarrayvalue = currentvalue.split('.');
         if (currentarrayvalue[1].length > 4) {
             var currentvalueReplace = currentvalue.substring(0, currentvalue.length - 1)
             CurrentControle.val(currentvalueReplace);
         }

     } else {
         var currentvalue = CurrentControle.val() + "";
         var currentvalueReplace = currentvalue.substring(0, currentvalue.length - 1)
         CurrentControle.val(currentvalueReplace);
     }
   
 }

 //function DecimalValidate() {
 //    var TotalSubjectMarks = $('#ExamStudentSubjectMarkObj_TotalSubjectMarks');
 //   // alert(TotalSubjectMarks.val());
    

 //    if ($.isNumeric(TotalSubjectMarks.val())) {
 //        var currentvalue = TotalSubjectMarks.val() + "";
 //      var currentarrayvalue =  currentvalue.split('.');
 //      if (currentarrayvalue[1].length > 4) {
 //            var currentvalueReplace = currentvalue.substring(0, currentvalue.length - 1)
 //            TotalSubjectMarks.val(currentvalueReplace);
 //        }
         
 //      //  alert("Valid");
 //    } else {
 //        var currentvalue = TotalSubjectMarks.val() +"";
 //        var currentvalueReplace =  currentvalue.substring(0, currentvalue.length-1)
 //        TotalSubjectMarks.val(currentvalueReplace);
 //       // alert("Invalid");
 //    }
 //    //var regex = /(?:\d*\.\d{1,2}|\d+)$/;
 //    //if (regex.test(TotalSubjectMarks.val())) {
 //    //    alert("Valid");
 //    //} else {
 //    //    alert("Invalid");
 //    //}
 //}
</script>
