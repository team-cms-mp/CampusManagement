@model CampusManagement.Models.ExamSubjectForRosterDispatchViewModel
@using CampusManagement.Models
<!-- Include Twitter Bootstrap and jQuery: -->
<!-- Include the plugin's CSS and JS: -->
<link href="~/assets/css/bootstrap.min.css" rel="stylesheet" />
<script src="~/assets/js/bootstrap.min.js"></script>
<script src="~/assets/js/jquery-2.1.1.min.js"></script>
<script src="~/assets/js/bootstrap-multiselect.js"></script>
<link href="~/assets/css/bootstrap-multiselect.css" rel="stylesheet" />



@{

    string errorstring = ViewBag.MessageType;
    ModelCMSNewContainer dbc = new ModelCMSNewContainer();
    int hdnExamsDateSheetDetailID = (ViewBag.ExamsDateSheetDetailID == null) ? 0 : ViewBag.ExamsDateSheetDetailID;

    if (errorstring == "")
    {
        Model.ExamSubjectRoomList = dbc.GetExamSubjectForRosterDispatch(hdnExamsDateSheetDetailID).ToList();

    }

    <input name="hdnExamsDateSheetDetailID" value="@ViewBag.ExamsDateSheetDetailID" type="hidden" id="hdnExamDateTimeSlotID" />

    <table style="width:100%">
        <tr style="width:100%">
            <td style="width:70%; background-color:lightgray ; vertical-align:top">
                @if (Model.ExamSubjectRoomList.Count > 0)
                {
                    <table class="table">
                        <tr>
                            <th>
                                Exam Subject Details
                            </th>

                            <th>
                                Roster Dispatch
                            </th>


                        </tr>
                        @for (var z = 0; z < Model.ExamSubjectRoomList.Count; z++)
                        {

                            <tr>
                                <td>

                                    @{ string id = "hdID_" + Model.ExamSubjectRoomList[z].ExamsDateSheetDetailID;}
                                    @Html.Hidden(@id, new { value = Model.ExamSubjectRoomList[z].ExamsDateSheetDetailID })
                                    <span style="font-weight:bold"> Room(Capicity):</span> <span style="color:red"> @Html.DisplayFor(modelItem => Model.ExamSubjectRoomList[z].RoomName) (@Html.DisplayFor(modelItem => Model.ExamSubjectRoomList[z].RoomCapacity))</span><br />
                                    <span style="font-weight:bold">Session : </span>  @Html.DisplayFor(modelItem => Model.ExamSubjectRoomList[z].BatchSession) <span style="color:red">( Program:  @Html.DisplayFor(modelItem => Model.ExamSubjectRoomList[z].ProgramName) )</span><br />
                                    <span style="font-weight:bold">Subject: </span> @Html.DisplayFor(modelItem => Model.ExamSubjectRoomList[z].CourseCode) - @Html.DisplayFor(modelItem => Model.ExamSubjectRoomList[z].CourseName) <span style="color:red">( Semester# :  @Html.DisplayFor(modelItem => Model.ExamSubjectRoomList[z].YearSemesterNo) )</span><br />
                                    <span style="font-weight:bold"> Eligible Student Count:</span> <span style="color:red">(@Html.DisplayFor(modelItem => Model.ExamSubjectRoomList[z].StudentCount))</span><br />
                                   

                                    @Html.HiddenFor(modelItem => Model.ExamSubjectRoomList[z].StudentCount)
                                    @Html.HiddenFor(modelItem => Model.ExamSubjectRoomList[z].BatchName)
                                    @Html.HiddenFor(modelItem => Model.ExamSubjectRoomList[z].BatchSession)
                                    @Html.HiddenFor(modelItem => Model.ExamSubjectRoomList[z].CourseCode)
                                    @Html.HiddenFor(modelItem => Model.ExamSubjectRoomList[z].CourseName)
                                    @Html.HiddenFor(modelItem => Model.ExamSubjectRoomList[z].ExamsDateSheetDetailID)
                                    @Html.HiddenFor(modelItem => Model.ExamSubjectRoomList[z].ProgramCode)
                                    @Html.HiddenFor(modelItem => Model.ExamSubjectRoomList[z].ProgramName)
                                    @Html.HiddenFor(modelItem => Model.ExamSubjectRoomList[z].YearSemesterNo)
                                </td>

                                <td>
                                    @{
                                        string btnId = "btn_" + Model.ExamSubjectRoomList[z].ExamsDateSheetDetailID;
                                        string ExamsDateSheetDetailID = Model.ExamSubjectRoomList[z].ExamsDateSheetDetailID.ToString();
                                        string RoomID = Model.ExamSubjectRoomList[z].RoomID.ToString();
                                    }
                                    <input id="@btnId" type="submit" class="btn btn-primary" value="Add Dispatch" onclick="@("RoomTeacherDispatch('"+ExamsDateSheetDetailID+"','"+ RoomID + "')")" />
                                    @Html.ActionLink("View / Remove Dispatch", "RosterDispatchList", new { ExamsDateSheetDetailID = Model.ExamSubjectRoomList[z].ExamsDateSheetDetailID, RoomID = Model.ExamSubjectRoomList[z].RoomID },  new {@class = "btn btn-primary" })
                                </td>
                            </tr>

                              }
                    </table>
                    <br />


                            }
            </td>
            <td style="width:30%; vertical-align:top">

                <div class="row divHeading" style="width:100%; margin-left:0px">
                    <a data-toggle="collapse" style="cursor:pointer" data-target=""><h4 style="color: white;" aria-hidden="true"> <b>Select From Available Lecturers</b></h4> </a>
                </div>
                <div style="height:400px;overflow-x:auto!important">
                    <table class="table" id="tblTeacher" name="tblTeacher">
                        <tr>
                            <th>
                                Select
                            </th>

                            <th>
                                Teacher Details
                            </th>


                            @for (var y = 0; y < Model.LecturarList.Count; y++)
                            {
                                string TdCbId = "TdCbId_" + Model.LecturarList[y].EmpID;
                                string TrbId = "TrId_" + Model.LecturarList[y].EmpID;
                                string cbID = "cb_" + Model.LecturarList[y].EmpID;
                            <tr id="@TrbId">
                                <td id="@TdCbId">
                                    @Html.CheckBox(cbID, new { @class = "checkbox-inline", @style = "width:20px;height:20px" })
                                </td>
                                <td>
                                    @Html.DisplayFor(modelItem => Model.LecturarList[y].UserName) (@Html.DisplayFor(modelItem => Model.LecturarList[y].Designation))
                                </td>

                            </tr>
                            }

                        </table>
                    </div>
                </td>
            </tr>

        </table>



}

@section Scripts {
    <script>
        $(document).ready(function () {

        });


        function RoomTeacherDispatch(ExamsDateSheetDetailID, RoomID) {
           // alert(ExamsDateSheetDetailID + "=" + RoomID);
            var TSelected = "";
            var TSelectedlocal = "";
            var btn_
            var btnsubmit = "#btn_" + ExamsDateSheetDetailID;

            var SelectTeacher = "";
            $('#tblTeacher td').each(function () {
                var cellText = $(this).html();
                var cellid = $(this).attr('id');
                var FindId = "#" + cellid;
                $(FindId).children('input[type=checkbox]').each(function () {
                    var cbId = $(this).attr('id');
                    var cbidhash = "#" + cbId
                    if ($(cbidhash).is(':checked')) {
                        SelectTeacher = cbId + "," + SelectTeacher;
                        $(cbidhash).attr('checked', false);
                    } else {
                        //  alert(cbidhash + "False")
                    }
                  
                })
               
            });
           // alert(SelectTeacher);
            var TeacherSelected = SelectTeacher.split(',');
            var MyCount = TeacherSelected.length - 1;
            
            for (var i = 0; i < MyCount ; i++) {
                var splitT = TeacherSelected[i].replace('cb_', '');
                TSelectedlocal = splitT + "," + TSelectedlocal;

            }
           
            TSelected =  TSelectedlocal.substring(0, TSelectedlocal.length - 1);
           // alert(TSelected);
            if (TSelected == "") {
                alert("Please Select Teacher Before You Proceed");
                return false;
            }
            
            $.ajax({
                url: "@Url.Content("~/ExamRosterDispatch/TeacherDispatch")",
                type: 'POST',
            datatype: 'application/json',
            contentType: 'application/json',
            async: false,
            data: JSON.stringify({ ExamsDateSheetDetailID: ExamsDateSheetDetailID, RoomID: RoomID, TSelected: TSelected }),
            success: function (result) {
                alert("Successfully Dispatched");
              //  var TrRemoveArray = result;
             //   var arrayRemoveTrSplit = TrRemoveArray.split(',');
               
             //   for (var i = 0; i < arrayRemoveTrSplit.length ; i++) {
            //        var splitRooom = arrayRemoveTrSplit[i].split('_');
            //        var TrToRemoveID = "#TrId_" + splitRooom[0].replace('"', '');
             //       $(TrToRemoveID).remove();

           //     }
               
             //   $(btnsubmit).val("Update Dispatch");
               
            },
            error: function (ex) {
                alert(ex.error);
            },
            });

        }
    </script>
}

