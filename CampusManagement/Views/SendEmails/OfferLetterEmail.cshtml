@model CampusManagement.Models.Applicant
@using CampusManagement.Models
<div class="row">
    <h2><span class="col-sm-12">Send Offer Letter Email</span></h2>
</div>
<hr style="border-top: 1px solid #6d9b90;" />
@Html.Partial("_MessageView")

@using (Html.BeginForm("OfferLetterEmail", "SendEmails", FormMethod.Post))
{
    @Html.AntiForgeryToken()

    <div class="row">
        <div class="col-sm-5">
            <label>Session</label>
            @Html.DropDownListFor(model => model.BatchID, null, htmlAttributes: new { @class = "form-control" })
            @Html.ValidationMessageFor(model => model.BatchID, "", new { @class = "text-danger" })
        </div>
        <div class="col-sm-5">
            @Html.LabelFor(model => model.BatchProgramID, htmlAttributes: new { @class = "control-label" })
            @Html.DropDownList("BatchProgramID", null, htmlAttributes: new { @class = "form-control", onchange = "changeHiddenInput(this)" })
            @Html.ValidationMessageFor(model => model.BatchProgramID, "", new { @class = "text-danger" })
        </div>
        <div class="col-sm-2" style="margin-top: 1.7em;">
            <button type="submit" class="btn btn-primary" value="Search">
                <span class="glyphicon glyphicon-search"></span> Search
            </button>
        </div>
    </div>
}

@using (Html.BeginForm("SendOfferLetterEmail", "SendEmails", FormMethod.Post, new { enctype = "multipart/form-data" }))
{
    ModelCMSNewContainer dbc = new ModelCMSNewContainer();

    @Html.AntiForgeryToken()

    int BatchProgramID = (ViewBag.hdnBatchProgramID == null) ? 0 : ViewBag.hdnBatchProgramID;
    int SelectedProgramFee = Convert.ToInt32(dbc.GetSelectedProgramFee_By_BatchProgramID(BatchProgramID, 1).FirstOrDefault());

    <div class="row" style="margin-top: -3em;">
        <hr />
        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
        <input type="hidden" name="hdnBatchProgramID" id="hdnBatchProgramID" value="@BatchProgramID" />
        <input type="hidden" name="hdnBatchID" id="hdnBatchID" value="@ViewBag.hdnBatchID" />

        <div class="col-md-6" style='display:none'>
            @Html.LabelFor(model => model.ToEmail, htmlAttributes: new { @class = "control-label col-md-2" })
            @Html.EditorFor(model => model.ToEmail, new { htmlAttributes = new { @class = "form-control" } })
            @Html.ValidationMessageFor(model => model.ToEmail, "", new { @class = "text-danger" })
        </div>

        <div class="col-md-6" style='display:none'>
            @Html.LabelFor(model => model.EmailSubject, htmlAttributes: new { @class = "control-label col-md-2" })
            <input type="text" class="form-control" name="EmailSubject" id="EmailSubject" />
            @Html.ValidationMessageFor(model => model.EmailSubject, "", new { @class = "text-danger" })
        </div>
    </div>

        <div class="row">
            <div class="col-md-3">
                <label>Deposit Fee</label>
                <input type="number" class="form-control" required name="DepositFee" id="DepositFee"  value="@SelectedProgramFee" readonly />
            </div>
            <div class="col-md-3">
                <label>Deposit Date</label>
                <input type="date" class="form-control" required name="DepositDate" id="DepositDate" />
            </div>
        </div>
        <div class="row hidden">
            <div class="col-md-4">
                @Html.LabelFor(model => model.EmailCC, htmlAttributes: new { @class = "control-label col-md-2" })
                @Html.EditorFor(model => model.EmailCC, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.EmailCC, "", new { @class = "text-danger" })
            </div>
            <div class="col-md-4">
                @Html.LabelFor(model => model.EmailBCC, htmlAttributes: new { @class = "control-label col-md-2" })
                @Html.EditorFor(model => model.EmailBCC, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.EmailBCC, "", new { @class = "text-danger" })
            </div>
            <div class="col-md-4">
                @Html.LabelFor(model => model.Attachment, htmlAttributes: new { @class = "control-label col-md-2" })
                <input type="file" name="fileUploader" multiple="multiple" class="form-control" />
                @Html.ValidationMessageFor(model => model.Attachment, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="row">
            <div class="col-md-12">
                <label> Body </label>
                @Html.TextAreaFor(m => m.EmailBody, htmlAttributes: new { @class = "form-control" })
            </div>
        </div>

        <div class="row" style="margin-top: 1em;">
            <div class="col-sm-5">
                <button type="submit" class="btn btn-primary" value="Send">
                    <span class="glyphicon glyphicon-envelope"></span> Send Email
                </button>
                <button type="submit" class="btn btn-primary" value="Phone">
                    <span class="glyphicon glyphicon-phone"></span> Send Message
                </button>
            </div>
        </div>
        <div class="form-group">
            <div class="col-md-offset-2 col-md-4 text-success">
                @ViewBag.Status
            </div>
        </div>


    List<GetApplicantsForEntryTestEmail_Result> lstApp = dbc.GetApplicantsForEntryTestEmail(BatchProgramID, 2).ToList();
    <input id="hdnRowCount" name="hdnRowCount" value="@lstApp.Count" type="hidden" />
    int i = 1;
    if (lstApp.Count > 0)
    {
        <table class="table">
            <tr>
                <th>
                    Form #
                </th>
                <th>
                    Applicant Name
                </th>
                <th>
                    Father Name
                </th>
                <th>
                    Cell #
                </th>
                <th>
                    Email
                </th>
                <th>
                    <input type="checkbox" id="chkSelectAll" />
                </th>
            </tr>

            @foreach (var item in lstApp)
            {
                string FormNo = string.Concat("FormNo_", i);
                string ApplicantName = string.Concat("ApplicantName_", i);
                string FatherName = string.Concat("FatherName_", i);
                string CellNumber = string.Concat("CellNumber_", i);
                string Email = string.Concat("Email_", i);
                string checkedbox = string.Concat("checkedbox_", i);

                <tr>
                    <td>
                        <input id="@FormNo" name="@FormNo" value="@item.FormNo" class="form-control" type="hidden" />
                        @Html.DisplayFor(modelItem => item.FormNo)
                    </td>
                    <td>
                        <input id="@ApplicantName" name="@ApplicantName" value="@item.ApplicantName" class="form-control" type="hidden" readonly />
                        @Html.DisplayFor(modelItem => item.ApplicantName)
                    </td>
                    <td>
                        <input id="@FatherName" name="@FatherName" value="@item.FatherName" class="form-control" type="hidden" readonly />
                        @Html.DisplayFor(modelItem => item.FatherName)
                    </td>
                    <td>
                        <input id="@CellNumber" name="@CellNumber" value="@item.CellNo" class="form-control" type="hidden" readonly />
                        @Html.DisplayFor(modelItem => item.CellNo)
                    </td>
                    <td>
                        <input id="@Email" name="@Email" value="@item.Email" class="form-control" type="hidden" readonly />
                        @Html.DisplayFor(modelItem => item.Email)
                    </td>
                    <td>
                        <input type="checkbox" id="@checkedbox" name="@checkedbox" value="Yes" class="dummyClass" />
                    </td>

                </tr>
                i++;
            }
        </table>
    }
}

@section Scripts {
    <script>
        $(document).ready(function () {
            SelectAllCheckboxes();
            $("#BatchID").val(@ViewBag.hdnBatchID);
            GetPrograms_by_FacultyLevelBatch();
            $("#BatchProgramID").val(@ViewBag.hdnBatchProgramID);
            $("#BatchID").change(function () {
                GetPrograms_by_FacultyLevelBatch();
                $("#BatchProgramID").val(@ViewBag.hdnBatchProgramID);
            });

            $(".chkChecked").on("click", function () {
                var txtEmail, lastName, old;
                $("#ToEmail").prop("readonly", true);
                if ($(this).is(":checked")) {
                    txtEmail = $(this).closest('tr').find('input[name="txtEmail"]').val();
                    old = $("#ToEmail").val();
                    if (old == "") {
                        $("#ToEmail").val(txtEmail);
                    }
                    else {
                        $("#ToEmail").val(old + "," + txtEmail);
                    }
                }
                else {
                    txtEmail = $(this).closest('tr').find('input[name="txtEmail"]').val();
                    old = $("#ToEmail").val();
                    if (old != "") {
                        old = old.replace(txtEmail, "").replace(",", "");
                        $("#ToEmail").val(old);
                    }
                }
            });
        });

        $(function () {
            $('#EmailBody').ckeditor();
        });

        function GetPrograms_by_FacultyLevelBatch() {
            var BatchID = $("#BatchID").val();
            $.ajax({
                url: "@Url.Content("~/SendEmails/GetPrograms_by_FacultyLevelBatch")",
                type: 'POST',
                datatype: 'application/json',
                contentType: 'application/json',
                async: false,
                data: JSON.stringify({ BatchID: +BatchID }),
                success: function (result) {
                    $("#BatchProgramID").html("");
                    $("#BatchProgramID").append($('<option></option>').val("0").html("--Please Select--"));
                    $.each($.parseJSON(result), function (i, sem) {
                        $("#BatchProgramID").append($('<option></option>').val(sem.BatchProgramID).html(sem.ProgramName));
                    });
                },
                error: function (ex) {
                    alert(ex.error);
                },
            });
        }

        function changeHiddenInput(objDropDown) {
            var objHidden = document.getElementById("hdnBatchProgramID");
            objHidden.value = objDropDown.value;
        }

        window.onload = function () {
            document.getElementById("EmailSubject").value = "Offer Letter Email";
            document.getElementById('EmailBody').value = '<strong> ###CurrentDate&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;Offer Letter</strong></br></br> Applicant’s Name: <strong>###ApplicantName</strong></br> Father Name: <strong>###FatherName</strong></br>Application Form No: <strong>###FormNo</br></br>Subject: Admission Offer in ###ProgramName ###BatchSemester </strong></br></br>Dear <strong>###ApplicantName</strong>,</br></br><strong>Congratulations</strong>! You have been provisionally selected for admission to <strong>###ProgramName</strong> Program at @MvcApplication.UniversityName @MvcApplication.UniversityCampusName. Your admission will be confirmed subject to passing the NTS or its equivalent, including @MvcApplication.UniversityName admission test and payment of university dues.</br></br><strong>Result Awaiting Students</strong></br></br> If you are awaiting result of qualifying exam, you will be required to submit final result immediately upon declaration. It is responsibility to inform the university about your result status, failing in compliance may lead to cancellation of your admission.<strong></br></br>Deposit of Fee</strong></br></br>After printing the online fee voucher, you will deposit a fee of <strong> Rs ###DepositFee /- by ###DepositDate </strong> at the designated banks. In case the fee is not deposited by the due date, this admission offer will stand cancelled.</br></br><strong>Note: If you are a transfer applicant please contact student office before submission of fee.</strong></br></br>Please feel free to contact Admission Office for any query on <strong> @MvcApplication.PhoneNumber1 ext @MvcApplication.Extension1, @MvcApplication.MobileNumber1 from 9:00 am to 5:00 pm </strong>'
        }

        function SelectAllCheckboxes() {
            $("#chkSelectAll").change(function () {
                var chkAttr = $("#chkSelectAll").prop("checked");
                if (chkAttr == true) {
                    $(".dummyClass").prop("checked", true);
                }
                else {
                    $(".dummyClass").prop("checked", false);
                }
            });
        }

    </script>
}
