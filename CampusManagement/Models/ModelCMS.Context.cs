//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace CampusManagement.Models
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class ModelCMSContainer : DbContext
    {
        public ModelCMSContainer()
            : base("name=ModelCMSContainer")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<Applicant> Applicants { get; set; }
        public virtual DbSet<ApplicantQualification> ApplicantQualifications { get; set; }
        public virtual DbSet<ApplyForProgram> ApplyForPrograms { get; set; }
        public virtual DbSet<BankAccount> BankAccounts { get; set; }
        public virtual DbSet<Batch> Batches { get; set; }
        public virtual DbSet<BatchProgram> BatchPrograms { get; set; }
        public virtual DbSet<BatchProgramCourse> BatchProgramCourses { get; set; }
        public virtual DbSet<BatchProgramSemester> BatchProgramSemesters { get; set; }
        public virtual DbSet<CampusHomePageSetting> CampusHomePageSettings { get; set; }
        public virtual DbSet<CampusSetting> CampusSettings { get; set; }
        public virtual DbSet<Challan> Challans { get; set; }
        public virtual DbSet<ChallanService> ChallanServices { get; set; }
        public virtual DbSet<City> Cities { get; set; }
        public virtual DbSet<CollegeService> CollegeServices { get; set; }
        public virtual DbSet<Country> Countries { get; set; }
        public virtual DbSet<Course> Courses { get; set; }
        public virtual DbSet<CourseType> CourseTypes { get; set; }
        public virtual DbSet<CurrentOccupation> CurrentOccupations { get; set; }
        public virtual DbSet<Day> Days { get; set; }
        public virtual DbSet<Degree> Degrees { get; set; }
        public virtual DbSet<Department> Departments { get; set; }
        public virtual DbSet<Deposit> Deposits { get; set; }
        public virtual DbSet<DepositType> DepositTypes { get; set; }
        public virtual DbSet<Designation> Designations { get; set; }
        public virtual DbSet<Duration> Durations { get; set; }
        public virtual DbSet<FormSaleDetail> FormSaleDetails { get; set; }
        public virtual DbSet<FormType> FormTypes { get; set; }
        public virtual DbSet<Gender> Genders { get; set; }
        public virtual DbSet<Institute> Institutes { get; set; }
        public virtual DbSet<MaritalStatu> MaritalStatus { get; set; }
        public virtual DbSet<Nationality> Nationalities { get; set; }
        public virtual DbSet<Option> Options { get; set; }
        public virtual DbSet<Program> Programs { get; set; }
        public virtual DbSet<ProgramType> ProgramTypes { get; set; }
        public virtual DbSet<Province> Provinces { get; set; }
        public virtual DbSet<RelationType> RelationTypes { get; set; }
        public virtual DbSet<Religion> Religions { get; set; }
        public virtual DbSet<Room> Rooms { get; set; }
        public virtual DbSet<RoomType> RoomTypes { get; set; }
        public virtual DbSet<Salutation> Salutations { get; set; }
        public virtual DbSet<SelectionCriteria> SelectionCriterias { get; set; }
        public virtual DbSet<Semester> Semesters { get; set; }
        public virtual DbSet<Status> Status { get; set; }
        public virtual DbSet<Student> Students { get; set; }
        public virtual DbSet<StudentBatchProgramCourse> StudentBatchProgramCourses { get; set; }
        public virtual DbSet<StudentProgramEnrollment> StudentProgramEnrollments { get; set; }
        public virtual DbSet<Teacher> Teachers { get; set; }
        public virtual DbSet<TeachersCourseAllocation> TeachersCourseAllocations { get; set; }
        public virtual DbSet<TimeSlot> TimeSlots { get; set; }
        public virtual DbSet<TimeSlotCourseAllocation> TimeSlotCourseAllocations { get; set; }
        public virtual DbSet<TimeTable> TimeTables { get; set; }
        public virtual DbSet<User> Users { get; set; }
    
        public virtual ObjectResult<GetBatchProgramNameConcat_Result> GetBatchProgramNameConcat(string formNo, Nullable<int> queryID)
        {
            var formNoParameter = formNo != null ?
                new ObjectParameter("FormNo", formNo) :
                new ObjectParameter("FormNo", typeof(string));
    
            var queryIDParameter = queryID.HasValue ?
                new ObjectParameter("QueryID", queryID) :
                new ObjectParameter("QueryID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetBatchProgramNameConcat_Result>("GetBatchProgramNameConcat", formNoParameter, queryIDParameter);
        }
    
        public virtual ObjectResult<GetDisplayValues_Result> GetDisplayValues(Nullable<int> queryID, Nullable<int> iD)
        {
            var queryIDParameter = queryID.HasValue ?
                new ObjectParameter("QueryID", queryID) :
                new ObjectParameter("QueryID", typeof(int));
    
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetDisplayValues_Result>("GetDisplayValues", queryIDParameter, iDParameter);
        }
    
        public virtual int InsertTimeTable(Nullable<int> timeSlotID, Nullable<int> tCourseAllocationID, Nullable<int> isDelete)
        {
            var timeSlotIDParameter = timeSlotID.HasValue ?
                new ObjectParameter("TimeSlotID", timeSlotID) :
                new ObjectParameter("TimeSlotID", typeof(int));
    
            var tCourseAllocationIDParameter = tCourseAllocationID.HasValue ?
                new ObjectParameter("TCourseAllocationID", tCourseAllocationID) :
                new ObjectParameter("TCourseAllocationID", typeof(int));
    
            var isDeleteParameter = isDelete.HasValue ?
                new ObjectParameter("IsDelete", isDelete) :
                new ObjectParameter("IsDelete", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertTimeTable", timeSlotIDParameter, tCourseAllocationIDParameter, isDeleteParameter);
        }
    
        public virtual int Insert_StudentEnrollment(Nullable<int> studentID, Nullable<int> batchProgramID, Nullable<System.DateTime> admissionDate, string enrollmentNo, string registrationNo, string degreeCompleted, Nullable<System.DateTime> degreeCompletionDate, Nullable<int> createdBy, string isActive)
        {
            var studentIDParameter = studentID.HasValue ?
                new ObjectParameter("StudentID", studentID) :
                new ObjectParameter("StudentID", typeof(int));
    
            var batchProgramIDParameter = batchProgramID.HasValue ?
                new ObjectParameter("BatchProgramID", batchProgramID) :
                new ObjectParameter("BatchProgramID", typeof(int));
    
            var admissionDateParameter = admissionDate.HasValue ?
                new ObjectParameter("AdmissionDate", admissionDate) :
                new ObjectParameter("AdmissionDate", typeof(System.DateTime));
    
            var enrollmentNoParameter = enrollmentNo != null ?
                new ObjectParameter("EnrollmentNo", enrollmentNo) :
                new ObjectParameter("EnrollmentNo", typeof(string));
    
            var registrationNoParameter = registrationNo != null ?
                new ObjectParameter("RegistrationNo", registrationNo) :
                new ObjectParameter("RegistrationNo", typeof(string));
    
            var degreeCompletedParameter = degreeCompleted != null ?
                new ObjectParameter("DegreeCompleted", degreeCompleted) :
                new ObjectParameter("DegreeCompleted", typeof(string));
    
            var degreeCompletionDateParameter = degreeCompletionDate.HasValue ?
                new ObjectParameter("DegreeCompletionDate", degreeCompletionDate) :
                new ObjectParameter("DegreeCompletionDate", typeof(System.DateTime));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(int));
    
            var isActiveParameter = isActive != null ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Insert_StudentEnrollment", studentIDParameter, batchProgramIDParameter, admissionDateParameter, enrollmentNoParameter, registrationNoParameter, degreeCompletedParameter, degreeCompletionDateParameter, createdByParameter, isActiveParameter);
        }
    
        public virtual ObjectResult<string> InsertChallans(Nullable<int> batchProgramID, Nullable<System.DateTime> issueDate, Nullable<System.DateTime> lastDate, Nullable<int> accountID, string isDeposited, Nullable<int> yearSemesterNo, Nullable<int> voucher_Trans_ID, Nullable<int> createdBy, string isActive, Nullable<decimal> amount, Nullable<int> collegeServiceID, Nullable<int> quantity, Nullable<int> paramStudentID)
        {
            var batchProgramIDParameter = batchProgramID.HasValue ?
                new ObjectParameter("BatchProgramID", batchProgramID) :
                new ObjectParameter("BatchProgramID", typeof(int));
    
            var issueDateParameter = issueDate.HasValue ?
                new ObjectParameter("IssueDate", issueDate) :
                new ObjectParameter("IssueDate", typeof(System.DateTime));
    
            var lastDateParameter = lastDate.HasValue ?
                new ObjectParameter("LastDate", lastDate) :
                new ObjectParameter("LastDate", typeof(System.DateTime));
    
            var accountIDParameter = accountID.HasValue ?
                new ObjectParameter("AccountID", accountID) :
                new ObjectParameter("AccountID", typeof(int));
    
            var isDepositedParameter = isDeposited != null ?
                new ObjectParameter("IsDeposited", isDeposited) :
                new ObjectParameter("IsDeposited", typeof(string));
    
            var yearSemesterNoParameter = yearSemesterNo.HasValue ?
                new ObjectParameter("YearSemesterNo", yearSemesterNo) :
                new ObjectParameter("YearSemesterNo", typeof(int));
    
            var voucher_Trans_IDParameter = voucher_Trans_ID.HasValue ?
                new ObjectParameter("Voucher_Trans_ID", voucher_Trans_ID) :
                new ObjectParameter("Voucher_Trans_ID", typeof(int));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(int));
    
            var isActiveParameter = isActive != null ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(string));
    
            var amountParameter = amount.HasValue ?
                new ObjectParameter("Amount", amount) :
                new ObjectParameter("Amount", typeof(decimal));
    
            var collegeServiceIDParameter = collegeServiceID.HasValue ?
                new ObjectParameter("CollegeServiceID", collegeServiceID) :
                new ObjectParameter("CollegeServiceID", typeof(int));
    
            var quantityParameter = quantity.HasValue ?
                new ObjectParameter("Quantity", quantity) :
                new ObjectParameter("Quantity", typeof(int));
    
            var paramStudentIDParameter = paramStudentID.HasValue ?
                new ObjectParameter("paramStudentID", paramStudentID) :
                new ObjectParameter("paramStudentID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("InsertChallans", batchProgramIDParameter, issueDateParameter, lastDateParameter, accountIDParameter, isDepositedParameter, yearSemesterNoParameter, voucher_Trans_IDParameter, createdByParameter, isActiveParameter, amountParameter, collegeServiceIDParameter, quantityParameter, paramStudentIDParameter);
        }
    
        public virtual ObjectResult<GetAllChallans_Result> GetAllChallans(Nullable<int> batchProgramID, Nullable<int> studentID, Nullable<int> yearSemesterNo)
        {
            var batchProgramIDParameter = batchProgramID.HasValue ?
                new ObjectParameter("BatchProgramID", batchProgramID) :
                new ObjectParameter("BatchProgramID", typeof(int));
    
            var studentIDParameter = studentID.HasValue ?
                new ObjectParameter("StudentID", studentID) :
                new ObjectParameter("StudentID", typeof(int));
    
            var yearSemesterNoParameter = yearSemesterNo.HasValue ?
                new ObjectParameter("YearSemesterNo", yearSemesterNo) :
                new ObjectParameter("YearSemesterNo", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetAllChallans_Result>("GetAllChallans", batchProgramIDParameter, studentIDParameter, yearSemesterNoParameter);
        }
    
        public virtual int ApproveStudentChallan(Nullable<System.DateTime> depositDate, Nullable<int> challanID, Nullable<int> createdBy)
        {
            var depositDateParameter = depositDate.HasValue ?
                new ObjectParameter("DepositDate", depositDate) :
                new ObjectParameter("DepositDate", typeof(System.DateTime));
    
            var challanIDParameter = challanID.HasValue ?
                new ObjectParameter("ChallanID", challanID) :
                new ObjectParameter("ChallanID", typeof(int));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("ApproveStudentChallan", depositDateParameter, challanIDParameter, createdByParameter);
        }
    
        public virtual int InsertFormSaleDetail(Nullable<int> formID, string formNo, Nullable<int> formTypeID, string formPrice, string formDescription, Nullable<int> depositTypeID, Nullable<int> batchProgramID, string applicantName, string fatherName, string phoneNo, string cNIC, string depositSlipNo, Nullable<System.DateTime> purchaseDate, Nullable<int> accountID, Nullable<int> createdBy, string isActive, Nullable<int> modifiedBy, string isReceived, Nullable<System.DateTime> receiveDate)
        {
            var formIDParameter = formID.HasValue ?
                new ObjectParameter("FormID", formID) :
                new ObjectParameter("FormID", typeof(int));
    
            var formNoParameter = formNo != null ?
                new ObjectParameter("FormNo", formNo) :
                new ObjectParameter("FormNo", typeof(string));
    
            var formTypeIDParameter = formTypeID.HasValue ?
                new ObjectParameter("FormTypeID", formTypeID) :
                new ObjectParameter("FormTypeID", typeof(int));
    
            var formPriceParameter = formPrice != null ?
                new ObjectParameter("FormPrice", formPrice) :
                new ObjectParameter("FormPrice", typeof(string));
    
            var formDescriptionParameter = formDescription != null ?
                new ObjectParameter("FormDescription", formDescription) :
                new ObjectParameter("FormDescription", typeof(string));
    
            var depositTypeIDParameter = depositTypeID.HasValue ?
                new ObjectParameter("DepositTypeID", depositTypeID) :
                new ObjectParameter("DepositTypeID", typeof(int));
    
            var batchProgramIDParameter = batchProgramID.HasValue ?
                new ObjectParameter("BatchProgramID", batchProgramID) :
                new ObjectParameter("BatchProgramID", typeof(int));
    
            var applicantNameParameter = applicantName != null ?
                new ObjectParameter("ApplicantName", applicantName) :
                new ObjectParameter("ApplicantName", typeof(string));
    
            var fatherNameParameter = fatherName != null ?
                new ObjectParameter("FatherName", fatherName) :
                new ObjectParameter("FatherName", typeof(string));
    
            var phoneNoParameter = phoneNo != null ?
                new ObjectParameter("PhoneNo", phoneNo) :
                new ObjectParameter("PhoneNo", typeof(string));
    
            var cNICParameter = cNIC != null ?
                new ObjectParameter("CNIC", cNIC) :
                new ObjectParameter("CNIC", typeof(string));
    
            var depositSlipNoParameter = depositSlipNo != null ?
                new ObjectParameter("DepositSlipNo", depositSlipNo) :
                new ObjectParameter("DepositSlipNo", typeof(string));
    
            var purchaseDateParameter = purchaseDate.HasValue ?
                new ObjectParameter("PurchaseDate", purchaseDate) :
                new ObjectParameter("PurchaseDate", typeof(System.DateTime));
    
            var accountIDParameter = accountID.HasValue ?
                new ObjectParameter("AccountID", accountID) :
                new ObjectParameter("AccountID", typeof(int));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(int));
    
            var isActiveParameter = isActive != null ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(string));
    
            var modifiedByParameter = modifiedBy.HasValue ?
                new ObjectParameter("ModifiedBy", modifiedBy) :
                new ObjectParameter("ModifiedBy", typeof(int));
    
            var isReceivedParameter = isReceived != null ?
                new ObjectParameter("IsReceived", isReceived) :
                new ObjectParameter("IsReceived", typeof(string));
    
            var receiveDateParameter = receiveDate.HasValue ?
                new ObjectParameter("ReceiveDate", receiveDate) :
                new ObjectParameter("ReceiveDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertFormSaleDetail", formIDParameter, formNoParameter, formTypeIDParameter, formPriceParameter, formDescriptionParameter, depositTypeIDParameter, batchProgramIDParameter, applicantNameParameter, fatherNameParameter, phoneNoParameter, cNICParameter, depositSlipNoParameter, purchaseDateParameter, accountIDParameter, createdByParameter, isActiveParameter, modifiedByParameter, isReceivedParameter, receiveDateParameter);
        }
    
        public virtual ObjectResult<GetSelectionCriteria_Result> GetSelectionCriteria(Nullable<int> batchProgramID, Nullable<int> degreeID, string paramSearch)
        {
            var batchProgramIDParameter = batchProgramID.HasValue ?
                new ObjectParameter("BatchProgramID", batchProgramID) :
                new ObjectParameter("BatchProgramID", typeof(int));
    
            var degreeIDParameter = degreeID.HasValue ?
                new ObjectParameter("DegreeID", degreeID) :
                new ObjectParameter("DegreeID", typeof(int));
    
            var paramSearchParameter = paramSearch != null ?
                new ObjectParameter("paramSearch", paramSearch) :
                new ObjectParameter("paramSearch", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetSelectionCriteria_Result>("GetSelectionCriteria", batchProgramIDParameter, degreeIDParameter, paramSearchParameter);
        }
    
        public virtual int InsertEntryTestInterviewMarks(string formNo, Nullable<int> degreeID, Nullable<double> totalMarks, Nullable<double> obtainedMarks, string statusName, Nullable<int> queryId)
        {
            var formNoParameter = formNo != null ?
                new ObjectParameter("FormNo", formNo) :
                new ObjectParameter("FormNo", typeof(string));
    
            var degreeIDParameter = degreeID.HasValue ?
                new ObjectParameter("DegreeID", degreeID) :
                new ObjectParameter("DegreeID", typeof(int));
    
            var totalMarksParameter = totalMarks.HasValue ?
                new ObjectParameter("TotalMarks", totalMarks) :
                new ObjectParameter("TotalMarks", typeof(double));
    
            var obtainedMarksParameter = obtainedMarks.HasValue ?
                new ObjectParameter("ObtainedMarks", obtainedMarks) :
                new ObjectParameter("ObtainedMarks", typeof(double));
    
            var statusNameParameter = statusName != null ?
                new ObjectParameter("StatusName", statusName) :
                new ObjectParameter("StatusName", typeof(string));
    
            var queryIdParameter = queryId.HasValue ?
                new ObjectParameter("QueryId", queryId) :
                new ObjectParameter("QueryId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertEntryTestInterviewMarks", formNoParameter, degreeIDParameter, totalMarksParameter, obtainedMarksParameter, statusNameParameter, queryIdParameter);
        }
    
        public virtual ObjectResult<rpt_GetFormSaleSlip_Result> rpt_GetFormSaleSlip(Nullable<int> formID)
        {
            var formIDParameter = formID.HasValue ?
                new ObjectParameter("FormID", formID) :
                new ObjectParameter("FormID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<rpt_GetFormSaleSlip_Result>("rpt_GetFormSaleSlip", formIDParameter);
        }
    
        public virtual ObjectResult<GetApplicant_Result> GetApplicant(string search)
        {
            var searchParameter = search != null ?
                new ObjectParameter("Search", search) :
                new ObjectParameter("Search", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetApplicant_Result>("GetApplicant", searchParameter);
        }
    
        public virtual ObjectResult<GetApplicantPersonalInfo_Result> GetApplicantPersonalInfo(string formNo)
        {
            var formNoParameter = formNo != null ?
                new ObjectParameter("FormNo", formNo) :
                new ObjectParameter("FormNo", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetApplicantPersonalInfo_Result>("GetApplicantPersonalInfo", formNoParameter);
        }
    
        public virtual ObjectResult<GetApplicantSummary_Result> GetApplicantSummary(string search)
        {
            var searchParameter = search != null ?
                new ObjectParameter("Search", search) :
                new ObjectParameter("Search", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetApplicantSummary_Result>("GetApplicantSummary", searchParameter);
        }
    
        public virtual ObjectResult<GetApplyForPrograms_Result> GetApplyForPrograms(string formNo)
        {
            var formNoParameter = formNo != null ?
                new ObjectParameter("FormNo", formNo) :
                new ObjectParameter("FormNo", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetApplyForPrograms_Result>("GetApplyForPrograms", formNoParameter);
        }
    
        public virtual ObjectResult<GetChallan_Result> GetChallan(Nullable<int> challanID)
        {
            var challanIDParameter = challanID.HasValue ?
                new ObjectParameter("ChallanID", challanID) :
                new ObjectParameter("ChallanID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetChallan_Result>("GetChallan", challanIDParameter);
        }
    
        public virtual ObjectResult<GetChallanService_Result> GetChallanService(Nullable<int> challanID)
        {
            var challanIDParameter = challanID.HasValue ?
                new ObjectParameter("ChallanID", challanID) :
                new ObjectParameter("ChallanID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetChallanService_Result>("GetChallanService", challanIDParameter);
        }
    
        public virtual ObjectResult<GetFormSaleDetail_Result> GetFormSaleDetail(string paramSearch, string isReceived)
        {
            var paramSearchParameter = paramSearch != null ?
                new ObjectParameter("paramSearch", paramSearch) :
                new ObjectParameter("paramSearch", typeof(string));
    
            var isReceivedParameter = isReceived != null ?
                new ObjectParameter("IsReceived", isReceived) :
                new ObjectParameter("IsReceived", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetFormSaleDetail_Result>("GetFormSaleDetail", paramSearchParameter, isReceivedParameter);
        }
    
        public virtual ObjectResult<GetQualification_Result> GetQualification(string formNo)
        {
            var formNoParameter = formNo != null ?
                new ObjectParameter("FormNo", formNo) :
                new ObjectParameter("FormNo", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetQualification_Result>("GetQualification", formNoParameter);
        }
    
        public virtual ObjectResult<GetStudentPersonalInfo_Result> GetStudentPersonalInfo(string formNo)
        {
            var formNoParameter = formNo != null ?
                new ObjectParameter("FormNo", formNo) :
                new ObjectParameter("FormNo", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetStudentPersonalInfo_Result>("GetStudentPersonalInfo", formNoParameter);
        }
    
        public virtual int InsertStudentBatchProgramCourse(Nullable<int> programCourseID, Nullable<int> studentID, Nullable<int> courseID, Nullable<int> yearSemesterNo, Nullable<int> batchProgramID, Nullable<int> createdBy, string isActive, Nullable<int> queryID)
        {
            var programCourseIDParameter = programCourseID.HasValue ?
                new ObjectParameter("ProgramCourseID", programCourseID) :
                new ObjectParameter("ProgramCourseID", typeof(int));
    
            var studentIDParameter = studentID.HasValue ?
                new ObjectParameter("StudentID", studentID) :
                new ObjectParameter("StudentID", typeof(int));
    
            var courseIDParameter = courseID.HasValue ?
                new ObjectParameter("CourseID", courseID) :
                new ObjectParameter("CourseID", typeof(int));
    
            var yearSemesterNoParameter = yearSemesterNo.HasValue ?
                new ObjectParameter("YearSemesterNo", yearSemesterNo) :
                new ObjectParameter("YearSemesterNo", typeof(int));
    
            var batchProgramIDParameter = batchProgramID.HasValue ?
                new ObjectParameter("BatchProgramID", batchProgramID) :
                new ObjectParameter("BatchProgramID", typeof(int));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(int));
    
            var isActiveParameter = isActive != null ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(string));
    
            var queryIDParameter = queryID.HasValue ?
                new ObjectParameter("QueryID", queryID) :
                new ObjectParameter("QueryID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertStudentBatchProgramCourse", programCourseIDParameter, studentIDParameter, courseIDParameter, yearSemesterNoParameter, batchProgramIDParameter, createdByParameter, isActiveParameter, queryIDParameter);
        }
    
        public virtual ObjectResult<rpt_GetBatchProgramStudentSummary_Result> rpt_GetBatchProgramStudentSummary(string search)
        {
            var searchParameter = search != null ?
                new ObjectParameter("Search", search) :
                new ObjectParameter("Search", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<rpt_GetBatchProgramStudentSummary_Result>("rpt_GetBatchProgramStudentSummary", searchParameter);
        }
    
        public virtual ObjectResult<rpt_GetMeritList_Result> rpt_GetMeritList(Nullable<int> batchProgramID)
        {
            var batchProgramIDParameter = batchProgramID.HasValue ?
                new ObjectParameter("BatchProgramID", batchProgramID) :
                new ObjectParameter("BatchProgramID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<rpt_GetMeritList_Result>("rpt_GetMeritList", batchProgramIDParameter);
        }
    
        public virtual ObjectResult<rpt_GetStudentCoursesDetail_Result> rpt_GetStudentCoursesDetail(Nullable<int> batchProgramID, Nullable<int> studentID, Nullable<int> yearSemesterNo)
        {
            var batchProgramIDParameter = batchProgramID.HasValue ?
                new ObjectParameter("BatchProgramID", batchProgramID) :
                new ObjectParameter("BatchProgramID", typeof(int));
    
            var studentIDParameter = studentID.HasValue ?
                new ObjectParameter("StudentID", studentID) :
                new ObjectParameter("StudentID", typeof(int));
    
            var yearSemesterNoParameter = yearSemesterNo.HasValue ?
                new ObjectParameter("YearSemesterNo", yearSemesterNo) :
                new ObjectParameter("YearSemesterNo", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<rpt_GetStudentCoursesDetail_Result>("rpt_GetStudentCoursesDetail", batchProgramIDParameter, studentIDParameter, yearSemesterNoParameter);
        }
    
        public virtual ObjectResult<GetEnrolledStudent_Result> GetEnrolledStudent(string paramSearch)
        {
            var paramSearchParameter = paramSearch != null ?
                new ObjectParameter("paramSearch", paramSearch) :
                new ObjectParameter("paramSearch", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetEnrolledStudent_Result>("GetEnrolledStudent", paramSearchParameter);
        }
    
        public virtual ObjectResult<GetStudentChallans_Result> GetStudentChallans(Nullable<int> studentID)
        {
            var studentIDParameter = studentID.HasValue ?
                new ObjectParameter("StudentID", studentID) :
                new ObjectParameter("StudentID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetStudentChallans_Result>("GetStudentChallans", studentIDParameter);
        }
    
        public virtual int InsertPostedVouchers(Nullable<int> formID)
        {
            var formIDParameter = formID.HasValue ?
                new ObjectParameter("FormID", formID) :
                new ObjectParameter("FormID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertPostedVouchers", formIDParameter);
        }
    }
}
