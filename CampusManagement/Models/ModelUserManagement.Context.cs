//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace CampusManagement.Models
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class ModelUserManagementContainer : DbContext
    {
        public ModelUserManagementContainer()
            : base("name=ModelUserManagementContainer")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<Login_log> Login_log { get; set; }
        public virtual DbSet<Login> Logins { get; set; }
    
        public virtual ObjectResult<GetLoginUser_Result> GetLoginUser(string userName, string password)
        {
            var userNameParameter = userName != null ?
                new ObjectParameter("UserName", userName) :
                new ObjectParameter("UserName", typeof(string));
    
            var passwordParameter = password != null ?
                new ObjectParameter("Password", password) :
                new ObjectParameter("Password", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetLoginUser_Result>("GetLoginUser", userNameParameter, passwordParameter);
        }
    
        public virtual ObjectResult<Get_Modules_Result> Get_Modules()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Get_Modules_Result>("Get_Modules");
        }
    
        public virtual ObjectResult<Get_Module_Pages_Result> Get_Module_Pages(Nullable<int> empID)
        {
            var empIDParameter = empID.HasValue ?
                new ObjectParameter("EmpID", empID) :
                new ObjectParameter("EmpID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Get_Module_Pages_Result>("Get_Module_Pages", empIDParameter);
        }
    
        public virtual int Insert_CreateLogin(string userName, string password, Nullable<int> empId, Nullable<int> mainpage, string empType, Nullable<int> shiftID)
        {
            var userNameParameter = userName != null ?
                new ObjectParameter("UserName", userName) :
                new ObjectParameter("UserName", typeof(string));
    
            var passwordParameter = password != null ?
                new ObjectParameter("Password", password) :
                new ObjectParameter("Password", typeof(string));
    
            var empIdParameter = empId.HasValue ?
                new ObjectParameter("EmpId", empId) :
                new ObjectParameter("EmpId", typeof(int));
    
            var mainpageParameter = mainpage.HasValue ?
                new ObjectParameter("Mainpage", mainpage) :
                new ObjectParameter("Mainpage", typeof(int));
    
            var empTypeParameter = empType != null ?
                new ObjectParameter("EmpType", empType) :
                new ObjectParameter("EmpType", typeof(string));
    
            var shiftIDParameter = shiftID.HasValue ?
                new ObjectParameter("ShiftID", shiftID) :
                new ObjectParameter("ShiftID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Insert_CreateLogin", userNameParameter, passwordParameter, empIdParameter, mainpageParameter, empTypeParameter, shiftIDParameter);
        }
    
        public virtual int InsertApplicantLoginWithPages(string userName, string password, string empType)
        {
            var userNameParameter = userName != null ?
                new ObjectParameter("UserName", userName) :
                new ObjectParameter("UserName", typeof(string));
    
            var passwordParameter = password != null ?
                new ObjectParameter("Password", password) :
                new ObjectParameter("Password", typeof(string));
    
            var empTypeParameter = empType != null ?
                new ObjectParameter("EmpType", empType) :
                new ObjectParameter("EmpType", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertApplicantLoginWithPages", userNameParameter, passwordParameter, empTypeParameter);
        }
    }
}
