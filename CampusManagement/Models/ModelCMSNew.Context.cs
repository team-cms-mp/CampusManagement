//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace CampusManagement.Models
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class ModelCMSNewContainer : DbContext
    {
        public ModelCMSNewContainer()
            : base("name=ModelCMSNewContainer")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<AlumniEducationExpo> AlumniEducationExpoes { get; set; }
        public virtual DbSet<AlumniReunionsDinner> AlumniReunionsDinners { get; set; }
        public virtual DbSet<AlumniUser> AlumniUsers { get; set; }
        public virtual DbSet<AlumniUserBlog> AlumniUserBlogs { get; set; }
        public virtual DbSet<AlumniUserBlogComment> AlumniUserBlogComments { get; set; }
        public virtual DbSet<AlumniUserCareer> AlumniUserCareers { get; set; }
        public virtual DbSet<AlumniUserCareerApplicant> AlumniUserCareerApplicants { get; set; }
        public virtual DbSet<AlumniUserEvent> AlumniUserEvents { get; set; }
        public virtual DbSet<AlumniUserNew> AlumniUserNews { get; set; }
        public virtual DbSet<AlumniUserPhoto> AlumniUserPhotoes { get; set; }
        public virtual DbSet<AlumniUserResume> AlumniUserResumes { get; set; }
        public virtual DbSet<Applicant> Applicants { get; set; }
        public virtual DbSet<ApplicantDocumentCheckList> ApplicantDocumentCheckLists { get; set; }
        public virtual DbSet<ApplicantInstituteStatu> ApplicantInstituteStatus { get; set; }
        public virtual DbSet<ApplicantQualification> ApplicantQualifications { get; set; }
        public virtual DbSet<ApplicantUpload> ApplicantUploads { get; set; }
        public virtual DbSet<ApplyForProgram> ApplyForPrograms { get; set; }
        public virtual DbSet<BankAccount> BankAccounts { get; set; }
        public virtual DbSet<Batch> Batches { get; set; }
        public virtual DbSet<BatchProgram> BatchPrograms { get; set; }
        public virtual DbSet<BatchProgramCourse> BatchProgramCourses { get; set; }
        public virtual DbSet<BatchProgramSemester> BatchProgramSemesters { get; set; }
        public virtual DbSet<BeliTrust> BeliTrusts { get; set; }
        public virtual DbSet<BeliTrustAffidavit> BeliTrustAffidavits { get; set; }
        public virtual DbSet<BeliTrustCategory> BeliTrustCategories { get; set; }
        public virtual DbSet<CampusHomePageSetting> CampusHomePageSettings { get; set; }
        public virtual DbSet<CampusSetting> CampusSettings { get; set; }
        public virtual DbSet<Challan> Challans { get; set; }
        public virtual DbSet<ChallanService> ChallanServices { get; set; }
        public virtual DbSet<City> Cities { get; set; }
        public virtual DbSet<CollegeService> CollegeServices { get; set; }
        public virtual DbSet<CollegeServiceHistory> CollegeServiceHistories { get; set; }
        public virtual DbSet<Country> Countries { get; set; }
        public virtual DbSet<Course> Courses { get; set; }
        public virtual DbSet<CourseType> CourseTypes { get; set; }
        public virtual DbSet<CurrentOccupation> CurrentOccupations { get; set; }
        public virtual DbSet<DateTable> DateTables { get; set; }
        public virtual DbSet<Day> Days { get; set; }
        public virtual DbSet<Degree> Degrees { get; set; }
        public virtual DbSet<DegreeTitle> DegreeTitles { get; set; }
        public virtual DbSet<Department> Departments { get; set; }
        public virtual DbSet<Deposit> Deposits { get; set; }
        public virtual DbSet<DepositType> DepositTypes { get; set; }
        public virtual DbSet<Designation> Designations { get; set; }
        public virtual DbSet<Discipline> Disciplines { get; set; }
        public virtual DbSet<DisciplineCategory> DisciplineCategories { get; set; }
        public virtual DbSet<DisciplineCommitted> DisciplineCommitteds { get; set; }
        public virtual DbSet<DisciplineSeverityLevel> DisciplineSeverityLevels { get; set; }
        public virtual DbSet<DisciplineType> DisciplineTypes { get; set; }
        public virtual DbSet<District> Districts { get; set; }
        public virtual DbSet<DocumentCheckList> DocumentCheckLists { get; set; }
        public virtual DbSet<Duration> Durations { get; set; }
        public virtual DbSet<EntryTest> EntryTests { get; set; }
        public virtual DbSet<Exam> Exams { get; set; }
        public virtual DbSet<ExamDate> ExamDates { get; set; }
        public virtual DbSet<ExamDateAvailableSolt> ExamDateAvailableSolts { get; set; }
        public virtual DbSet<ExamDatesheet> ExamDatesheets { get; set; }
        public virtual DbSet<ExamDateTimeSlot> ExamDateTimeSlots { get; set; }
        public virtual DbSet<ExamEligibleStudent> ExamEligibleStudents { get; set; }
        public virtual DbSet<ExamEligibleStudentForExam> ExamEligibleStudentForExams { get; set; }
        public virtual DbSet<ExamGradeAppealForm> ExamGradeAppealForms { get; set; }
        public virtual DbSet<ExamGradeAppealFormCourseDetail> ExamGradeAppealFormCourseDetails { get; set; }
        public virtual DbSet<ExamRosterDetail> ExamRosterDetails { get; set; }
        public virtual DbSet<ExamsDateSheetDetail> ExamsDateSheetDetails { get; set; }
        public virtual DbSet<ExamSeason> ExamSeasons { get; set; }
        public virtual DbSet<ExamStudentRoom> ExamStudentRooms { get; set; }
        public virtual DbSet<ExamStudentSubjectChangeGradeForm> ExamStudentSubjectChangeGradeForms { get; set; }
        public virtual DbSet<ExamStudentSubjectMark> ExamStudentSubjectMarks { get; set; }
        public virtual DbSet<ExamStudentSubjectMarkDetail> ExamStudentSubjectMarkDetails { get; set; }
        public virtual DbSet<ExamStudentSubjectMarkType> ExamStudentSubjectMarkTypes { get; set; }
        public virtual DbSet<ExamSubjectMarkSheet> ExamSubjectMarkSheets { get; set; }
        public virtual DbSet<ExamTerm> ExamTerms { get; set; }
        public virtual DbSet<FamilyMember> FamilyMembers { get; set; }
        public virtual DbSet<FinancialSupport> FinancialSupports { get; set; }
        public virtual DbSet<FormSaleDetail> FormSaleDetails { get; set; }
        public virtual DbSet<FormType> FormTypes { get; set; }
        public virtual DbSet<Gender> Genders { get; set; }
        public virtual DbSet<GeneralSetting> GeneralSettings { get; set; }
        public virtual DbSet<Institute> Institutes { get; set; }
        public virtual DbSet<InstituteStatu> InstituteStatus { get; set; }
        public virtual DbSet<Level> Levels { get; set; }
        public virtual DbSet<LMSQuestionType> LMSQuestionTypes { get; set; }
        public virtual DbSet<LMSQuiz> LMSQuizs { get; set; }
        public virtual DbSet<LMSQuizIQuestion> LMSQuizIQuestions { get; set; }
        public virtual DbSet<LMSStudentQuizAttempt> LMSStudentQuizAttempts { get; set; }
        public virtual DbSet<LMSStudentQuizAttemptDetail> LMSStudentQuizAttemptDetails { get; set; }
        public virtual DbSet<LMSStudentQuizAttemptHistory> LMSStudentQuizAttemptHistories { get; set; }
        public virtual DbSet<LMSSubjectLearning> LMSSubjectLearnings { get; set; }
        public virtual DbSet<LMSWeek> LMSWeeks { get; set; }
        public virtual DbSet<LMSWeekDetail> LMSWeekDetails { get; set; }
        public virtual DbSet<LMSWeekDetailAttempt> LMSWeekDetailAttempts { get; set; }
        public virtual DbSet<LMSWeekListType> LMSWeekListTypes { get; set; }
        public virtual DbSet<MaritalStatu> MaritalStatus { get; set; }
        public virtual DbSet<Nationality> Nationalities { get; set; }
        public virtual DbSet<NoticeBoard> NoticeBoards { get; set; }
        public virtual DbSet<NoticeType> NoticeTypes { get; set; }
        public virtual DbSet<OBE_BatchProgramPLOCourseCLO> OBE_BatchProgramPLOCourseCLO { get; set; }
        public virtual DbSet<OBE_CourseCLO> OBE_CourseCLO { get; set; }
        public virtual DbSet<OBE_Level> OBE_Level { get; set; }
        public virtual DbSet<OBE_PLOCourseCLO> OBE_PLOCourseCLO { get; set; }
        public virtual DbSet<OBE_ProgramPLO> OBE_ProgramPLO { get; set; }
        public virtual DbSet<OBE_QuestionType> OBE_QuestionType { get; set; }
        public virtual DbSet<Option> Options { get; set; }
        public virtual DbSet<Program> Programs { get; set; }
        public virtual DbSet<ProgramType> ProgramTypes { get; set; }
        public virtual DbSet<Province> Provinces { get; set; }
        public virtual DbSet<QRCode> QRCodes { get; set; }
        public virtual DbSet<QuestionAnswer> QuestionAnswers { get; set; }
        public virtual DbSet<QuestionBank> QuestionBanks { get; set; }
        public virtual DbSet<RelationType> RelationTypes { get; set; }
        public virtual DbSet<Religion> Religions { get; set; }
        public virtual DbSet<Room> Rooms { get; set; }
        public virtual DbSet<RoomType> RoomTypes { get; set; }
        public virtual DbSet<Salutation> Salutations { get; set; }
        public virtual DbSet<ScholarshipApplicant> ScholarshipApplicants { get; set; }
        public virtual DbSet<ScholarshipApplicantDocument> ScholarshipApplicantDocuments { get; set; }
        public virtual DbSet<ScholarshipCatagory> ScholarshipCatagories { get; set; }
        public virtual DbSet<ScholarshipDocument> ScholarshipDocuments { get; set; }
        public virtual DbSet<ScholarshipOpportunitie> ScholarshipOpportunities { get; set; }
        public virtual DbSet<Section> Sections { get; set; }
        public virtual DbSet<SelectionCriteria> SelectionCriterias { get; set; }
        public virtual DbSet<Semester> Semesters { get; set; }
        public virtual DbSet<SF_StudentDiscount> SF_StudentDiscount { get; set; }
        public virtual DbSet<SF_StudentDiscountApplied> SF_StudentDiscountApplied { get; set; }
        public virtual DbSet<SF_StudentDiscountType> SF_StudentDiscountType { get; set; }
        public virtual DbSet<SF_StudentFine> SF_StudentFine { get; set; }
        public virtual DbSet<SF_StudentFineType> SF_StudentFineType { get; set; }
        public virtual DbSet<SF_StudentPercentageInstallment> SF_StudentPercentageInstallment { get; set; }
        public virtual DbSet<SF_StudentService> SF_StudentService { get; set; }
        public virtual DbSet<SF_StudentServiceInstallment> SF_StudentServiceInstallment { get; set; }
        public virtual DbSet<SF_StudentServiceInstallmentAdjustment> SF_StudentServiceInstallmentAdjustment { get; set; }
        public virtual DbSet<Shift> Shifts { get; set; }
        public virtual DbSet<Specialization> Specializations { get; set; }
        public virtual DbSet<Status> Status { get; set; }
        public virtual DbSet<Student> Students { get; set; }
        public virtual DbSet<StudentAttandance> StudentAttandances { get; set; }
        public virtual DbSet<StudentBatchProgramCourse> StudentBatchProgramCourses { get; set; }
        public virtual DbSet<StudentCurrentSemester> StudentCurrentSemesters { get; set; }
        public virtual DbSet<StudentDiscountRequest> StudentDiscountRequests { get; set; }
        public virtual DbSet<StudentPresentStatu> StudentPresentStatus { get; set; }
        public virtual DbSet<StudentProgramEnrollment> StudentProgramEnrollments { get; set; }
        public virtual DbSet<StudentRequestStatu> StudentRequestStatus { get; set; }
        public virtual DbSet<StudentRequestType> StudentRequestTypes { get; set; }
        public virtual DbSet<Teacher> Teachers { get; set; }
        public virtual DbSet<TeachersCourseAllocation> TeachersCourseAllocations { get; set; }
        public virtual DbSet<TeacherUpload> TeacherUploads { get; set; }
        public virtual DbSet<TimeSlot> TimeSlots { get; set; }
        public virtual DbSet<TimeSlotCourseAllocation> TimeSlotCourseAllocations { get; set; }
        public virtual DbSet<TimeTable> TimeTables { get; set; }
        public virtual DbSet<TimeTableBatchProgramCourseData> TimeTableBatchProgramCourseDatas { get; set; }
        public virtual DbSet<TimeTableBatchProgramCourseDataSlot> TimeTableBatchProgramCourseDataSlots { get; set; }
        public virtual DbSet<TimeTableData> TimeTableDatas { get; set; }
        public virtual DbSet<TimeTableDataTempTable> TimeTableDataTempTables { get; set; }
        public virtual DbSet<TimeTableDate> TimeTableDates { get; set; }
        public virtual DbSet<TimeTableMain> TimeTableMains { get; set; }
        public virtual DbSet<TimeTableSlot> TimeTableSlots { get; set; }
        public virtual DbSet<TimeTableSlotDate> TimeTableSlotDates { get; set; }
        public virtual DbSet<TimeTableYear> TimeTableYears { get; set; }
        public virtual DbSet<User> Users { get; set; }
        public virtual DbSet<UserChat> UserChats { get; set; }
        public virtual DbSet<UserChatMessage> UserChatMessages { get; set; }
        public virtual DbSet<ProgramMeritFormula> ProgramMeritFormulas { get; set; }
        public virtual DbSet<TimeTableManualTimeSlot> TimeTableManualTimeSlots { get; set; }
        public virtual DbSet<Finance_Bank_Accounts> Finance_Bank_Accounts { get; set; }
        public virtual DbSet<Finance_Expenditures> Finance_Expenditures { get; set; }
        public virtual DbSet<Login> Logins { get; set; }
    
        public virtual int ApproveStudentChallan(Nullable<System.DateTime> depositDate, Nullable<int> challanID, Nullable<int> createdBy, string type)
        {
            var depositDateParameter = depositDate.HasValue ?
                new ObjectParameter("DepositDate", depositDate) :
                new ObjectParameter("DepositDate", typeof(System.DateTime));
    
            var challanIDParameter = challanID.HasValue ?
                new ObjectParameter("ChallanID", challanID) :
                new ObjectParameter("ChallanID", typeof(int));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(int));
    
            var typeParameter = type != null ?
                new ObjectParameter("Type", type) :
                new ObjectParameter("Type", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("ApproveStudentChallan", depositDateParameter, challanIDParameter, createdByParameter, typeParameter);
        }
    
        public virtual int DeleteExamDutyRosterByID(Nullable<int> examRosterDetailID)
        {
            var examRosterDetailIDParameter = examRosterDetailID.HasValue ?
                new ObjectParameter("ExamRosterDetailID", examRosterDetailID) :
                new ObjectParameter("ExamRosterDetailID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteExamDutyRosterByID", examRosterDetailIDParameter);
        }
    
        public virtual int DeleteLMSStudentQuizAttemptDetail(Nullable<int> lMSStudentQuizAttemptID, Nullable<int> lMSQuizID, Nullable<int> studentID)
        {
            var lMSStudentQuizAttemptIDParameter = lMSStudentQuizAttemptID.HasValue ?
                new ObjectParameter("LMSStudentQuizAttemptID", lMSStudentQuizAttemptID) :
                new ObjectParameter("LMSStudentQuizAttemptID", typeof(int));
    
            var lMSQuizIDParameter = lMSQuizID.HasValue ?
                new ObjectParameter("LMSQuizID", lMSQuizID) :
                new ObjectParameter("LMSQuizID", typeof(int));
    
            var studentIDParameter = studentID.HasValue ?
                new ObjectParameter("StudentID", studentID) :
                new ObjectParameter("StudentID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteLMSStudentQuizAttemptDetail", lMSStudentQuizAttemptIDParameter, lMSQuizIDParameter, studentIDParameter);
        }
    
        public virtual int DeleteStudentAttandance_ByID(Nullable<int> studentAttandanceID)
        {
            var studentAttandanceIDParameter = studentAttandanceID.HasValue ?
                new ObjectParameter("StudentAttandanceID", studentAttandanceID) :
                new ObjectParameter("StudentAttandanceID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteStudentAttandance_ByID", studentAttandanceIDParameter);
        }
    
        public virtual int DoNotShowAdmitCardToApplicantWithNAT(string formNo)
        {
            var formNoParameter = formNo != null ?
                new ObjectParameter("FormNo", formNo) :
                new ObjectParameter("FormNo", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DoNotShowAdmitCardToApplicantWithNAT", formNoParameter);
        }
    
        public virtual int GenerateRegisrationNumber(Nullable<int> batchID, Nullable<int> queryID, ObjectParameter rollNumber, ObjectParameter registrationNo)
        {
            var batchIDParameter = batchID.HasValue ?
                new ObjectParameter("BatchID", batchID) :
                new ObjectParameter("BatchID", typeof(int));
    
            var queryIDParameter = queryID.HasValue ?
                new ObjectParameter("QueryID", queryID) :
                new ObjectParameter("QueryID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GenerateRegisrationNumber", batchIDParameter, queryIDParameter, rollNumber, registrationNo);
        }
    
        public virtual ObjectResult<Get_Module_Pages_Result> Get_Module_Pages(Nullable<int> empID)
        {
            var empIDParameter = empID.HasValue ?
                new ObjectParameter("EmpID", empID) :
                new ObjectParameter("EmpID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Get_Module_Pages_Result>("Get_Module_Pages", empIDParameter);
        }
    
        public virtual ObjectResult<Get_Modules_Result> Get_Modules()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Get_Modules_Result>("Get_Modules");
        }
    
        public virtual ObjectResult<GetActiveEntryTest_Result> GetActiveEntryTest(Nullable<int> queryID)
        {
            var queryIDParameter = queryID.HasValue ?
                new ObjectParameter("QueryID", queryID) :
                new ObjectParameter("QueryID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetActiveEntryTest_Result>("GetActiveEntryTest", queryIDParameter);
        }
    
        public virtual ObjectResult<GetActiveSessionAndTest_Result> GetActiveSessionAndTest()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetActiveSessionAndTest_Result>("GetActiveSessionAndTest");
        }
    
        public virtual ObjectResult<GetAdminStudentAttendanceSummary_Result> GetAdminStudentAttendanceSummary(Nullable<int> batchProgramID, Nullable<int> batchID, Nullable<int> yearSemesterNo)
        {
            var batchProgramIDParameter = batchProgramID.HasValue ?
                new ObjectParameter("BatchProgramID", batchProgramID) :
                new ObjectParameter("BatchProgramID", typeof(int));
    
            var batchIDParameter = batchID.HasValue ?
                new ObjectParameter("BatchID", batchID) :
                new ObjectParameter("BatchID", typeof(int));
    
            var yearSemesterNoParameter = yearSemesterNo.HasValue ?
                new ObjectParameter("YearSemesterNo", yearSemesterNo) :
                new ObjectParameter("YearSemesterNo", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetAdminStudentAttendanceSummary_Result>("GetAdminStudentAttendanceSummary", batchProgramIDParameter, batchIDParameter, yearSemesterNoParameter);
        }
    
        public virtual ObjectResult<GetAdminStudentListByCourseID_Result> GetAdminStudentListByCourseID(Nullable<int> courseID, Nullable<int> studentID)
        {
            var courseIDParameter = courseID.HasValue ?
                new ObjectParameter("CourseID", courseID) :
                new ObjectParameter("CourseID", typeof(int));
    
            var studentIDParameter = studentID.HasValue ?
                new ObjectParameter("StudentID", studentID) :
                new ObjectParameter("StudentID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetAdminStudentListByCourseID_Result>("GetAdminStudentListByCourseID", courseIDParameter, studentIDParameter);
        }
    
        public virtual ObjectResult<GetAdmissionDashbordTemplates_Result> GetAdmissionDashbordTemplates(Nullable<int> emp_ID)
        {
            var emp_IDParameter = emp_ID.HasValue ?
                new ObjectParameter("Emp_ID", emp_ID) :
                new ObjectParameter("Emp_ID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetAdmissionDashbordTemplates_Result>("GetAdmissionDashbordTemplates", emp_IDParameter);
        }
    
        public virtual ObjectResult<GetAllChallans_Result> GetAllChallans(Nullable<int> batchProgramID, string formNo, Nullable<int> yearSemesterNo, string challanType)
        {
            var batchProgramIDParameter = batchProgramID.HasValue ?
                new ObjectParameter("BatchProgramID", batchProgramID) :
                new ObjectParameter("BatchProgramID", typeof(int));
    
            var formNoParameter = formNo != null ?
                new ObjectParameter("FormNo", formNo) :
                new ObjectParameter("FormNo", typeof(string));
    
            var yearSemesterNoParameter = yearSemesterNo.HasValue ?
                new ObjectParameter("YearSemesterNo", yearSemesterNo) :
                new ObjectParameter("YearSemesterNo", typeof(int));
    
            var challanTypeParameter = challanType != null ?
                new ObjectParameter("ChallanType", challanType) :
                new ObjectParameter("ChallanType", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetAllChallans_Result>("GetAllChallans", batchProgramIDParameter, formNoParameter, yearSemesterNoParameter, challanTypeParameter);
        }
    
        public virtual ObjectResult<GetAllOBE_CourseCLO_Result> GetAllOBE_CourseCLO(Nullable<int> courseID, string cLOCode, string cLOName, string isActive)
        {
            var courseIDParameter = courseID.HasValue ?
                new ObjectParameter("CourseID", courseID) :
                new ObjectParameter("CourseID", typeof(int));
    
            var cLOCodeParameter = cLOCode != null ?
                new ObjectParameter("CLOCode", cLOCode) :
                new ObjectParameter("CLOCode", typeof(string));
    
            var cLONameParameter = cLOName != null ?
                new ObjectParameter("CLOName", cLOName) :
                new ObjectParameter("CLOName", typeof(string));
    
            var isActiveParameter = isActive != null ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetAllOBE_CourseCLO_Result>("GetAllOBE_CourseCLO", courseIDParameter, cLOCodeParameter, cLONameParameter, isActiveParameter);
        }
    
        public virtual ObjectResult<GetAllOBE_ProgramPLO_Result> GetAllOBE_ProgramPLO(Nullable<int> programID, string pLOCode, string pLOName, string isActive)
        {
            var programIDParameter = programID.HasValue ?
                new ObjectParameter("ProgramID", programID) :
                new ObjectParameter("ProgramID", typeof(int));
    
            var pLOCodeParameter = pLOCode != null ?
                new ObjectParameter("PLOCode", pLOCode) :
                new ObjectParameter("PLOCode", typeof(string));
    
            var pLONameParameter = pLOName != null ?
                new ObjectParameter("PLOName", pLOName) :
                new ObjectParameter("PLOName", typeof(string));
    
            var isActiveParameter = isActive != null ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetAllOBE_ProgramPLO_Result>("GetAllOBE_ProgramPLO", programIDParameter, pLOCodeParameter, pLONameParameter, isActiveParameter);
        }
    
        public virtual ObjectResult<GetAllOBE_QuestionAnswer_Result> GetAllOBE_QuestionAnswer(Nullable<int> isCorrectAnswer, string questionName, string isActive)
        {
            var isCorrectAnswerParameter = isCorrectAnswer.HasValue ?
                new ObjectParameter("IsCorrectAnswer", isCorrectAnswer) :
                new ObjectParameter("IsCorrectAnswer", typeof(int));
    
            var questionNameParameter = questionName != null ?
                new ObjectParameter("QuestionName", questionName) :
                new ObjectParameter("QuestionName", typeof(string));
    
            var isActiveParameter = isActive != null ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetAllOBE_QuestionAnswer_Result>("GetAllOBE_QuestionAnswer", isCorrectAnswerParameter, questionNameParameter, isActiveParameter);
        }
    
        public virtual ObjectResult<GetAllOBE_QuestionBank_Result> GetAllOBE_QuestionBank(Nullable<int> questionID, string questionName, string questionTypeName, string levelName, string isActive)
        {
            var questionIDParameter = questionID.HasValue ?
                new ObjectParameter("QuestionID", questionID) :
                new ObjectParameter("QuestionID", typeof(int));
    
            var questionNameParameter = questionName != null ?
                new ObjectParameter("QuestionName", questionName) :
                new ObjectParameter("QuestionName", typeof(string));
    
            var questionTypeNameParameter = questionTypeName != null ?
                new ObjectParameter("QuestionTypeName", questionTypeName) :
                new ObjectParameter("QuestionTypeName", typeof(string));
    
            var levelNameParameter = levelName != null ?
                new ObjectParameter("LevelName", levelName) :
                new ObjectParameter("LevelName", typeof(string));
    
            var isActiveParameter = isActive != null ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetAllOBE_QuestionBank_Result>("GetAllOBE_QuestionBank", questionIDParameter, questionNameParameter, questionTypeNameParameter, levelNameParameter, isActiveParameter);
        }
    
        public virtual ObjectResult<GetAllOBE_Questionnare_Result> GetAllOBE_Questionnare()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetAllOBE_Questionnare_Result>("GetAllOBE_Questionnare");
        }
    
        public virtual ObjectResult<GetAlumni_Result> GetAlumni(string firstName, string lastName, Nullable<int> cityID, Nullable<int> provinceID, Nullable<int> countryID)
        {
            var firstNameParameter = firstName != null ?
                new ObjectParameter("FirstName", firstName) :
                new ObjectParameter("FirstName", typeof(string));
    
            var lastNameParameter = lastName != null ?
                new ObjectParameter("LastName", lastName) :
                new ObjectParameter("LastName", typeof(string));
    
            var cityIDParameter = cityID.HasValue ?
                new ObjectParameter("cityID", cityID) :
                new ObjectParameter("cityID", typeof(int));
    
            var provinceIDParameter = provinceID.HasValue ?
                new ObjectParameter("ProvinceID", provinceID) :
                new ObjectParameter("ProvinceID", typeof(int));
    
            var countryIDParameter = countryID.HasValue ?
                new ObjectParameter("countryID", countryID) :
                new ObjectParameter("countryID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetAlumni_Result>("GetAlumni", firstNameParameter, lastNameParameter, cityIDParameter, provinceIDParameter, countryIDParameter);
        }
    
        public virtual ObjectResult<GetAlumniEducationExpo_Result> GetAlumniEducationExpo()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetAlumniEducationExpo_Result>("GetAlumniEducationExpo");
        }
    
        public virtual ObjectResult<GetAlumniReunionsDinner_Result> GetAlumniReunionsDinner()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetAlumniReunionsDinner_Result>("GetAlumniReunionsDinner");
        }
    
        public virtual ObjectResult<GetAlumniUserBlog_Result> GetAlumniUserBlog()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetAlumniUserBlog_Result>("GetAlumniUserBlog");
        }
    
        public virtual ObjectResult<GetAlumniUserBlogByID_Result> GetAlumniUserBlogByID(Nullable<int> alumniUserBlogID)
        {
            var alumniUserBlogIDParameter = alumniUserBlogID.HasValue ?
                new ObjectParameter("AlumniUserBlogID", alumniUserBlogID) :
                new ObjectParameter("AlumniUserBlogID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetAlumniUserBlogByID_Result>("GetAlumniUserBlogByID", alumniUserBlogIDParameter);
        }
    
        public virtual ObjectResult<GetAlumniUserBlogCommentByBlogID_Result> GetAlumniUserBlogCommentByBlogID(Nullable<int> alumniUserBlogID)
        {
            var alumniUserBlogIDParameter = alumniUserBlogID.HasValue ?
                new ObjectParameter("AlumniUserBlogID", alumniUserBlogID) :
                new ObjectParameter("AlumniUserBlogID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetAlumniUserBlogCommentByBlogID_Result>("GetAlumniUserBlogCommentByBlogID", alumniUserBlogIDParameter);
        }
    
        public virtual ObjectResult<GetAlumniUserEvent_Result> GetAlumniUserEvent()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetAlumniUserEvent_Result>("GetAlumniUserEvent");
        }
    
        public virtual ObjectResult<GetAlumniUserPhoto_Result> GetAlumniUserPhoto()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetAlumniUserPhoto_Result>("GetAlumniUserPhoto");
        }
    
        public virtual ObjectResult<GetApplicant_Result> GetApplicant(string search, Nullable<int> facultyID, Nullable<System.DateTime> startDate, Nullable<System.DateTime> endDate, Nullable<int> batchProgramID, Nullable<int> statusID)
        {
            var searchParameter = search != null ?
                new ObjectParameter("Search", search) :
                new ObjectParameter("Search", typeof(string));
    
            var facultyIDParameter = facultyID.HasValue ?
                new ObjectParameter("FacultyID", facultyID) :
                new ObjectParameter("FacultyID", typeof(int));
    
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("StartDate", startDate) :
                new ObjectParameter("StartDate", typeof(System.DateTime));
    
            var endDateParameter = endDate.HasValue ?
                new ObjectParameter("EndDate", endDate) :
                new ObjectParameter("EndDate", typeof(System.DateTime));
    
            var batchProgramIDParameter = batchProgramID.HasValue ?
                new ObjectParameter("BatchProgramID", batchProgramID) :
                new ObjectParameter("BatchProgramID", typeof(int));
    
            var statusIDParameter = statusID.HasValue ?
                new ObjectParameter("StatusID", statusID) :
                new ObjectParameter("StatusID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetApplicant_Result>("GetApplicant", searchParameter, facultyIDParameter, startDateParameter, endDateParameter, batchProgramIDParameter, statusIDParameter);
        }
    
        public virtual ObjectResult<GetApplicantAppliedPrograms_Result> GetApplicantAppliedPrograms(string formNo)
        {
            var formNoParameter = formNo != null ?
                new ObjectParameter("FormNo", formNo) :
                new ObjectParameter("FormNo", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetApplicantAppliedPrograms_Result>("GetApplicantAppliedPrograms", formNoParameter);
        }
    
        public virtual ObjectResult<GetApplicantDocumentCheckList_Result> GetApplicantDocumentCheckList(string formNo, Nullable<int> queryID)
        {
            var formNoParameter = formNo != null ?
                new ObjectParameter("FormNo", formNo) :
                new ObjectParameter("FormNo", typeof(string));
    
            var queryIDParameter = queryID.HasValue ?
                new ObjectParameter("QueryID", queryID) :
                new ObjectParameter("QueryID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetApplicantDocumentCheckList_Result>("GetApplicantDocumentCheckList", formNoParameter, queryIDParameter);
        }
    
        public virtual ObjectResult<GetApplicantEntryTestInfo_Result> GetApplicantEntryTestInfo(Nullable<int> formNo, Nullable<int> queryID)
        {
            var formNoParameter = formNo.HasValue ?
                new ObjectParameter("FormNo", formNo) :
                new ObjectParameter("FormNo", typeof(int));
    
            var queryIDParameter = queryID.HasValue ?
                new ObjectParameter("QueryID", queryID) :
                new ObjectParameter("QueryID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetApplicantEntryTestInfo_Result>("GetApplicantEntryTestInfo", formNoParameter, queryIDParameter);
        }
    
        public virtual ObjectResult<GetApplicantLevel_Result> GetApplicantLevel(string formNo)
        {
            var formNoParameter = formNo != null ?
                new ObjectParameter("FormNo", formNo) :
                new ObjectParameter("FormNo", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetApplicantLevel_Result>("GetApplicantLevel", formNoParameter);
        }
    
        public virtual ObjectResult<GetApplicantListForAttendance_Result> GetApplicantListForAttendance(Nullable<int> batchID, Nullable<int> batchProgramID, Nullable<int> degreeID, Nullable<int> entryTestID)
        {
            var batchIDParameter = batchID.HasValue ?
                new ObjectParameter("BatchID", batchID) :
                new ObjectParameter("BatchID", typeof(int));
    
            var batchProgramIDParameter = batchProgramID.HasValue ?
                new ObjectParameter("BatchProgramID", batchProgramID) :
                new ObjectParameter("BatchProgramID", typeof(int));
    
            var degreeIDParameter = degreeID.HasValue ?
                new ObjectParameter("DegreeID", degreeID) :
                new ObjectParameter("DegreeID", typeof(int));
    
            var entryTestIDParameter = entryTestID.HasValue ?
                new ObjectParameter("EntryTestID", entryTestID) :
                new ObjectParameter("EntryTestID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetApplicantListForAttendance_Result>("GetApplicantListForAttendance", batchIDParameter, batchProgramIDParameter, degreeIDParameter, entryTestIDParameter);
        }
    
        public virtual ObjectResult<GetApplicantListSearch_Result> GetApplicantListSearch(string search, Nullable<int> batchID, Nullable<System.DateTime> startDate, Nullable<System.DateTime> endDate)
        {
            var searchParameter = search != null ?
                new ObjectParameter("Search", search) :
                new ObjectParameter("Search", typeof(string));
    
            var batchIDParameter = batchID.HasValue ?
                new ObjectParameter("BatchID", batchID) :
                new ObjectParameter("BatchID", typeof(int));
    
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("StartDate", startDate) :
                new ObjectParameter("StartDate", typeof(System.DateTime));
    
            var endDateParameter = endDate.HasValue ?
                new ObjectParameter("EndDate", endDate) :
                new ObjectParameter("EndDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetApplicantListSearch_Result>("GetApplicantListSearch", searchParameter, batchIDParameter, startDateParameter, endDateParameter);
        }
    
        public virtual ObjectResult<GetApplicantListSearch_ToApprove_Result> GetApplicantListSearch_ToApprove(string search, Nullable<int> batchID, Nullable<int> depositTypeID)
        {
            var searchParameter = search != null ?
                new ObjectParameter("Search", search) :
                new ObjectParameter("Search", typeof(string));
    
            var batchIDParameter = batchID.HasValue ?
                new ObjectParameter("BatchID", batchID) :
                new ObjectParameter("BatchID", typeof(int));
    
            var depositTypeIDParameter = depositTypeID.HasValue ?
                new ObjectParameter("DepositTypeID", depositTypeID) :
                new ObjectParameter("DepositTypeID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetApplicantListSearch_ToApprove_Result>("GetApplicantListSearch_ToApprove", searchParameter, batchIDParameter, depositTypeIDParameter);
        }
    
        public virtual ObjectResult<GetApplicantPersonalInfo_Result> GetApplicantPersonalInfo(string formNo)
        {
            var formNoParameter = formNo != null ?
                new ObjectParameter("FormNo", formNo) :
                new ObjectParameter("FormNo", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetApplicantPersonalInfo_Result>("GetApplicantPersonalInfo", formNoParameter);
        }
    
        public virtual ObjectResult<GetApplicantQualifications_Result> GetApplicantQualifications(string formNo, Nullable<int> queryID)
        {
            var formNoParameter = formNo != null ?
                new ObjectParameter("FormNo", formNo) :
                new ObjectParameter("FormNo", typeof(string));
    
            var queryIDParameter = queryID.HasValue ?
                new ObjectParameter("QueryID", queryID) :
                new ObjectParameter("QueryID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetApplicantQualifications_Result>("GetApplicantQualifications", formNoParameter, queryIDParameter);
        }
    
        public virtual ObjectResult<GetApplicantsForEntryTestEmail_Result> GetApplicantsForEntryTestEmail(Nullable<int> batchProgramID, Nullable<int> queryID)
        {
            var batchProgramIDParameter = batchProgramID.HasValue ?
                new ObjectParameter("BatchProgramID", batchProgramID) :
                new ObjectParameter("BatchProgramID", typeof(int));
    
            var queryIDParameter = queryID.HasValue ?
                new ObjectParameter("QueryID", queryID) :
                new ObjectParameter("QueryID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetApplicantsForEntryTestEmail_Result>("GetApplicantsForEntryTestEmail", batchProgramIDParameter, queryIDParameter);
        }
    
        public virtual ObjectResult<GetApplicantStudentChallans_Result> GetApplicantStudentChallans(string formNo, string challanType, string isDeposited, Nullable<int> batchID, Nullable<int> batchProgramID)
        {
            var formNoParameter = formNo != null ?
                new ObjectParameter("FormNo", formNo) :
                new ObjectParameter("FormNo", typeof(string));
    
            var challanTypeParameter = challanType != null ?
                new ObjectParameter("ChallanType", challanType) :
                new ObjectParameter("ChallanType", typeof(string));
    
            var isDepositedParameter = isDeposited != null ?
                new ObjectParameter("IsDeposited", isDeposited) :
                new ObjectParameter("IsDeposited", typeof(string));
    
            var batchIDParameter = batchID.HasValue ?
                new ObjectParameter("BatchID", batchID) :
                new ObjectParameter("BatchID", typeof(int));
    
            var batchProgramIDParameter = batchProgramID.HasValue ?
                new ObjectParameter("BatchProgramID", batchProgramID) :
                new ObjectParameter("BatchProgramID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetApplicantStudentChallans_Result>("GetApplicantStudentChallans", formNoParameter, challanTypeParameter, isDepositedParameter, batchIDParameter, batchProgramIDParameter);
        }
    
        public virtual ObjectResult<GetApplicantStudentChallansSummary_Result> GetApplicantStudentChallansSummary(string formNo, string challanType, Nullable<int> batchID, Nullable<int> batchProgramID)
        {
            var formNoParameter = formNo != null ?
                new ObjectParameter("FormNo", formNo) :
                new ObjectParameter("FormNo", typeof(string));
    
            var challanTypeParameter = challanType != null ?
                new ObjectParameter("ChallanType", challanType) :
                new ObjectParameter("ChallanType", typeof(string));
    
            var batchIDParameter = batchID.HasValue ?
                new ObjectParameter("BatchID", batchID) :
                new ObjectParameter("BatchID", typeof(int));
    
            var batchProgramIDParameter = batchProgramID.HasValue ?
                new ObjectParameter("BatchProgramID", batchProgramID) :
                new ObjectParameter("BatchProgramID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetApplicantStudentChallansSummary_Result>("GetApplicantStudentChallansSummary", formNoParameter, challanTypeParameter, batchIDParameter, batchProgramIDParameter);
        }
    
        public virtual ObjectResult<GetApplicantStudentStatus_Result> GetApplicantStudentStatus(string statusType, Nullable<int> queryID)
        {
            var statusTypeParameter = statusType != null ?
                new ObjectParameter("StatusType", statusType) :
                new ObjectParameter("StatusType", typeof(string));
    
            var queryIDParameter = queryID.HasValue ?
                new ObjectParameter("QueryID", queryID) :
                new ObjectParameter("QueryID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetApplicantStudentStatus_Result>("GetApplicantStudentStatus", statusTypeParameter, queryIDParameter);
        }
    
        public virtual ObjectResult<GetApplicantStudentSummaryForDashboard_Result> GetApplicantStudentSummaryForDashboard(Nullable<int> batchProgramID, Nullable<int> queryID)
        {
            var batchProgramIDParameter = batchProgramID.HasValue ?
                new ObjectParameter("BatchProgramID", batchProgramID) :
                new ObjectParameter("BatchProgramID", typeof(int));
    
            var queryIDParameter = queryID.HasValue ?
                new ObjectParameter("QueryID", queryID) :
                new ObjectParameter("QueryID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetApplicantStudentSummaryForDashboard_Result>("GetApplicantStudentSummaryForDashboard", batchProgramIDParameter, queryIDParameter);
        }
    
        public virtual ObjectResult<GetApplicantSummary_Result> GetApplicantSummary(string search, Nullable<int> facultyID, Nullable<System.DateTime> startDate, Nullable<System.DateTime> endDate, Nullable<int> batchProgramID, Nullable<int> statusID)
        {
            var searchParameter = search != null ?
                new ObjectParameter("Search", search) :
                new ObjectParameter("Search", typeof(string));
    
            var facultyIDParameter = facultyID.HasValue ?
                new ObjectParameter("FacultyID", facultyID) :
                new ObjectParameter("FacultyID", typeof(int));
    
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("StartDate", startDate) :
                new ObjectParameter("StartDate", typeof(System.DateTime));
    
            var endDateParameter = endDate.HasValue ?
                new ObjectParameter("EndDate", endDate) :
                new ObjectParameter("EndDate", typeof(System.DateTime));
    
            var batchProgramIDParameter = batchProgramID.HasValue ?
                new ObjectParameter("BatchProgramID", batchProgramID) :
                new ObjectParameter("BatchProgramID", typeof(int));
    
            var statusIDParameter = statusID.HasValue ?
                new ObjectParameter("StatusID", statusID) :
                new ObjectParameter("StatusID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetApplicantSummary_Result>("GetApplicantSummary", searchParameter, facultyIDParameter, startDateParameter, endDateParameter, batchProgramIDParameter, statusIDParameter);
        }
    
        public virtual ObjectResult<GetApplicantUploadDetails_Result> GetApplicantUploadDetails(string formNo)
        {
            var formNoParameter = formNo != null ?
                new ObjectParameter("FormNo", formNo) :
                new ObjectParameter("FormNo", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetApplicantUploadDetails_Result>("GetApplicantUploadDetails", formNoParameter);
        }
    
        public virtual ObjectResult<GetApplyForPrograms_Result> GetApplyForPrograms(string formNo)
        {
            var formNoParameter = formNo != null ?
                new ObjectParameter("FormNo", formNo) :
                new ObjectParameter("FormNo", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetApplyForPrograms_Result>("GetApplyForPrograms", formNoParameter);
        }
    
        public virtual ObjectResult<GetApplyForPrograms_by_FormNo_Result> GetApplyForPrograms_by_FormNo(string formNo)
        {
            var formNoParameter = formNo != null ?
                new ObjectParameter("FormNo", formNo) :
                new ObjectParameter("FormNo", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetApplyForPrograms_by_FormNo_Result>("GetApplyForPrograms_by_FormNo", formNoParameter);
        }
    
        public virtual ObjectResult<GetAttandanceStudentSummaryForDashboard_Result> GetAttandanceStudentSummaryForDashboard(Nullable<int> queryID)
        {
            var queryIDParameter = queryID.HasValue ?
                new ObjectParameter("QueryID", queryID) :
                new ObjectParameter("QueryID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetAttandanceStudentSummaryForDashboard_Result>("GetAttandanceStudentSummaryForDashboard", queryIDParameter);
        }
    
        public virtual ObjectResult<GetBatchProgramCourses_Result> GetBatchProgramCourses(string search)
        {
            var searchParameter = search != null ?
                new ObjectParameter("Search", search) :
                new ObjectParameter("Search", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetBatchProgramCourses_Result>("GetBatchProgramCourses", searchParameter);
        }
    
        public virtual ObjectResult<GetBatchProgramLevelEntryTest_ForApplicant_Result> GetBatchProgramLevelEntryTest_ForApplicant(Nullable<int> formNo)
        {
            var formNoParameter = formNo.HasValue ?
                new ObjectParameter("FormNo", formNo) :
                new ObjectParameter("FormNo", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetBatchProgramLevelEntryTest_ForApplicant_Result>("GetBatchProgramLevelEntryTest_ForApplicant", formNoParameter);
        }
    
        public virtual ObjectResult<GetBatchProgramNameConcat_Result> GetBatchProgramNameConcat(string formNo, Nullable<int> queryID)
        {
            var formNoParameter = formNo != null ?
                new ObjectParameter("FormNo", formNo) :
                new ObjectParameter("FormNo", typeof(string));
    
            var queryIDParameter = queryID.HasValue ?
                new ObjectParameter("QueryID", queryID) :
                new ObjectParameter("QueryID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetBatchProgramNameConcat_Result>("GetBatchProgramNameConcat", formNoParameter, queryIDParameter);
        }
    
        public virtual ObjectResult<GetBatchPrograms_Result> GetBatchPrograms(string search)
        {
            var searchParameter = search != null ?
                new ObjectParameter("Search", search) :
                new ObjectParameter("Search", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetBatchPrograms_Result>("GetBatchPrograms", searchParameter);
        }
    
        public virtual ObjectResult<GetBatchProgramSemester_Result> GetBatchProgramSemester(string search)
        {
            var searchParameter = search != null ?
                new ObjectParameter("Search", search) :
                new ObjectParameter("Search", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetBatchProgramSemester_Result>("GetBatchProgramSemester", searchParameter);
        }
    
        public virtual ObjectResult<GetBatchProgramWiseAttandanceStudentSummaryForDashboard_Result> GetBatchProgramWiseAttandanceStudentSummaryForDashboard(Nullable<int> batchProgramID, Nullable<int> batchID, Nullable<int> yearSemesterNo, Nullable<int> queryID)
        {
            var batchProgramIDParameter = batchProgramID.HasValue ?
                new ObjectParameter("BatchProgramID", batchProgramID) :
                new ObjectParameter("BatchProgramID", typeof(int));
    
            var batchIDParameter = batchID.HasValue ?
                new ObjectParameter("BatchID", batchID) :
                new ObjectParameter("BatchID", typeof(int));
    
            var yearSemesterNoParameter = yearSemesterNo.HasValue ?
                new ObjectParameter("YearSemesterNo", yearSemesterNo) :
                new ObjectParameter("YearSemesterNo", typeof(int));
    
            var queryIDParameter = queryID.HasValue ?
                new ObjectParameter("QueryID", queryID) :
                new ObjectParameter("QueryID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetBatchProgramWiseAttandanceStudentSummaryForDashboard_Result>("GetBatchProgramWiseAttandanceStudentSummaryForDashboard", batchProgramIDParameter, batchIDParameter, yearSemesterNoParameter, queryIDParameter);
        }
    
        public virtual ObjectResult<GetChallan_Result> GetChallan(Nullable<int> challanID, string type)
        {
            var challanIDParameter = challanID.HasValue ?
                new ObjectParameter("ChallanID", challanID) :
                new ObjectParameter("ChallanID", typeof(int));
    
            var typeParameter = type != null ?
                new ObjectParameter("Type", type) :
                new ObjectParameter("Type", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetChallan_Result>("GetChallan", challanIDParameter, typeParameter);
        }
    
        public virtual ObjectResult<GetChallanService_Result> GetChallanService(Nullable<int> challanID)
        {
            var challanIDParameter = challanID.HasValue ?
                new ObjectParameter("ChallanID", challanID) :
                new ObjectParameter("ChallanID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetChallanService_Result>("GetChallanService", challanIDParameter);
        }
    
        public virtual ObjectResult<GetChatUser_Result> GetChatUser(Nullable<int> requestRole, string searchIN)
        {
            var requestRoleParameter = requestRole.HasValue ?
                new ObjectParameter("RequestRole", requestRole) :
                new ObjectParameter("RequestRole", typeof(int));
    
            var searchINParameter = searchIN != null ?
                new ObjectParameter("SearchIN", searchIN) :
                new ObjectParameter("SearchIN", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetChatUser_Result>("GetChatUser", requestRoleParameter, searchINParameter);
        }
    
        public virtual ObjectResult<GetCities_Result> GetCities(string search)
        {
            var searchParameter = search != null ?
                new ObjectParameter("Search", search) :
                new ObjectParameter("Search", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetCities_Result>("GetCities", searchParameter);
        }
    
        public virtual ObjectResult<Nullable<bool>> GetCourseAppealStatusForStudent(Nullable<int> examID, Nullable<int> studentID, Nullable<int> programCourseID)
        {
            var examIDParameter = examID.HasValue ?
                new ObjectParameter("ExamID", examID) :
                new ObjectParameter("ExamID", typeof(int));
    
            var studentIDParameter = studentID.HasValue ?
                new ObjectParameter("StudentID", studentID) :
                new ObjectParameter("StudentID", typeof(int));
    
            var programCourseIDParameter = programCourseID.HasValue ?
                new ObjectParameter("ProgramCourseID", programCourseID) :
                new ObjectParameter("ProgramCourseID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<bool>>("GetCourseAppealStatusForStudent", examIDParameter, studentIDParameter, programCourseIDParameter);
        }
    
        public virtual ObjectResult<GetCouserStudents_By_CourseID_Result> GetCouserStudents_By_CourseID(Nullable<int> programCourseID, Nullable<int> courseID)
        {
            var programCourseIDParameter = programCourseID.HasValue ?
                new ObjectParameter("ProgramCourseID", programCourseID) :
                new ObjectParameter("ProgramCourseID", typeof(int));
    
            var courseIDParameter = courseID.HasValue ?
                new ObjectParameter("CourseID", courseID) :
                new ObjectParameter("CourseID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetCouserStudents_By_CourseID_Result>("GetCouserStudents_By_CourseID", programCourseIDParameter, courseIDParameter);
        }
    
        public virtual ObjectResult<GetDegrees_Result> GetDegrees(Nullable<int> queryID)
        {
            var queryIDParameter = queryID.HasValue ?
                new ObjectParameter("QueryID", queryID) :
                new ObjectParameter("QueryID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetDegrees_Result>("GetDegrees", queryIDParameter);
        }
    
        public virtual ObjectResult<GetDegreesList_Result> GetDegreesList(Nullable<int> queryID)
        {
            var queryIDParameter = queryID.HasValue ?
                new ObjectParameter("QueryID", queryID) :
                new ObjectParameter("QueryID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetDegreesList_Result>("GetDegreesList", queryIDParameter);
        }
    
        public virtual ObjectResult<GetDegreeTitles_Result> GetDegreeTitles(Nullable<int> degreeID)
        {
            var degreeIDParameter = degreeID.HasValue ?
                new ObjectParameter("DegreeID", degreeID) :
                new ObjectParameter("DegreeID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetDegreeTitles_Result>("GetDegreeTitles", degreeIDParameter);
        }
    
        public virtual ObjectResult<GetDepartments_by_HospitalID_Result> GetDepartments_by_HospitalID(Nullable<int> hospital_ID)
        {
            var hospital_IDParameter = hospital_ID.HasValue ?
                new ObjectParameter("Hospital_ID", hospital_ID) :
                new ObjectParameter("Hospital_ID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetDepartments_by_HospitalID_Result>("GetDepartments_by_HospitalID", hospital_IDParameter);
        }
    
        public virtual ObjectResult<GetDisplayValues_Result> GetDisplayValues(Nullable<int> queryID, Nullable<int> iD)
        {
            var queryIDParameter = queryID.HasValue ?
                new ObjectParameter("QueryID", queryID) :
                new ObjectParameter("QueryID", typeof(int));
    
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetDisplayValues_Result>("GetDisplayValues", queryIDParameter, iDParameter);
        }
    
        public virtual ObjectResult<GetEmployeeOrApplicant_UserManagementDB_Result> GetEmployeeOrApplicant_UserManagementDB(Nullable<int> empID)
        {
            var empIDParameter = empID.HasValue ?
                new ObjectParameter("EmpID", empID) :
                new ObjectParameter("EmpID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetEmployeeOrApplicant_UserManagementDB_Result>("GetEmployeeOrApplicant_UserManagementDB", empIDParameter);
        }
    
        public virtual ObjectResult<GetEmployeePagesForRight_Result> GetEmployeePagesForRight(Nullable<int> emp_ID)
        {
            var emp_IDParameter = emp_ID.HasValue ?
                new ObjectParameter("Emp_ID", emp_ID) :
                new ObjectParameter("Emp_ID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetEmployeePagesForRight_Result>("GetEmployeePagesForRight", emp_IDParameter);
        }
    
        public virtual ObjectResult<GetEnrolledStudent_Result> GetEnrolledStudent(string formNo, string type)
        {
            var formNoParameter = formNo != null ?
                new ObjectParameter("FormNo", formNo) :
                new ObjectParameter("FormNo", typeof(string));
    
            var typeParameter = type != null ?
                new ObjectParameter("Type", type) :
                new ObjectParameter("Type", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetEnrolledStudent_Result>("GetEnrolledStudent", formNoParameter, typeParameter);
        }
    
        public virtual ObjectResult<GetEntranceTests_Result> GetEntranceTests(string formNo)
        {
            var formNoParameter = formNo != null ?
                new ObjectParameter("FormNo", formNo) :
                new ObjectParameter("FormNo", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetEntranceTests_Result>("GetEntranceTests", formNoParameter);
        }
    
        public virtual ObjectResult<GetExam_Result> GetExam()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetExam_Result>("GetExam");
        }
    
        public virtual ObjectResult<GetExamAdminStudentForGardeForm_Result> GetExamAdminStudentForGardeForm(Nullable<int> examID)
        {
            var examIDParameter = examID.HasValue ?
                new ObjectParameter("ExamID", examID) :
                new ObjectParameter("ExamID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetExamAdminStudentForGardeForm_Result>("GetExamAdminStudentForGardeForm", examIDParameter);
        }
    
        public virtual ObjectResult<GetExamAwardListResultForDisplay_Result> GetExamAwardListResultForDisplay(Nullable<int> examID, Nullable<int> programCourseID, Nullable<int> studentID)
        {
            var examIDParameter = examID.HasValue ?
                new ObjectParameter("ExamID", examID) :
                new ObjectParameter("ExamID", typeof(int));
    
            var programCourseIDParameter = programCourseID.HasValue ?
                new ObjectParameter("ProgramCourseID", programCourseID) :
                new ObjectParameter("ProgramCourseID", typeof(int));
    
            var studentIDParameter = studentID.HasValue ?
                new ObjectParameter("StudentID", studentID) :
                new ObjectParameter("StudentID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetExamAwardListResultForDisplay_Result>("GetExamAwardListResultForDisplay", examIDParameter, programCourseIDParameter, studentIDParameter);
        }
    
        public virtual ObjectResult<GetExamDateByExamID_Result> GetExamDateByExamID(Nullable<int> examID)
        {
            var examIDParameter = examID.HasValue ?
                new ObjectParameter("ExamID", examID) :
                new ObjectParameter("ExamID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetExamDateByExamID_Result>("GetExamDateByExamID", examIDParameter);
        }
    
        public virtual ObjectResult<GetExamDateSheetActiveCourses_Result> GetExamDateSheetActiveCourses()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetExamDateSheetActiveCourses_Result>("GetExamDateSheetActiveCourses");
        }
    
        public virtual ObjectResult<GetExamDateSheetCoursesByIDs_Result> GetExamDateSheetCoursesByIDs(Nullable<int> examDateID, Nullable<int> examDateTimeSlotID)
        {
            var examDateIDParameter = examDateID.HasValue ?
                new ObjectParameter("ExamDateID", examDateID) :
                new ObjectParameter("ExamDateID", typeof(int));
    
            var examDateTimeSlotIDParameter = examDateTimeSlotID.HasValue ?
                new ObjectParameter("ExamDateTimeSlotID", examDateTimeSlotID) :
                new ObjectParameter("ExamDateTimeSlotID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetExamDateSheetCoursesByIDs_Result>("GetExamDateSheetCoursesByIDs", examDateIDParameter, examDateTimeSlotIDParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> GetExamDatesheetSemister(Nullable<int> examID)
        {
            var examIDParameter = examID.HasValue ?
                new ObjectParameter("ExamID", examID) :
                new ObjectParameter("ExamID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("GetExamDatesheetSemister", examIDParameter);
        }
    
        public virtual ObjectResult<GetExamDatesheetSubjects_Result> GetExamDatesheetSubjects(Nullable<int> batchProgramID, Nullable<int> yearSemesterNo)
        {
            var batchProgramIDParameter = batchProgramID.HasValue ?
                new ObjectParameter("BatchProgramID", batchProgramID) :
                new ObjectParameter("BatchProgramID", typeof(int));
    
            var yearSemesterNoParameter = yearSemesterNo.HasValue ?
                new ObjectParameter("YearSemesterNo", yearSemesterNo) :
                new ObjectParameter("YearSemesterNo", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetExamDatesheetSubjects_Result>("GetExamDatesheetSubjects", batchProgramIDParameter, yearSemesterNoParameter);
        }
    
        public virtual ObjectResult<GetExamDateTimeSlot_By_ExamIDExamDateID_Result> GetExamDateTimeSlot_By_ExamIDExamDateID(Nullable<int> examID)
        {
            var examIDParameter = examID.HasValue ?
                new ObjectParameter("ExamID", examID) :
                new ObjectParameter("ExamID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetExamDateTimeSlot_By_ExamIDExamDateID_Result>("GetExamDateTimeSlot_By_ExamIDExamDateID", examIDParameter);
        }
    
        public virtual ObjectResult<GetExamDateTimeSlotByExamID_Result> GetExamDateTimeSlotByExamID(Nullable<int> examID)
        {
            var examIDParameter = examID.HasValue ?
                new ObjectParameter("ExamID", examID) :
                new ObjectParameter("ExamID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetExamDateTimeSlotByExamID_Result>("GetExamDateTimeSlotByExamID", examIDParameter);
        }
    
        public virtual ObjectResult<GetExamDispatchDetails_Result> GetExamDispatchDetails(Nullable<int> examID, Nullable<int> examDateID, Nullable<int> examDateTimeSlotID)
        {
            var examIDParameter = examID.HasValue ?
                new ObjectParameter("ExamID", examID) :
                new ObjectParameter("ExamID", typeof(int));
    
            var examDateIDParameter = examDateID.HasValue ?
                new ObjectParameter("ExamDateID", examDateID) :
                new ObjectParameter("ExamDateID", typeof(int));
    
            var examDateTimeSlotIDParameter = examDateTimeSlotID.HasValue ?
                new ObjectParameter("ExamDateTimeSlotID", examDateTimeSlotID) :
                new ObjectParameter("ExamDateTimeSlotID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetExamDispatchDetails_Result>("GetExamDispatchDetails", examIDParameter, examDateIDParameter, examDateTimeSlotIDParameter);
        }
    
        public virtual ObjectResult<GetExamDutyRosterAttandanceForAdmin_Result> GetExamDutyRosterAttandanceForAdmin(Nullable<int> examID, Nullable<int> examDateID, Nullable<int> examDateTimeSlotID, Nullable<int> batchID, Nullable<int> batchProgramID, Nullable<int> yearSemesterNo, Nullable<int> programCourseID, Nullable<int> roomID)
        {
            var examIDParameter = examID.HasValue ?
                new ObjectParameter("ExamID", examID) :
                new ObjectParameter("ExamID", typeof(int));
    
            var examDateIDParameter = examDateID.HasValue ?
                new ObjectParameter("ExamDateID", examDateID) :
                new ObjectParameter("ExamDateID", typeof(int));
    
            var examDateTimeSlotIDParameter = examDateTimeSlotID.HasValue ?
                new ObjectParameter("ExamDateTimeSlotID", examDateTimeSlotID) :
                new ObjectParameter("ExamDateTimeSlotID", typeof(int));
    
            var batchIDParameter = batchID.HasValue ?
                new ObjectParameter("BatchID", batchID) :
                new ObjectParameter("BatchID", typeof(int));
    
            var batchProgramIDParameter = batchProgramID.HasValue ?
                new ObjectParameter("BatchProgramID", batchProgramID) :
                new ObjectParameter("BatchProgramID", typeof(int));
    
            var yearSemesterNoParameter = yearSemesterNo.HasValue ?
                new ObjectParameter("YearSemesterNo", yearSemesterNo) :
                new ObjectParameter("YearSemesterNo", typeof(int));
    
            var programCourseIDParameter = programCourseID.HasValue ?
                new ObjectParameter("ProgramCourseID", programCourseID) :
                new ObjectParameter("ProgramCourseID", typeof(int));
    
            var roomIDParameter = roomID.HasValue ?
                new ObjectParameter("RoomID", roomID) :
                new ObjectParameter("RoomID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetExamDutyRosterAttandanceForAdmin_Result>("GetExamDutyRosterAttandanceForAdmin", examIDParameter, examDateIDParameter, examDateTimeSlotIDParameter, batchIDParameter, batchProgramIDParameter, yearSemesterNoParameter, programCourseIDParameter, roomIDParameter);
        }
    
        public virtual ObjectResult<GetExamEligibleStudentByCourseID_Result> GetExamEligibleStudentByCourseID(Nullable<int> programCourseID)
        {
            var programCourseIDParameter = programCourseID.HasValue ?
                new ObjectParameter("ProgramCourseID", programCourseID) :
                new ObjectParameter("ProgramCourseID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetExamEligibleStudentByCourseID_Result>("GetExamEligibleStudentByCourseID", programCourseIDParameter);
        }
    
        public virtual ObjectResult<GetExamEligibleStudentForExamByCourseID_Result> GetExamEligibleStudentForExamByCourseID(Nullable<int> examID, Nullable<int> programCourseID)
        {
            var examIDParameter = examID.HasValue ?
                new ObjectParameter("ExamID", examID) :
                new ObjectParameter("ExamID", typeof(int));
    
            var programCourseIDParameter = programCourseID.HasValue ?
                new ObjectParameter("ProgramCourseID", programCourseID) :
                new ObjectParameter("ProgramCourseID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetExamEligibleStudentForExamByCourseID_Result>("GetExamEligibleStudentForExamByCourseID", examIDParameter, programCourseIDParameter);
        }
    
        public virtual ObjectResult<GetExamEligibleStudentForRoomAssignment_Result> GetExamEligibleStudentForRoomAssignment(Nullable<int> examID, Nullable<int> examDateID, Nullable<int> examDateTimeSlotID)
        {
            var examIDParameter = examID.HasValue ?
                new ObjectParameter("ExamID", examID) :
                new ObjectParameter("ExamID", typeof(int));
    
            var examDateIDParameter = examDateID.HasValue ?
                new ObjectParameter("ExamDateID", examDateID) :
                new ObjectParameter("ExamDateID", typeof(int));
    
            var examDateTimeSlotIDParameter = examDateTimeSlotID.HasValue ?
                new ObjectParameter("ExamDateTimeSlotID", examDateTimeSlotID) :
                new ObjectParameter("ExamDateTimeSlotID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetExamEligibleStudentForRoomAssignment_Result>("GetExamEligibleStudentForRoomAssignment", examIDParameter, examDateIDParameter, examDateTimeSlotIDParameter);
        }
    
        public virtual ObjectResult<GetExamEligibleStudentsForAdmin_Result> GetExamEligibleStudentsForAdmin(Nullable<int> examID, Nullable<int> batchID, Nullable<int> batchProgramID, Nullable<int> yearSemesterNo, Nullable<int> programCourseID)
        {
            var examIDParameter = examID.HasValue ?
                new ObjectParameter("ExamID", examID) :
                new ObjectParameter("ExamID", typeof(int));
    
            var batchIDParameter = batchID.HasValue ?
                new ObjectParameter("BatchID", batchID) :
                new ObjectParameter("BatchID", typeof(int));
    
            var batchProgramIDParameter = batchProgramID.HasValue ?
                new ObjectParameter("BatchProgramID", batchProgramID) :
                new ObjectParameter("BatchProgramID", typeof(int));
    
            var yearSemesterNoParameter = yearSemesterNo.HasValue ?
                new ObjectParameter("YearSemesterNo", yearSemesterNo) :
                new ObjectParameter("YearSemesterNo", typeof(int));
    
            var programCourseIDParameter = programCourseID.HasValue ?
                new ObjectParameter("ProgramCourseID", programCourseID) :
                new ObjectParameter("ProgramCourseID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetExamEligibleStudentsForAdmin_Result>("GetExamEligibleStudentsForAdmin", examIDParameter, batchIDParameter, batchProgramIDParameter, yearSemesterNoParameter, programCourseIDParameter);
        }
    
        public virtual ObjectResult<GetExamGardeFormDeatilByStudentID_Result> GetExamGardeFormDeatilByStudentID(Nullable<int> examID, Nullable<int> programCourseID, Nullable<int> studentID)
        {
            var examIDParameter = examID.HasValue ?
                new ObjectParameter("ExamID", examID) :
                new ObjectParameter("ExamID", typeof(int));
    
            var programCourseIDParameter = programCourseID.HasValue ?
                new ObjectParameter("ProgramCourseID", programCourseID) :
                new ObjectParameter("ProgramCourseID", typeof(int));
    
            var studentIDParameter = studentID.HasValue ?
                new ObjectParameter("StudentID", studentID) :
                new ObjectParameter("StudentID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetExamGardeFormDeatilByStudentID_Result>("GetExamGardeFormDeatilByStudentID", examIDParameter, programCourseIDParameter, studentIDParameter);
        }
    
        public virtual ObjectResult<GetExamGradeAppealFormForStudent_Result> GetExamGradeAppealFormForStudent(Nullable<int> examID, Nullable<int> studentID)
        {
            var examIDParameter = examID.HasValue ?
                new ObjectParameter("ExamID", examID) :
                new ObjectParameter("ExamID", typeof(int));
    
            var studentIDParameter = studentID.HasValue ?
                new ObjectParameter("StudentID", studentID) :
                new ObjectParameter("StudentID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetExamGradeAppealFormForStudent_Result>("GetExamGradeAppealFormForStudent", examIDParameter, studentIDParameter);
        }
    
        public virtual ObjectResult<GetExamGradeAppealFormStudentListForAdmin_Result> GetExamGradeAppealFormStudentListForAdmin(Nullable<int> examID)
        {
            var examIDParameter = examID.HasValue ?
                new ObjectParameter("ExamID", examID) :
                new ObjectParameter("ExamID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetExamGradeAppealFormStudentListForAdmin_Result>("GetExamGradeAppealFormStudentListForAdmin", examIDParameter);
        }
    
        public virtual ObjectResult<GetExamGradeAppealStudentCourses_Result> GetExamGradeAppealStudentCourses(Nullable<int> examID, Nullable<int> studentID, string programCourseIDStr)
        {
            var examIDParameter = examID.HasValue ?
                new ObjectParameter("ExamID", examID) :
                new ObjectParameter("ExamID", typeof(int));
    
            var studentIDParameter = studentID.HasValue ?
                new ObjectParameter("StudentID", studentID) :
                new ObjectParameter("StudentID", typeof(int));
    
            var programCourseIDStrParameter = programCourseIDStr != null ?
                new ObjectParameter("ProgramCourseIDStr", programCourseIDStr) :
                new ObjectParameter("ProgramCourseIDStr", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetExamGradeAppealStudentCourses_Result>("GetExamGradeAppealStudentCourses", examIDParameter, studentIDParameter, programCourseIDStrParameter);
        }
    
        public virtual ObjectResult<GetExamResultForDisplay_Result> GetExamResultForDisplay(Nullable<int> examID, Nullable<int> programCourseID, Nullable<int> studentID)
        {
            var examIDParameter = examID.HasValue ?
                new ObjectParameter("ExamID", examID) :
                new ObjectParameter("ExamID", typeof(int));
    
            var programCourseIDParameter = programCourseID.HasValue ?
                new ObjectParameter("ProgramCourseID", programCourseID) :
                new ObjectParameter("ProgramCourseID", typeof(int));
    
            var studentIDParameter = studentID.HasValue ?
                new ObjectParameter("StudentID", studentID) :
                new ObjectParameter("StudentID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetExamResultForDisplay_Result>("GetExamResultForDisplay", examIDParameter, programCourseIDParameter, studentIDParameter);
        }
    
        public virtual ObjectResult<GetExamResultsLookupData_Result> GetExamResultsLookupData(Nullable<int> teacherID, Nullable<int> batchID, Nullable<int> batchProgramID, Nullable<int> yearSemesterNo, Nullable<int> queryID)
        {
            var teacherIDParameter = teacherID.HasValue ?
                new ObjectParameter("TeacherID", teacherID) :
                new ObjectParameter("TeacherID", typeof(int));
    
            var batchIDParameter = batchID.HasValue ?
                new ObjectParameter("BatchID", batchID) :
                new ObjectParameter("BatchID", typeof(int));
    
            var batchProgramIDParameter = batchProgramID.HasValue ?
                new ObjectParameter("BatchProgramID", batchProgramID) :
                new ObjectParameter("BatchProgramID", typeof(int));
    
            var yearSemesterNoParameter = yearSemesterNo.HasValue ?
                new ObjectParameter("YearSemesterNo", yearSemesterNo) :
                new ObjectParameter("YearSemesterNo", typeof(int));
    
            var queryIDParameter = queryID.HasValue ?
                new ObjectParameter("QueryID", queryID) :
                new ObjectParameter("QueryID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetExamResultsLookupData_Result>("GetExamResultsLookupData", teacherIDParameter, batchIDParameter, batchProgramIDParameter, yearSemesterNoParameter, queryIDParameter);
        }
    
        public virtual ObjectResult<GetExamRoomsForRoomAssignment_Result> GetExamRoomsForRoomAssignment(Nullable<int> examID, Nullable<int> examDateID, Nullable<int> examDateTimeSlotID)
        {
            var examIDParameter = examID.HasValue ?
                new ObjectParameter("ExamID", examID) :
                new ObjectParameter("ExamID", typeof(int));
    
            var examDateIDParameter = examDateID.HasValue ?
                new ObjectParameter("ExamDateID", examDateID) :
                new ObjectParameter("ExamDateID", typeof(int));
    
            var examDateTimeSlotIDParameter = examDateTimeSlotID.HasValue ?
                new ObjectParameter("ExamDateTimeSlotID", examDateTimeSlotID) :
                new ObjectParameter("ExamDateTimeSlotID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetExamRoomsForRoomAssignment_Result>("GetExamRoomsForRoomAssignment", examIDParameter, examDateIDParameter, examDateTimeSlotIDParameter);
        }
    
        public virtual ObjectResult<GetExamRosterDetailsAgainstTeacher_Result> GetExamRosterDetailsAgainstTeacher(Nullable<int> examID, Nullable<int> teacherUserID)
        {
            var examIDParameter = examID.HasValue ?
                new ObjectParameter("ExamID", examID) :
                new ObjectParameter("ExamID", typeof(int));
    
            var teacherUserIDParameter = teacherUserID.HasValue ?
                new ObjectParameter("TeacherUserID", teacherUserID) :
                new ObjectParameter("TeacherUserID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetExamRosterDetailsAgainstTeacher_Result>("GetExamRosterDetailsAgainstTeacher", examIDParameter, teacherUserIDParameter);
        }
    
        public virtual ObjectResult<GetExamRosterDispatchList_Result> GetExamRosterDispatchList(Nullable<int> examsDateSheetDetailID, Nullable<int> roomID)
        {
            var examsDateSheetDetailIDParameter = examsDateSheetDetailID.HasValue ?
                new ObjectParameter("ExamsDateSheetDetailID", examsDateSheetDetailID) :
                new ObjectParameter("ExamsDateSheetDetailID", typeof(int));
    
            var roomIDParameter = roomID.HasValue ?
                new ObjectParameter("RoomID", roomID) :
                new ObjectParameter("RoomID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetExamRosterDispatchList_Result>("GetExamRosterDispatchList", examsDateSheetDetailIDParameter, roomIDParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> GetExamStudentAdmitCard(Nullable<int> examID)
        {
            var examIDParameter = examID.HasValue ?
                new ObjectParameter("ExamID", examID) :
                new ObjectParameter("ExamID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("GetExamStudentAdmitCard", examIDParameter);
        }
    
        public virtual ObjectResult<GetExamStudentAdmitCardDetails_Result> GetExamStudentAdmitCardDetails(Nullable<int> examID, Nullable<int> studentID)
        {
            var examIDParameter = examID.HasValue ?
                new ObjectParameter("ExamID", examID) :
                new ObjectParameter("ExamID", typeof(int));
    
            var studentIDParameter = studentID.HasValue ?
                new ObjectParameter("StudentID", studentID) :
                new ObjectParameter("StudentID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetExamStudentAdmitCardDetails_Result>("GetExamStudentAdmitCardDetails", examIDParameter, studentIDParameter);
        }
    
        public virtual ObjectResult<GetExamStudentAttandanceForAdmin_Result> GetExamStudentAttandanceForAdmin(Nullable<int> examID, Nullable<int> examDateID, Nullable<int> examDateTimeSlotID, Nullable<int> batchID, Nullable<int> batchProgramID, Nullable<int> yearSemesterNo, Nullable<int> programCourseID)
        {
            var examIDParameter = examID.HasValue ?
                new ObjectParameter("ExamID", examID) :
                new ObjectParameter("ExamID", typeof(int));
    
            var examDateIDParameter = examDateID.HasValue ?
                new ObjectParameter("ExamDateID", examDateID) :
                new ObjectParameter("ExamDateID", typeof(int));
    
            var examDateTimeSlotIDParameter = examDateTimeSlotID.HasValue ?
                new ObjectParameter("ExamDateTimeSlotID", examDateTimeSlotID) :
                new ObjectParameter("ExamDateTimeSlotID", typeof(int));
    
            var batchIDParameter = batchID.HasValue ?
                new ObjectParameter("BatchID", batchID) :
                new ObjectParameter("BatchID", typeof(int));
    
            var batchProgramIDParameter = batchProgramID.HasValue ?
                new ObjectParameter("BatchProgramID", batchProgramID) :
                new ObjectParameter("BatchProgramID", typeof(int));
    
            var yearSemesterNoParameter = yearSemesterNo.HasValue ?
                new ObjectParameter("YearSemesterNo", yearSemesterNo) :
                new ObjectParameter("YearSemesterNo", typeof(int));
    
            var programCourseIDParameter = programCourseID.HasValue ?
                new ObjectParameter("ProgramCourseID", programCourseID) :
                new ObjectParameter("ProgramCourseID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetExamStudentAttandanceForAdmin_Result>("GetExamStudentAttandanceForAdmin", examIDParameter, examDateIDParameter, examDateTimeSlotIDParameter, batchIDParameter, batchProgramIDParameter, yearSemesterNoParameter, programCourseIDParameter);
        }
    
        public virtual ObjectResult<GetExamStudentSubjectForGradeAppealRequest_Result> GetExamStudentSubjectForGradeAppealRequest(Nullable<int> examID, Nullable<int> studentID)
        {
            var examIDParameter = examID.HasValue ?
                new ObjectParameter("ExamID", examID) :
                new ObjectParameter("ExamID", typeof(int));
    
            var studentIDParameter = studentID.HasValue ?
                new ObjectParameter("StudentID", studentID) :
                new ObjectParameter("StudentID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetExamStudentSubjectForGradeAppealRequest_Result>("GetExamStudentSubjectForGradeAppealRequest", examIDParameter, studentIDParameter);
        }
    
        public virtual ObjectResult<GetExamStudentSubjectForGradeRequest_Result> GetExamStudentSubjectForGradeRequest(Nullable<int> examID, Nullable<int> studentID)
        {
            var examIDParameter = examID.HasValue ?
                new ObjectParameter("ExamID", examID) :
                new ObjectParameter("ExamID", typeof(int));
    
            var studentIDParameter = studentID.HasValue ?
                new ObjectParameter("StudentID", studentID) :
                new ObjectParameter("StudentID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetExamStudentSubjectForGradeRequest_Result>("GetExamStudentSubjectForGradeRequest", examIDParameter, studentIDParameter);
        }
    
        public virtual ObjectResult<GetExamStudentSubjectMarkByID_Result> GetExamStudentSubjectMarkByID(Nullable<int> examID, Nullable<int> programCourseID, Nullable<int> studentID)
        {
            var examIDParameter = examID.HasValue ?
                new ObjectParameter("ExamID", examID) :
                new ObjectParameter("ExamID", typeof(int));
    
            var programCourseIDParameter = programCourseID.HasValue ?
                new ObjectParameter("ProgramCourseID", programCourseID) :
                new ObjectParameter("ProgramCourseID", typeof(int));
    
            var studentIDParameter = studentID.HasValue ?
                new ObjectParameter("StudentID", studentID) :
                new ObjectParameter("StudentID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetExamStudentSubjectMarkByID_Result>("GetExamStudentSubjectMarkByID", examIDParameter, programCourseIDParameter, studentIDParameter);
        }
    
        public virtual ObjectResult<GetExamStudentSubjectMarkDetailByID_Result> GetExamStudentSubjectMarkDetailByID(Nullable<int> examStudentSubjectMarkID, Nullable<int> examID, Nullable<int> programCourseID, Nullable<int> studentID)
        {
            var examStudentSubjectMarkIDParameter = examStudentSubjectMarkID.HasValue ?
                new ObjectParameter("ExamStudentSubjectMarkID", examStudentSubjectMarkID) :
                new ObjectParameter("ExamStudentSubjectMarkID", typeof(int));
    
            var examIDParameter = examID.HasValue ?
                new ObjectParameter("ExamID", examID) :
                new ObjectParameter("ExamID", typeof(int));
    
            var programCourseIDParameter = programCourseID.HasValue ?
                new ObjectParameter("ProgramCourseID", programCourseID) :
                new ObjectParameter("ProgramCourseID", typeof(int));
    
            var studentIDParameter = studentID.HasValue ?
                new ObjectParameter("StudentID", studentID) :
                new ObjectParameter("StudentID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetExamStudentSubjectMarkDetailByID_Result>("GetExamStudentSubjectMarkDetailByID", examStudentSubjectMarkIDParameter, examIDParameter, programCourseIDParameter, studentIDParameter);
        }
    
        public virtual ObjectResult<GetExamStudentSubjectsForResult_Result> GetExamStudentSubjectsForResult(Nullable<int> examID, Nullable<int> studentID)
        {
            var examIDParameter = examID.HasValue ?
                new ObjectParameter("ExamID", examID) :
                new ObjectParameter("ExamID", typeof(int));
    
            var studentIDParameter = studentID.HasValue ?
                new ObjectParameter("StudentID", studentID) :
                new ObjectParameter("StudentID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetExamStudentSubjectsForResult_Result>("GetExamStudentSubjectsForResult", examIDParameter, studentIDParameter);
        }
    
        public virtual ObjectResult<GetExamSubjectForEligibleStudent_Result> GetExamSubjectForEligibleStudent(Nullable<int> examID, Nullable<int> batchProgramID, Nullable<int> batchID, Nullable<int> yearSemesterNo)
        {
            var examIDParameter = examID.HasValue ?
                new ObjectParameter("ExamID", examID) :
                new ObjectParameter("ExamID", typeof(int));
    
            var batchProgramIDParameter = batchProgramID.HasValue ?
                new ObjectParameter("BatchProgramID", batchProgramID) :
                new ObjectParameter("BatchProgramID", typeof(int));
    
            var batchIDParameter = batchID.HasValue ?
                new ObjectParameter("BatchID", batchID) :
                new ObjectParameter("BatchID", typeof(int));
    
            var yearSemesterNoParameter = yearSemesterNo.HasValue ?
                new ObjectParameter("YearSemesterNo", yearSemesterNo) :
                new ObjectParameter("YearSemesterNo", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetExamSubjectForEligibleStudent_Result>("GetExamSubjectForEligibleStudent", examIDParameter, batchProgramIDParameter, batchIDParameter, yearSemesterNoParameter);
        }
    
        public virtual ObjectResult<GetExamSubjectForRosterDispatch_Result> GetExamSubjectForRosterDispatch(Nullable<int> examsDateSheetDetailID)
        {
            var examsDateSheetDetailIDParameter = examsDateSheetDetailID.HasValue ?
                new ObjectParameter("ExamsDateSheetDetailID", examsDateSheetDetailID) :
                new ObjectParameter("ExamsDateSheetDetailID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetExamSubjectForRosterDispatch_Result>("GetExamSubjectForRosterDispatch", examsDateSheetDetailIDParameter);
        }
    
        public virtual ObjectResult<GetExamSubjectMarkSheet_Result> GetExamSubjectMarkSheet(Nullable<int> teacherID, Nullable<int> courseID, Nullable<int> queryID)
        {
            var teacherIDParameter = teacherID.HasValue ?
                new ObjectParameter("TeacherID", teacherID) :
                new ObjectParameter("TeacherID", typeof(int));
    
            var courseIDParameter = courseID.HasValue ?
                new ObjectParameter("CourseID", courseID) :
                new ObjectParameter("CourseID", typeof(int));
    
            var queryIDParameter = queryID.HasValue ?
                new ObjectParameter("QueryID", queryID) :
                new ObjectParameter("QueryID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetExamSubjectMarkSheet_Result>("GetExamSubjectMarkSheet", teacherIDParameter, courseIDParameter, queryIDParameter);
        }
    
        public virtual ObjectResult<GetExamSubjectsForResult_Result> GetExamSubjectsForResult(Nullable<int> examID, Nullable<int> teacherID)
        {
            var examIDParameter = examID.HasValue ?
                new ObjectParameter("ExamID", examID) :
                new ObjectParameter("ExamID", typeof(int));
    
            var teacherIDParameter = teacherID.HasValue ?
                new ObjectParameter("TeacherID", teacherID) :
                new ObjectParameter("TeacherID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetExamSubjectsForResult_Result>("GetExamSubjectsForResult", examIDParameter, teacherIDParameter);
        }
    
        public virtual ObjectResult<GetExamSubjectsStudentForResult_Result> GetExamSubjectsStudentForResult(Nullable<int> examID, Nullable<int> programCourseID)
        {
            var examIDParameter = examID.HasValue ?
                new ObjectParameter("ExamID", examID) :
                new ObjectParameter("ExamID", typeof(int));
    
            var programCourseIDParameter = programCourseID.HasValue ?
                new ObjectParameter("ProgramCourseID", programCourseID) :
                new ObjectParameter("ProgramCourseID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetExamSubjectsStudentForResult_Result>("GetExamSubjectsStudentForResult", examIDParameter, programCourseIDParameter);
        }
    
        public virtual ObjectResult<GetFamilyMembers_Result> GetFamilyMembers(string formNo)
        {
            var formNoParameter = formNo != null ?
                new ObjectParameter("FormNo", formNo) :
                new ObjectParameter("FormNo", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetFamilyMembers_Result>("GetFamilyMembers", formNoParameter);
        }
    
        public virtual ObjectResult<GetFinancialSupports_Result> GetFinancialSupports(string formNo)
        {
            var formNoParameter = formNo != null ?
                new ObjectParameter("FormNo", formNo) :
                new ObjectParameter("FormNo", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetFinancialSupports_Result>("GetFinancialSupports", formNoParameter);
        }
    
        public virtual ObjectResult<GetFormSaleDetail_Result> GetFormSaleDetail(string paramSearch, string isReceived, Nullable<int> batchID, Nullable<int> batchProgramID, Nullable<System.DateTime> startDate, Nullable<System.DateTime> endDate, Nullable<int> subDept_Id)
        {
            var paramSearchParameter = paramSearch != null ?
                new ObjectParameter("paramSearch", paramSearch) :
                new ObjectParameter("paramSearch", typeof(string));
    
            var isReceivedParameter = isReceived != null ?
                new ObjectParameter("IsReceived", isReceived) :
                new ObjectParameter("IsReceived", typeof(string));
    
            var batchIDParameter = batchID.HasValue ?
                new ObjectParameter("BatchID", batchID) :
                new ObjectParameter("BatchID", typeof(int));
    
            var batchProgramIDParameter = batchProgramID.HasValue ?
                new ObjectParameter("BatchProgramID", batchProgramID) :
                new ObjectParameter("BatchProgramID", typeof(int));
    
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("StartDate", startDate) :
                new ObjectParameter("StartDate", typeof(System.DateTime));
    
            var endDateParameter = endDate.HasValue ?
                new ObjectParameter("EndDate", endDate) :
                new ObjectParameter("EndDate", typeof(System.DateTime));
    
            var subDept_IdParameter = subDept_Id.HasValue ?
                new ObjectParameter("SubDept_Id", subDept_Id) :
                new ObjectParameter("SubDept_Id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetFormSaleDetail_Result>("GetFormSaleDetail", paramSearchParameter, isReceivedParameter, batchIDParameter, batchProgramIDParameter, startDateParameter, endDateParameter, subDept_IdParameter);
        }
    
        public virtual ObjectResult<GetFormsNotEnteredInSystem_Result> GetFormsNotEnteredInSystem()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetFormsNotEnteredInSystem_Result>("GetFormsNotEnteredInSystem");
        }
    
        public virtual ObjectResult<GetInstituteStatus_Result> GetInstituteStatus(string formNo, Nullable<int> queryID)
        {
            var formNoParameter = formNo != null ?
                new ObjectParameter("FormNo", formNo) :
                new ObjectParameter("FormNo", typeof(string));
    
            var queryIDParameter = queryID.HasValue ?
                new ObjectParameter("QueryID", queryID) :
                new ObjectParameter("QueryID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetInstituteStatus_Result>("GetInstituteStatus", formNoParameter, queryIDParameter);
        }
    
        public virtual ObjectResult<GetLoginUser_Result> GetLoginUser(string userName, string password, string empType)
        {
            var userNameParameter = userName != null ?
                new ObjectParameter("UserName", userName) :
                new ObjectParameter("UserName", typeof(string));
    
            var passwordParameter = password != null ?
                new ObjectParameter("Password", password) :
                new ObjectParameter("Password", typeof(string));
    
            var empTypeParameter = empType != null ?
                new ObjectParameter("EmpType", empType) :
                new ObjectParameter("EmpType", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetLoginUser_Result>("GetLoginUser", userNameParameter, passwordParameter, empTypeParameter);
        }
    
        public virtual ObjectResult<string> GetMaxFormNo()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("GetMaxFormNo");
        }
    
        public virtual ObjectResult<GetNoticBoardLists_Result> GetNoticBoardLists(Nullable<int> noticeTypeID, Nullable<int> facultyID)
        {
            var noticeTypeIDParameter = noticeTypeID.HasValue ?
                new ObjectParameter("NoticeTypeID", noticeTypeID) :
                new ObjectParameter("NoticeTypeID", typeof(int));
    
            var facultyIDParameter = facultyID.HasValue ?
                new ObjectParameter("FacultyID", facultyID) :
                new ObjectParameter("FacultyID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetNoticBoardLists_Result>("GetNoticBoardLists", noticeTypeIDParameter, facultyIDParameter);
        }
    
        public virtual ObjectResult<GetNoticeBoardDetails_Result> GetNoticeBoardDetails(string search)
        {
            var searchParameter = search != null ?
                new ObjectParameter("Search", search) :
                new ObjectParameter("Search", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetNoticeBoardDetails_Result>("GetNoticeBoardDetails", searchParameter);
        }
    
        public virtual ObjectResult<GetOBE_CourseCLO_Result> GetOBE_CourseCLO(string courseName, string cLOCode, string cLOName, string isActive)
        {
            var courseNameParameter = courseName != null ?
                new ObjectParameter("CourseName", courseName) :
                new ObjectParameter("CourseName", typeof(string));
    
            var cLOCodeParameter = cLOCode != null ?
                new ObjectParameter("CLOCode", cLOCode) :
                new ObjectParameter("CLOCode", typeof(string));
    
            var cLONameParameter = cLOName != null ?
                new ObjectParameter("CLOName", cLOName) :
                new ObjectParameter("CLOName", typeof(string));
    
            var isActiveParameter = isActive != null ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetOBE_CourseCLO_Result>("GetOBE_CourseCLO", courseNameParameter, cLOCodeParameter, cLONameParameter, isActiveParameter);
        }
    
        public virtual ObjectResult<GetProgramCourse_Result> GetProgramCourse(Nullable<int> batchID, Nullable<int> batchProgramID, Nullable<int> yearSemesterNo)
        {
            var batchIDParameter = batchID.HasValue ?
                new ObjectParameter("BatchID", batchID) :
                new ObjectParameter("BatchID", typeof(int));
    
            var batchProgramIDParameter = batchProgramID.HasValue ?
                new ObjectParameter("BatchProgramID", batchProgramID) :
                new ObjectParameter("BatchProgramID", typeof(int));
    
            var yearSemesterNoParameter = yearSemesterNo.HasValue ?
                new ObjectParameter("YearSemesterNo", yearSemesterNo) :
                new ObjectParameter("YearSemesterNo", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetProgramCourse_Result>("GetProgramCourse", batchIDParameter, batchProgramIDParameter, yearSemesterNoParameter);
        }
    
        public virtual ObjectResult<GetPrograms_by_FacultyLevelBatch_Result> GetPrograms_by_FacultyLevelBatch(Nullable<int> facultyID, Nullable<int> levelID, Nullable<int> batchID, Nullable<int> queryID)
        {
            var facultyIDParameter = facultyID.HasValue ?
                new ObjectParameter("FacultyID", facultyID) :
                new ObjectParameter("FacultyID", typeof(int));
    
            var levelIDParameter = levelID.HasValue ?
                new ObjectParameter("LevelID", levelID) :
                new ObjectParameter("LevelID", typeof(int));
    
            var batchIDParameter = batchID.HasValue ?
                new ObjectParameter("BatchID", batchID) :
                new ObjectParameter("BatchID", typeof(int));
    
            var queryIDParameter = queryID.HasValue ?
                new ObjectParameter("QueryID", queryID) :
                new ObjectParameter("QueryID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetPrograms_by_FacultyLevelBatch_Result>("GetPrograms_by_FacultyLevelBatch", facultyIDParameter, levelIDParameter, batchIDParameter, queryIDParameter);
        }
    
        public virtual ObjectResult<GetProvinces_Result> GetProvinces(string search)
        {
            var searchParameter = search != null ?
                new ObjectParameter("Search", search) :
                new ObjectParameter("Search", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetProvinces_Result>("GetProvinces", searchParameter);
        }
    
        public virtual ObjectResult<GetQualification_Result> GetQualification(string formNo)
        {
            var formNoParameter = formNo != null ?
                new ObjectParameter("FormNo", formNo) :
                new ObjectParameter("FormNo", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetQualification_Result>("GetQualification", formNoParameter);
        }
    
        public virtual ObjectResult<GetQuizByID_Result> GetQuizByID(Nullable<int> lMSQuizID)
        {
            var lMSQuizIDParameter = lMSQuizID.HasValue ?
                new ObjectParameter("LMSQuizID", lMSQuizID) :
                new ObjectParameter("LMSQuizID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetQuizByID_Result>("GetQuizByID", lMSQuizIDParameter);
        }
    
        public virtual ObjectResult<GetScholarShipApplicantBySoID_Result> GetScholarShipApplicantBySoID(Nullable<int> scholarshipOpportunitiesID)
        {
            var scholarshipOpportunitiesIDParameter = scholarshipOpportunitiesID.HasValue ?
                new ObjectParameter("ScholarshipOpportunitiesID", scholarshipOpportunitiesID) :
                new ObjectParameter("ScholarshipOpportunitiesID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetScholarShipApplicantBySoID_Result>("GetScholarShipApplicantBySoID", scholarshipOpportunitiesIDParameter);
        }
    
        public virtual ObjectResult<GetScholarshipDocumentByStudentID_Result> GetScholarshipDocumentByStudentID(Nullable<int> scholarshipOpportunitiesID, Nullable<int> studentID)
        {
            var scholarshipOpportunitiesIDParameter = scholarshipOpportunitiesID.HasValue ?
                new ObjectParameter("ScholarshipOpportunitiesID", scholarshipOpportunitiesID) :
                new ObjectParameter("ScholarshipOpportunitiesID", typeof(int));
    
            var studentIDParameter = studentID.HasValue ?
                new ObjectParameter("StudentID", studentID) :
                new ObjectParameter("StudentID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetScholarshipDocumentByStudentID_Result>("GetScholarshipDocumentByStudentID", scholarshipOpportunitiesIDParameter, studentIDParameter);
        }
    
        public virtual ObjectResult<GetScholarshipDocumentsByDocumentID_Result> GetScholarshipDocumentsByDocumentID(Nullable<int> scholarshipDocumentID)
        {
            var scholarshipDocumentIDParameter = scholarshipDocumentID.HasValue ?
                new ObjectParameter("ScholarshipDocumentID", scholarshipDocumentID) :
                new ObjectParameter("ScholarshipDocumentID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetScholarshipDocumentsByDocumentID_Result>("GetScholarshipDocumentsByDocumentID", scholarshipDocumentIDParameter);
        }
    
        public virtual ObjectResult<Nullable<double>> GetSelectedProgramFee_By_BatchProgramID(Nullable<int> batchProgramID, Nullable<int> queryID)
        {
            var batchProgramIDParameter = batchProgramID.HasValue ?
                new ObjectParameter("BatchProgramID", batchProgramID) :
                new ObjectParameter("BatchProgramID", typeof(int));
    
            var queryIDParameter = queryID.HasValue ?
                new ObjectParameter("QueryID", queryID) :
                new ObjectParameter("QueryID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<double>>("GetSelectedProgramFee_By_BatchProgramID", batchProgramIDParameter, queryIDParameter);
        }
    
        public virtual ObjectResult<GetSelectedProgramsOfApplicant_Result> GetSelectedProgramsOfApplicant(string formNo)
        {
            var formNoParameter = formNo != null ?
                new ObjectParameter("FormNo", formNo) :
                new ObjectParameter("FormNo", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetSelectedProgramsOfApplicant_Result>("GetSelectedProgramsOfApplicant", formNoParameter);
        }
    
        public virtual ObjectResult<GetSelectionCriteria_Result> GetSelectionCriteria(Nullable<int> batchProgramID, Nullable<int> degreeID, string paramSearch, Nullable<int> statusID, Nullable<int> entryTestID)
        {
            var batchProgramIDParameter = batchProgramID.HasValue ?
                new ObjectParameter("BatchProgramID", batchProgramID) :
                new ObjectParameter("BatchProgramID", typeof(int));
    
            var degreeIDParameter = degreeID.HasValue ?
                new ObjectParameter("DegreeID", degreeID) :
                new ObjectParameter("DegreeID", typeof(int));
    
            var paramSearchParameter = paramSearch != null ?
                new ObjectParameter("paramSearch", paramSearch) :
                new ObjectParameter("paramSearch", typeof(string));
    
            var statusIDParameter = statusID.HasValue ?
                new ObjectParameter("StatusID", statusID) :
                new ObjectParameter("StatusID", typeof(int));
    
            var entryTestIDParameter = entryTestID.HasValue ?
                new ObjectParameter("EntryTestID", entryTestID) :
                new ObjectParameter("EntryTestID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetSelectionCriteria_Result>("GetSelectionCriteria", batchProgramIDParameter, degreeIDParameter, paramSearchParameter, statusIDParameter, entryTestIDParameter);
        }
    
        public virtual ObjectResult<GetSelectionCriterias_Result> GetSelectionCriterias(string search)
        {
            var searchParameter = search != null ?
                new ObjectParameter("Search", search) :
                new ObjectParameter("Search", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetSelectionCriterias_Result>("GetSelectionCriterias", searchParameter);
        }
    
        public virtual ObjectResult<GetStudentApprovalList_Result> GetStudentApprovalList(string search, Nullable<int> batchID, Nullable<int> programID, Nullable<int> yearSemesterNo, Nullable<int> statusID, Nullable<System.DateTime> startDate, Nullable<System.DateTime> endDate)
        {
            var searchParameter = search != null ?
                new ObjectParameter("Search", search) :
                new ObjectParameter("Search", typeof(string));
    
            var batchIDParameter = batchID.HasValue ?
                new ObjectParameter("BatchID", batchID) :
                new ObjectParameter("BatchID", typeof(int));
    
            var programIDParameter = programID.HasValue ?
                new ObjectParameter("ProgramID", programID) :
                new ObjectParameter("ProgramID", typeof(int));
    
            var yearSemesterNoParameter = yearSemesterNo.HasValue ?
                new ObjectParameter("YearSemesterNo", yearSemesterNo) :
                new ObjectParameter("YearSemesterNo", typeof(int));
    
            var statusIDParameter = statusID.HasValue ?
                new ObjectParameter("StatusID", statusID) :
                new ObjectParameter("StatusID", typeof(int));
    
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("StartDate", startDate) :
                new ObjectParameter("StartDate", typeof(System.DateTime));
    
            var endDateParameter = endDate.HasValue ?
                new ObjectParameter("EndDate", endDate) :
                new ObjectParameter("EndDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetStudentApprovalList_Result>("GetStudentApprovalList", searchParameter, batchIDParameter, programIDParameter, yearSemesterNoParameter, statusIDParameter, startDateParameter, endDateParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> GetStudentAttandanceExist(Nullable<int> batchProgramID, Nullable<int> yearSemesterNo, Nullable<int> courseID, Nullable<int> teacherID, Nullable<System.DateTime> presentDate)
        {
            var batchProgramIDParameter = batchProgramID.HasValue ?
                new ObjectParameter("BatchProgramID", batchProgramID) :
                new ObjectParameter("BatchProgramID", typeof(int));
    
            var yearSemesterNoParameter = yearSemesterNo.HasValue ?
                new ObjectParameter("YearSemesterNo", yearSemesterNo) :
                new ObjectParameter("YearSemesterNo", typeof(int));
    
            var courseIDParameter = courseID.HasValue ?
                new ObjectParameter("CourseID", courseID) :
                new ObjectParameter("CourseID", typeof(int));
    
            var teacherIDParameter = teacherID.HasValue ?
                new ObjectParameter("TeacherID", teacherID) :
                new ObjectParameter("TeacherID", typeof(int));
    
            var presentDateParameter = presentDate.HasValue ?
                new ObjectParameter("PresentDate", presentDate) :
                new ObjectParameter("PresentDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("GetStudentAttandanceExist", batchProgramIDParameter, yearSemesterNoParameter, courseIDParameter, teacherIDParameter, presentDateParameter);
        }
    
        public virtual ObjectResult<GetStudentAttendanceSummaryByID_Result> GetStudentAttendanceSummaryByID(Nullable<int> studentID, Nullable<int> courseID)
        {
            var studentIDParameter = studentID.HasValue ?
                new ObjectParameter("StudentID", studentID) :
                new ObjectParameter("StudentID", typeof(int));
    
            var courseIDParameter = courseID.HasValue ?
                new ObjectParameter("CourseID", courseID) :
                new ObjectParameter("CourseID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetStudentAttendanceSummaryByID_Result>("GetStudentAttendanceSummaryByID", studentIDParameter, courseIDParameter);
        }
    
        public virtual ObjectResult<GetStudentBatchProgramCourse_Result> GetStudentBatchProgramCourse(Nullable<int> batchProgramID, Nullable<int> yearSemesterNo, Nullable<int> studentID, Nullable<int> queryID)
        {
            var batchProgramIDParameter = batchProgramID.HasValue ?
                new ObjectParameter("BatchProgramID", batchProgramID) :
                new ObjectParameter("BatchProgramID", typeof(int));
    
            var yearSemesterNoParameter = yearSemesterNo.HasValue ?
                new ObjectParameter("YearSemesterNo", yearSemesterNo) :
                new ObjectParameter("YearSemesterNo", typeof(int));
    
            var studentIDParameter = studentID.HasValue ?
                new ObjectParameter("StudentID", studentID) :
                new ObjectParameter("StudentID", typeof(int));
    
            var queryIDParameter = queryID.HasValue ?
                new ObjectParameter("QueryID", queryID) :
                new ObjectParameter("QueryID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetStudentBatchProgramCourse_Result>("GetStudentBatchProgramCourse", batchProgramIDParameter, yearSemesterNoParameter, studentIDParameter, queryIDParameter);
        }
    
        public virtual ObjectResult<GetStudentChallans_Result> GetStudentChallans(string formNo, string type)
        {
            var formNoParameter = formNo != null ?
                new ObjectParameter("FormNo", formNo) :
                new ObjectParameter("FormNo", typeof(string));
    
            var typeParameter = type != null ?
                new ObjectParameter("Type", type) :
                new ObjectParameter("Type", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetStudentChallans_Result>("GetStudentChallans", formNoParameter, typeParameter);
        }
    
        public virtual ObjectResult<GetStudentCourseAttendanceSummary_Result> GetStudentCourseAttendanceSummary(Nullable<int> studentID, Nullable<int> courseID)
        {
            var studentIDParameter = studentID.HasValue ?
                new ObjectParameter("StudentID", studentID) :
                new ObjectParameter("StudentID", typeof(int));
    
            var courseIDParameter = courseID.HasValue ?
                new ObjectParameter("CourseID", courseID) :
                new ObjectParameter("CourseID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetStudentCourseAttendanceSummary_Result>("GetStudentCourseAttendanceSummary", studentIDParameter, courseIDParameter);
        }
    
        public virtual ObjectResult<string> GetStudentDefaulterStatusByStudentID(Nullable<int> studentID)
        {
            var studentIDParameter = studentID.HasValue ?
                new ObjectParameter("StudentID", studentID) :
                new ObjectParameter("StudentID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("GetStudentDefaulterStatusByStudentID", studentIDParameter);
        }
    
        public virtual ObjectResult<GetStudentDetailByStudentID_Result> GetStudentDetailByStudentID(Nullable<int> studentID)
        {
            var studentIDParameter = studentID.HasValue ?
                new ObjectParameter("StudentID", studentID) :
                new ObjectParameter("StudentID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetStudentDetailByStudentID_Result>("GetStudentDetailByStudentID", studentIDParameter);
        }
    
        public virtual ObjectResult<GetStudentDiscountRequests_Result> GetStudentDiscountRequests(string search)
        {
            var searchParameter = search != null ?
                new ObjectParameter("Search", search) :
                new ObjectParameter("Search", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetStudentDiscountRequests_Result>("GetStudentDiscountRequests", searchParameter);
        }
    
        public virtual ObjectResult<GetStudentInformationList_Result> GetStudentInformationList(string search, Nullable<int> batchID, Nullable<int> programID, Nullable<int> subDept_Id, Nullable<int> yearSemesterNo, Nullable<int> statusID)
        {
            var searchParameter = search != null ?
                new ObjectParameter("Search", search) :
                new ObjectParameter("Search", typeof(string));
    
            var batchIDParameter = batchID.HasValue ?
                new ObjectParameter("BatchID", batchID) :
                new ObjectParameter("BatchID", typeof(int));
    
            var programIDParameter = programID.HasValue ?
                new ObjectParameter("ProgramID", programID) :
                new ObjectParameter("ProgramID", typeof(int));
    
            var subDept_IdParameter = subDept_Id.HasValue ?
                new ObjectParameter("SubDept_Id", subDept_Id) :
                new ObjectParameter("SubDept_Id", typeof(int));
    
            var yearSemesterNoParameter = yearSemesterNo.HasValue ?
                new ObjectParameter("YearSemesterNo", yearSemesterNo) :
                new ObjectParameter("YearSemesterNo", typeof(int));
    
            var statusIDParameter = statusID.HasValue ?
                new ObjectParameter("StatusID", statusID) :
                new ObjectParameter("StatusID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetStudentInformationList_Result>("GetStudentInformationList", searchParameter, batchIDParameter, programIDParameter, subDept_IdParameter, yearSemesterNoParameter, statusIDParameter);
        }
    
        public virtual ObjectResult<GetStudentListForExamEligibility_Result> GetStudentListForExamEligibility(Nullable<int> teacherID, Nullable<int> programCourseID, Nullable<int> examID)
        {
            var teacherIDParameter = teacherID.HasValue ?
                new ObjectParameter("TeacherID", teacherID) :
                new ObjectParameter("TeacherID", typeof(int));
    
            var programCourseIDParameter = programCourseID.HasValue ?
                new ObjectParameter("ProgramCourseID", programCourseID) :
                new ObjectParameter("ProgramCourseID", typeof(int));
    
            var examIDParameter = examID.HasValue ?
                new ObjectParameter("ExamID", examID) :
                new ObjectParameter("ExamID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetStudentListForExamEligibility_Result>("GetStudentListForExamEligibility", teacherIDParameter, programCourseIDParameter, examIDParameter);
        }
    
        public virtual ObjectResult<GetStudentOrApplicantList_Result> GetStudentOrApplicantList(string search, Nullable<int> batchID, Nullable<int> batchProgramID, string isActive, Nullable<int> statusID, Nullable<System.DateTime> dateFrom, Nullable<System.DateTime> dateTo)
        {
            var searchParameter = search != null ?
                new ObjectParameter("Search", search) :
                new ObjectParameter("Search", typeof(string));
    
            var batchIDParameter = batchID.HasValue ?
                new ObjectParameter("BatchID", batchID) :
                new ObjectParameter("BatchID", typeof(int));
    
            var batchProgramIDParameter = batchProgramID.HasValue ?
                new ObjectParameter("BatchProgramID", batchProgramID) :
                new ObjectParameter("BatchProgramID", typeof(int));
    
            var isActiveParameter = isActive != null ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(string));
    
            var statusIDParameter = statusID.HasValue ?
                new ObjectParameter("StatusID", statusID) :
                new ObjectParameter("StatusID", typeof(int));
    
            var dateFromParameter = dateFrom.HasValue ?
                new ObjectParameter("DateFrom", dateFrom) :
                new ObjectParameter("DateFrom", typeof(System.DateTime));
    
            var dateToParameter = dateTo.HasValue ?
                new ObjectParameter("DateTo", dateTo) :
                new ObjectParameter("DateTo", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetStudentOrApplicantList_Result>("GetStudentOrApplicantList", searchParameter, batchIDParameter, batchProgramIDParameter, isActiveParameter, statusIDParameter, dateFromParameter, dateToParameter);
        }
    
        public virtual ObjectResult<GetStudentPersonalInfo_Result> GetStudentPersonalInfo(string formNo)
        {
            var formNoParameter = formNo != null ?
                new ObjectParameter("FormNo", formNo) :
                new ObjectParameter("FormNo", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetStudentPersonalInfo_Result>("GetStudentPersonalInfo", formNoParameter);
        }
    
        public virtual ObjectResult<GetStudents_Result> GetStudents(string search)
        {
            var searchParameter = search != null ?
                new ObjectParameter("Search", search) :
                new ObjectParameter("Search", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetStudents_Result>("GetStudents", searchParameter);
        }
    
        public virtual ObjectResult<GetStudentServicesAccumulate_Result> GetStudentServicesAccumulate(Nullable<int> batchProgramID, string formNo, Nullable<int> yearSemesterNo, string challanType, Nullable<int> statusID)
        {
            var batchProgramIDParameter = batchProgramID.HasValue ?
                new ObjectParameter("BatchProgramID", batchProgramID) :
                new ObjectParameter("BatchProgramID", typeof(int));
    
            var formNoParameter = formNo != null ?
                new ObjectParameter("FormNo", formNo) :
                new ObjectParameter("FormNo", typeof(string));
    
            var yearSemesterNoParameter = yearSemesterNo.HasValue ?
                new ObjectParameter("YearSemesterNo", yearSemesterNo) :
                new ObjectParameter("YearSemesterNo", typeof(int));
    
            var challanTypeParameter = challanType != null ?
                new ObjectParameter("ChallanType", challanType) :
                new ObjectParameter("ChallanType", typeof(string));
    
            var statusIDParameter = statusID.HasValue ?
                new ObjectParameter("StatusID", statusID) :
                new ObjectParameter("StatusID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetStudentServicesAccumulate_Result>("GetStudentServicesAccumulate", batchProgramIDParameter, formNoParameter, yearSemesterNoParameter, challanTypeParameter, statusIDParameter);
        }
    
        public virtual ObjectResult<GetStudentsToMoveToNextSemester_Result> GetStudentsToMoveToNextSemester(Nullable<int> batchProgramID, Nullable<int> yearSemesterNo, Nullable<int> statusID)
        {
            var batchProgramIDParameter = batchProgramID.HasValue ?
                new ObjectParameter("BatchProgramID", batchProgramID) :
                new ObjectParameter("BatchProgramID", typeof(int));
    
            var yearSemesterNoParameter = yearSemesterNo.HasValue ?
                new ObjectParameter("YearSemesterNo", yearSemesterNo) :
                new ObjectParameter("YearSemesterNo", typeof(int));
    
            var statusIDParameter = statusID.HasValue ?
                new ObjectParameter("StatusID", statusID) :
                new ObjectParameter("StatusID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetStudentsToMoveToNextSemester_Result>("GetStudentsToMoveToNextSemester", batchProgramIDParameter, yearSemesterNoParameter, statusIDParameter);
        }
    
        public virtual ObjectResult<GetStudentSubjectDeatilForGardeForm_Result> GetStudentSubjectDeatilForGardeForm(Nullable<int> programCourseID, Nullable<int> studentID)
        {
            var programCourseIDParameter = programCourseID.HasValue ?
                new ObjectParameter("ProgramCourseID", programCourseID) :
                new ObjectParameter("ProgramCourseID", typeof(int));
    
            var studentIDParameter = studentID.HasValue ?
                new ObjectParameter("StudentID", studentID) :
                new ObjectParameter("StudentID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetStudentSubjectDeatilForGardeForm_Result>("GetStudentSubjectDeatilForGardeForm", programCourseIDParameter, studentIDParameter);
        }
    
        public virtual ObjectResult<GetStudentSubjects_Result> GetStudentSubjects(Nullable<int> batchProgramID, Nullable<int> yearSemesterNo, string statusName, Nullable<int> queryID)
        {
            var batchProgramIDParameter = batchProgramID.HasValue ?
                new ObjectParameter("BatchProgramID", batchProgramID) :
                new ObjectParameter("BatchProgramID", typeof(int));
    
            var yearSemesterNoParameter = yearSemesterNo.HasValue ?
                new ObjectParameter("YearSemesterNo", yearSemesterNo) :
                new ObjectParameter("YearSemesterNo", typeof(int));
    
            var statusNameParameter = statusName != null ?
                new ObjectParameter("StatusName", statusName) :
                new ObjectParameter("StatusName", typeof(string));
    
            var queryIDParameter = queryID.HasValue ?
                new ObjectParameter("QueryID", queryID) :
                new ObjectParameter("QueryID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetStudentSubjects_Result>("GetStudentSubjects", batchProgramIDParameter, yearSemesterNoParameter, statusNameParameter, queryIDParameter);
        }
    
        public virtual ObjectResult<GetSubAdminEmployeePagesForRight_Result> GetSubAdminEmployeePagesForRight(Nullable<int> emp_ID)
        {
            var emp_IDParameter = emp_ID.HasValue ?
                new ObjectParameter("Emp_ID", emp_ID) :
                new ObjectParameter("Emp_ID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetSubAdminEmployeePagesForRight_Result>("GetSubAdminEmployeePagesForRight", emp_IDParameter);
        }
    
        public virtual ObjectResult<GetSubDepartmentLogoBySubDeprtID_Result> GetSubDepartmentLogoBySubDeprtID(Nullable<int> subDept_Id)
        {
            var subDept_IdParameter = subDept_Id.HasValue ?
                new ObjectParameter("SubDept_Id", subDept_Id) :
                new ObjectParameter("SubDept_Id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetSubDepartmentLogoBySubDeprtID_Result>("GetSubDepartmentLogoBySubDeprtID", subDept_IdParameter);
        }
    
        public virtual ObjectResult<GetSubDepartments_by_HospitalID_Result> GetSubDepartments_by_HospitalID(Nullable<int> hospital_ID)
        {
            var hospital_IDParameter = hospital_ID.HasValue ?
                new ObjectParameter("Hospital_ID", hospital_ID) :
                new ObjectParameter("Hospital_ID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetSubDepartments_by_HospitalID_Result>("GetSubDepartments_by_HospitalID", hospital_IDParameter);
        }
    
        public virtual ObjectResult<GetTeacherActiveCources_by_TeacherID_Result> GetTeacherActiveCources_by_TeacherID(Nullable<int> teacherID)
        {
            var teacherIDParameter = teacherID.HasValue ?
                new ObjectParameter("TeacherID", teacherID) :
                new ObjectParameter("TeacherID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetTeacherActiveCources_by_TeacherID_Result>("GetTeacherActiveCources_by_TeacherID", teacherIDParameter);
        }
    
        public virtual ObjectResult<GetTeacherActiveCources_by_TeacherID_ForLMS_Result> GetTeacherActiveCources_by_TeacherID_ForLMS(Nullable<int> teacherID)
        {
            var teacherIDParameter = teacherID.HasValue ?
                new ObjectParameter("TeacherID", teacherID) :
                new ObjectParameter("TeacherID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetTeacherActiveCources_by_TeacherID_ForLMS_Result>("GetTeacherActiveCources_by_TeacherID_ForLMS", teacherIDParameter);
        }
    
        public virtual ObjectResult<GetTeacherReportsForDashboard_Result> GetTeacherReportsForDashboard(Nullable<int> teacherID)
        {
            var teacherIDParameter = teacherID.HasValue ?
                new ObjectParameter("TeacherID", teacherID) :
                new ObjectParameter("TeacherID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetTeacherReportsForDashboard_Result>("GetTeacherReportsForDashboard", teacherIDParameter);
        }
    
        public virtual ObjectResult<GetTimeTableSlotDateData_Result> GetTimeTableSlotDateData()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetTimeTableSlotDateData_Result>("GetTimeTableSlotDateData");
        }
    
        public virtual ObjectResult<GetUserChatByUserID_Result> GetUserChatByUserID(Nullable<int> empID1, Nullable<int> empID2)
        {
            var empID1Parameter = empID1.HasValue ?
                new ObjectParameter("EmpID1", empID1) :
                new ObjectParameter("EmpID1", typeof(int));
    
            var empID2Parameter = empID2.HasValue ?
                new ObjectParameter("EmpID2", empID2) :
                new ObjectParameter("EmpID2", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetUserChatByUserID_Result>("GetUserChatByUserID", empID1Parameter, empID2Parameter);
        }
    
        public virtual ObjectResult<GetUserDetail_Result> GetUserDetail(Nullable<int> requestRole, string searchIN)
        {
            var requestRoleParameter = requestRole.HasValue ?
                new ObjectParameter("RequestRole", requestRole) :
                new ObjectParameter("RequestRole", typeof(int));
    
            var searchINParameter = searchIN != null ?
                new ObjectParameter("SearchIN", searchIN) :
                new ObjectParameter("SearchIN", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetUserDetail_Result>("GetUserDetail", requestRoleParameter, searchINParameter);
        }
    
        public virtual ObjectResult<GetWeekCourses_Result> GetWeekCourses(Nullable<int> batchProgramID, Nullable<int> batchID, Nullable<int> yearSemesterNo)
        {
            var batchProgramIDParameter = batchProgramID.HasValue ?
                new ObjectParameter("BatchProgramID", batchProgramID) :
                new ObjectParameter("BatchProgramID", typeof(int));
    
            var batchIDParameter = batchID.HasValue ?
                new ObjectParameter("BatchID", batchID) :
                new ObjectParameter("BatchID", typeof(int));
    
            var yearSemesterNoParameter = yearSemesterNo.HasValue ?
                new ObjectParameter("YearSemesterNo", yearSemesterNo) :
                new ObjectParameter("YearSemesterNo", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetWeekCourses_Result>("GetWeekCourses", batchProgramIDParameter, batchIDParameter, yearSemesterNoParameter);
        }
    
        public virtual int Insert_StudentBatchProgramCourses(Nullable<int> batchProgramID, Nullable<int> yearSemesterNo, Nullable<int> studentID, Nullable<int> queryID)
        {
            var batchProgramIDParameter = batchProgramID.HasValue ?
                new ObjectParameter("BatchProgramID", batchProgramID) :
                new ObjectParameter("BatchProgramID", typeof(int));
    
            var yearSemesterNoParameter = yearSemesterNo.HasValue ?
                new ObjectParameter("YearSemesterNo", yearSemesterNo) :
                new ObjectParameter("YearSemesterNo", typeof(int));
    
            var studentIDParameter = studentID.HasValue ?
                new ObjectParameter("StudentID", studentID) :
                new ObjectParameter("StudentID", typeof(int));
    
            var queryIDParameter = queryID.HasValue ?
                new ObjectParameter("QueryID", queryID) :
                new ObjectParameter("QueryID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Insert_StudentBatchProgramCourses", batchProgramIDParameter, yearSemesterNoParameter, studentIDParameter, queryIDParameter);
        }
    
        public virtual int Insert_StudentEnrollment(Nullable<int> studentID, Nullable<int> batchProgramID, string admissionDate, string enrollmentNo, string registrationNo, string degreeCompleted, string degreeCompletionDate, Nullable<int> createdBy, string isActive)
        {
            var studentIDParameter = studentID.HasValue ?
                new ObjectParameter("StudentID", studentID) :
                new ObjectParameter("StudentID", typeof(int));
    
            var batchProgramIDParameter = batchProgramID.HasValue ?
                new ObjectParameter("BatchProgramID", batchProgramID) :
                new ObjectParameter("BatchProgramID", typeof(int));
    
            var admissionDateParameter = admissionDate != null ?
                new ObjectParameter("AdmissionDate", admissionDate) :
                new ObjectParameter("AdmissionDate", typeof(string));
    
            var enrollmentNoParameter = enrollmentNo != null ?
                new ObjectParameter("EnrollmentNo", enrollmentNo) :
                new ObjectParameter("EnrollmentNo", typeof(string));
    
            var registrationNoParameter = registrationNo != null ?
                new ObjectParameter("RegistrationNo", registrationNo) :
                new ObjectParameter("RegistrationNo", typeof(string));
    
            var degreeCompletedParameter = degreeCompleted != null ?
                new ObjectParameter("DegreeCompleted", degreeCompleted) :
                new ObjectParameter("DegreeCompleted", typeof(string));
    
            var degreeCompletionDateParameter = degreeCompletionDate != null ?
                new ObjectParameter("DegreeCompletionDate", degreeCompletionDate) :
                new ObjectParameter("DegreeCompletionDate", typeof(string));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(int));
    
            var isActiveParameter = isActive != null ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Insert_StudentEnrollment", studentIDParameter, batchProgramIDParameter, admissionDateParameter, enrollmentNoParameter, registrationNoParameter, degreeCompletedParameter, degreeCompletionDateParameter, createdByParameter, isActiveParameter);
        }
    
        public virtual int Insert_TimeTableBatchProgramCoursesData(Nullable<int> batchID, Nullable<int> batchProgramID, Nullable<int> yearSemesterNo, Nullable<int> createdBy)
        {
            var batchIDParameter = batchID.HasValue ?
                new ObjectParameter("BatchID", batchID) :
                new ObjectParameter("BatchID", typeof(int));
    
            var batchProgramIDParameter = batchProgramID.HasValue ?
                new ObjectParameter("BatchProgramID", batchProgramID) :
                new ObjectParameter("BatchProgramID", typeof(int));
    
            var yearSemesterNoParameter = yearSemesterNo.HasValue ?
                new ObjectParameter("YearSemesterNo", yearSemesterNo) :
                new ObjectParameter("YearSemesterNo", typeof(int));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Insert_TimeTableBatchProgramCoursesData", batchIDParameter, batchProgramIDParameter, yearSemesterNoParameter, createdByParameter);
        }
    
        public virtual int Insert_TimeTableDataTempTable(Nullable<int> batchID, Nullable<int> batchProgramID, Nullable<int> yearSemesterNo, Nullable<int> studentID, Nullable<int> createdBy, Nullable<int> timeTableMainID, Nullable<int> queryID)
        {
            var batchIDParameter = batchID.HasValue ?
                new ObjectParameter("BatchID", batchID) :
                new ObjectParameter("BatchID", typeof(int));
    
            var batchProgramIDParameter = batchProgramID.HasValue ?
                new ObjectParameter("BatchProgramID", batchProgramID) :
                new ObjectParameter("BatchProgramID", typeof(int));
    
            var yearSemesterNoParameter = yearSemesterNo.HasValue ?
                new ObjectParameter("YearSemesterNo", yearSemesterNo) :
                new ObjectParameter("YearSemesterNo", typeof(int));
    
            var studentIDParameter = studentID.HasValue ?
                new ObjectParameter("StudentID", studentID) :
                new ObjectParameter("StudentID", typeof(int));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(int));
    
            var timeTableMainIDParameter = timeTableMainID.HasValue ?
                new ObjectParameter("TimeTableMainID", timeTableMainID) :
                new ObjectParameter("TimeTableMainID", typeof(int));
    
            var queryIDParameter = queryID.HasValue ?
                new ObjectParameter("QueryID", queryID) :
                new ObjectParameter("QueryID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Insert_TimeTableDataTempTable", batchIDParameter, batchProgramIDParameter, yearSemesterNoParameter, studentIDParameter, createdByParameter, timeTableMainIDParameter, queryIDParameter);
        }
    
        public virtual int Insert_TimeTableSlotDate(Nullable<System.DateTime> startDate, Nullable<System.DateTime> endDate, Nullable<int> createdBy)
        {
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("StartDate", startDate) :
                new ObjectParameter("StartDate", typeof(System.DateTime));
    
            var endDateParameter = endDate.HasValue ?
                new ObjectParameter("EndDate", endDate) :
                new ObjectParameter("EndDate", typeof(System.DateTime));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Insert_TimeTableSlotDate", startDateParameter, endDateParameter, createdByParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> InsertAlumniUserBlogComment(Nullable<int> alumniUserBlogCommentID, Nullable<int> alumniUserBlogID, Nullable<int> commentUserID, string blogComment, Nullable<int> createdBy, Nullable<int> modifiedBy)
        {
            var alumniUserBlogCommentIDParameter = alumniUserBlogCommentID.HasValue ?
                new ObjectParameter("AlumniUserBlogCommentID", alumniUserBlogCommentID) :
                new ObjectParameter("AlumniUserBlogCommentID", typeof(int));
    
            var alumniUserBlogIDParameter = alumniUserBlogID.HasValue ?
                new ObjectParameter("AlumniUserBlogID", alumniUserBlogID) :
                new ObjectParameter("AlumniUserBlogID", typeof(int));
    
            var commentUserIDParameter = commentUserID.HasValue ?
                new ObjectParameter("CommentUserID", commentUserID) :
                new ObjectParameter("CommentUserID", typeof(int));
    
            var blogCommentParameter = blogComment != null ?
                new ObjectParameter("BlogComment", blogComment) :
                new ObjectParameter("BlogComment", typeof(string));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(int));
    
            var modifiedByParameter = modifiedBy.HasValue ?
                new ObjectParameter("ModifiedBy", modifiedBy) :
                new ObjectParameter("ModifiedBy", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("InsertAlumniUserBlogComment", alumniUserBlogCommentIDParameter, alumniUserBlogIDParameter, commentUserIDParameter, blogCommentParameter, createdByParameter, modifiedByParameter);
        }
    
        public virtual int InsertApplicantLoginWithPages(string userName, string password, string empType, string email, string mobileNumber, string cNIC, Nullable<int> empID, string countryCode)
        {
            var userNameParameter = userName != null ?
                new ObjectParameter("UserName", userName) :
                new ObjectParameter("UserName", typeof(string));
    
            var passwordParameter = password != null ?
                new ObjectParameter("Password", password) :
                new ObjectParameter("Password", typeof(string));
    
            var empTypeParameter = empType != null ?
                new ObjectParameter("EmpType", empType) :
                new ObjectParameter("EmpType", typeof(string));
    
            var emailParameter = email != null ?
                new ObjectParameter("Email", email) :
                new ObjectParameter("Email", typeof(string));
    
            var mobileNumberParameter = mobileNumber != null ?
                new ObjectParameter("MobileNumber", mobileNumber) :
                new ObjectParameter("MobileNumber", typeof(string));
    
            var cNICParameter = cNIC != null ?
                new ObjectParameter("CNIC", cNIC) :
                new ObjectParameter("CNIC", typeof(string));
    
            var empIDParameter = empID.HasValue ?
                new ObjectParameter("EmpID", empID) :
                new ObjectParameter("EmpID", typeof(int));
    
            var countryCodeParameter = countryCode != null ?
                new ObjectParameter("CountryCode", countryCode) :
                new ObjectParameter("CountryCode", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertApplicantLoginWithPages", userNameParameter, passwordParameter, empTypeParameter, emailParameter, mobileNumberParameter, cNICParameter, empIDParameter, countryCodeParameter);
        }
    
        public virtual int InsertDatesOfYear(Nullable<int> year)
        {
            var yearParameter = year.HasValue ?
                new ObjectParameter("Year", year) :
                new ObjectParameter("Year", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertDatesOfYear", yearParameter);
        }
    
        public virtual int InsertEntryTestInterviewMarks(string formNo, Nullable<int> degreeID, Nullable<double> totalMarks, Nullable<double> obtainedMarks, string statusName, Nullable<int> queryId, Nullable<int> entryTestID, Nullable<int> createdBy)
        {
            var formNoParameter = formNo != null ?
                new ObjectParameter("FormNo", formNo) :
                new ObjectParameter("FormNo", typeof(string));
    
            var degreeIDParameter = degreeID.HasValue ?
                new ObjectParameter("DegreeID", degreeID) :
                new ObjectParameter("DegreeID", typeof(int));
    
            var totalMarksParameter = totalMarks.HasValue ?
                new ObjectParameter("TotalMarks", totalMarks) :
                new ObjectParameter("TotalMarks", typeof(double));
    
            var obtainedMarksParameter = obtainedMarks.HasValue ?
                new ObjectParameter("ObtainedMarks", obtainedMarks) :
                new ObjectParameter("ObtainedMarks", typeof(double));
    
            var statusNameParameter = statusName != null ?
                new ObjectParameter("StatusName", statusName) :
                new ObjectParameter("StatusName", typeof(string));
    
            var queryIdParameter = queryId.HasValue ?
                new ObjectParameter("QueryId", queryId) :
                new ObjectParameter("QueryId", typeof(int));
    
            var entryTestIDParameter = entryTestID.HasValue ?
                new ObjectParameter("EntryTestID", entryTestID) :
                new ObjectParameter("EntryTestID", typeof(int));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertEntryTestInterviewMarks", formNoParameter, degreeIDParameter, totalMarksParameter, obtainedMarksParameter, statusNameParameter, queryIdParameter, entryTestIDParameter, createdByParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> InsertExamDate(Nullable<int> examID, string examDateTitle, Nullable<int> createdBy)
        {
            var examIDParameter = examID.HasValue ?
                new ObjectParameter("ExamID", examID) :
                new ObjectParameter("ExamID", typeof(int));
    
            var examDateTitleParameter = examDateTitle != null ?
                new ObjectParameter("ExamDateTitle", examDateTitle) :
                new ObjectParameter("ExamDateTitle", typeof(string));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("InsertExamDate", examIDParameter, examDateTitleParameter, createdByParameter);
        }
    
        public virtual int InsertExamDatesheetDetail(Nullable<int> examID, Nullable<int> yearSemesterNo1, Nullable<int> yearSemesterNo2, Nullable<int> yearSemesterNo3, Nullable<int> yearSemesterNo4, Nullable<int> yearSemesterNo5, Nullable<int> yearSemesterNo6, Nullable<int> yearSemesterNo7, Nullable<int> yearSemesterNo8, Nullable<int> examDateTimeSlotID, Nullable<System.DateTime> createdOn, Nullable<int> createdBy)
        {
            var examIDParameter = examID.HasValue ?
                new ObjectParameter("ExamID", examID) :
                new ObjectParameter("ExamID", typeof(int));
    
            var yearSemesterNo1Parameter = yearSemesterNo1.HasValue ?
                new ObjectParameter("YearSemesterNo1", yearSemesterNo1) :
                new ObjectParameter("YearSemesterNo1", typeof(int));
    
            var yearSemesterNo2Parameter = yearSemesterNo2.HasValue ?
                new ObjectParameter("YearSemesterNo2", yearSemesterNo2) :
                new ObjectParameter("YearSemesterNo2", typeof(int));
    
            var yearSemesterNo3Parameter = yearSemesterNo3.HasValue ?
                new ObjectParameter("YearSemesterNo3", yearSemesterNo3) :
                new ObjectParameter("YearSemesterNo3", typeof(int));
    
            var yearSemesterNo4Parameter = yearSemesterNo4.HasValue ?
                new ObjectParameter("YearSemesterNo4", yearSemesterNo4) :
                new ObjectParameter("YearSemesterNo4", typeof(int));
    
            var yearSemesterNo5Parameter = yearSemesterNo5.HasValue ?
                new ObjectParameter("YearSemesterNo5", yearSemesterNo5) :
                new ObjectParameter("YearSemesterNo5", typeof(int));
    
            var yearSemesterNo6Parameter = yearSemesterNo6.HasValue ?
                new ObjectParameter("YearSemesterNo6", yearSemesterNo6) :
                new ObjectParameter("YearSemesterNo6", typeof(int));
    
            var yearSemesterNo7Parameter = yearSemesterNo7.HasValue ?
                new ObjectParameter("YearSemesterNo7", yearSemesterNo7) :
                new ObjectParameter("YearSemesterNo7", typeof(int));
    
            var yearSemesterNo8Parameter = yearSemesterNo8.HasValue ?
                new ObjectParameter("YearSemesterNo8", yearSemesterNo8) :
                new ObjectParameter("YearSemesterNo8", typeof(int));
    
            var examDateTimeSlotIDParameter = examDateTimeSlotID.HasValue ?
                new ObjectParameter("ExamDateTimeSlotID", examDateTimeSlotID) :
                new ObjectParameter("ExamDateTimeSlotID", typeof(int));
    
            var createdOnParameter = createdOn.HasValue ?
                new ObjectParameter("createdOn", createdOn) :
                new ObjectParameter("createdOn", typeof(System.DateTime));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("createdBy", createdBy) :
                new ObjectParameter("createdBy", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertExamDatesheetDetail", examIDParameter, yearSemesterNo1Parameter, yearSemesterNo2Parameter, yearSemesterNo3Parameter, yearSemesterNo4Parameter, yearSemesterNo5Parameter, yearSemesterNo6Parameter, yearSemesterNo7Parameter, yearSemesterNo8Parameter, examDateTimeSlotIDParameter, createdOnParameter, createdByParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> InsertExamEligibleStudent(Nullable<int> studentBatchProgramCourseID, Nullable<int> examsDateSheetDetailID, Nullable<System.DateTime> createdOn, Nullable<int> createdBy)
        {
            var studentBatchProgramCourseIDParameter = studentBatchProgramCourseID.HasValue ?
                new ObjectParameter("StudentBatchProgramCourseID", studentBatchProgramCourseID) :
                new ObjectParameter("StudentBatchProgramCourseID", typeof(int));
    
            var examsDateSheetDetailIDParameter = examsDateSheetDetailID.HasValue ?
                new ObjectParameter("ExamsDateSheetDetailID", examsDateSheetDetailID) :
                new ObjectParameter("ExamsDateSheetDetailID", typeof(int));
    
            var createdOnParameter = createdOn.HasValue ?
                new ObjectParameter("CreatedOn", createdOn) :
                new ObjectParameter("CreatedOn", typeof(System.DateTime));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("InsertExamEligibleStudent", studentBatchProgramCourseIDParameter, examsDateSheetDetailIDParameter, createdOnParameter, createdByParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> InsertExamRosterDetail(Nullable<int> dutyRosterID, Nullable<int> examsDateSheetDetailID, Nullable<int> roomID, Nullable<int> createdBy)
        {
            var dutyRosterIDParameter = dutyRosterID.HasValue ?
                new ObjectParameter("DutyRosterID", dutyRosterID) :
                new ObjectParameter("DutyRosterID", typeof(int));
    
            var examsDateSheetDetailIDParameter = examsDateSheetDetailID.HasValue ?
                new ObjectParameter("ExamsDateSheetDetailID", examsDateSheetDetailID) :
                new ObjectParameter("ExamsDateSheetDetailID", typeof(int));
    
            var roomIDParameter = roomID.HasValue ?
                new ObjectParameter("RoomID", roomID) :
                new ObjectParameter("RoomID", typeof(int));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("InsertExamRosterDetail", dutyRosterIDParameter, examsDateSheetDetailIDParameter, roomIDParameter, createdByParameter);
        }
    
        public virtual int InsertFormSaleDetail(Nullable<int> formID, string formNo, Nullable<int> formTypeID, string formPrice, string formDescription, Nullable<int> depositTypeID, Nullable<int> batchProgramID, string fatherName, string phoneNo, string cNIC, string depositSlipNo, string purchaseDate, Nullable<int> accountID, Nullable<int> createdBy, string isActive, Nullable<int> modifiedBy, string isReceived, string receiveDate, string firstName, string lastName, Nullable<int> degreeID, string wavier_Discount)
        {
            var formIDParameter = formID.HasValue ?
                new ObjectParameter("FormID", formID) :
                new ObjectParameter("FormID", typeof(int));
    
            var formNoParameter = formNo != null ?
                new ObjectParameter("FormNo", formNo) :
                new ObjectParameter("FormNo", typeof(string));
    
            var formTypeIDParameter = formTypeID.HasValue ?
                new ObjectParameter("FormTypeID", formTypeID) :
                new ObjectParameter("FormTypeID", typeof(int));
    
            var formPriceParameter = formPrice != null ?
                new ObjectParameter("FormPrice", formPrice) :
                new ObjectParameter("FormPrice", typeof(string));
    
            var formDescriptionParameter = formDescription != null ?
                new ObjectParameter("FormDescription", formDescription) :
                new ObjectParameter("FormDescription", typeof(string));
    
            var depositTypeIDParameter = depositTypeID.HasValue ?
                new ObjectParameter("DepositTypeID", depositTypeID) :
                new ObjectParameter("DepositTypeID", typeof(int));
    
            var batchProgramIDParameter = batchProgramID.HasValue ?
                new ObjectParameter("BatchProgramID", batchProgramID) :
                new ObjectParameter("BatchProgramID", typeof(int));
    
            var fatherNameParameter = fatherName != null ?
                new ObjectParameter("FatherName", fatherName) :
                new ObjectParameter("FatherName", typeof(string));
    
            var phoneNoParameter = phoneNo != null ?
                new ObjectParameter("PhoneNo", phoneNo) :
                new ObjectParameter("PhoneNo", typeof(string));
    
            var cNICParameter = cNIC != null ?
                new ObjectParameter("CNIC", cNIC) :
                new ObjectParameter("CNIC", typeof(string));
    
            var depositSlipNoParameter = depositSlipNo != null ?
                new ObjectParameter("DepositSlipNo", depositSlipNo) :
                new ObjectParameter("DepositSlipNo", typeof(string));
    
            var purchaseDateParameter = purchaseDate != null ?
                new ObjectParameter("PurchaseDate", purchaseDate) :
                new ObjectParameter("PurchaseDate", typeof(string));
    
            var accountIDParameter = accountID.HasValue ?
                new ObjectParameter("AccountID", accountID) :
                new ObjectParameter("AccountID", typeof(int));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(int));
    
            var isActiveParameter = isActive != null ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(string));
    
            var modifiedByParameter = modifiedBy.HasValue ?
                new ObjectParameter("ModifiedBy", modifiedBy) :
                new ObjectParameter("ModifiedBy", typeof(int));
    
            var isReceivedParameter = isReceived != null ?
                new ObjectParameter("IsReceived", isReceived) :
                new ObjectParameter("IsReceived", typeof(string));
    
            var receiveDateParameter = receiveDate != null ?
                new ObjectParameter("ReceiveDate", receiveDate) :
                new ObjectParameter("ReceiveDate", typeof(string));
    
            var firstNameParameter = firstName != null ?
                new ObjectParameter("FirstName", firstName) :
                new ObjectParameter("FirstName", typeof(string));
    
            var lastNameParameter = lastName != null ?
                new ObjectParameter("LastName", lastName) :
                new ObjectParameter("LastName", typeof(string));
    
            var degreeIDParameter = degreeID.HasValue ?
                new ObjectParameter("DegreeID", degreeID) :
                new ObjectParameter("DegreeID", typeof(int));
    
            var wavier_DiscountParameter = wavier_Discount != null ?
                new ObjectParameter("Wavier_Discount", wavier_Discount) :
                new ObjectParameter("Wavier_Discount", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertFormSaleDetail", formIDParameter, formNoParameter, formTypeIDParameter, formPriceParameter, formDescriptionParameter, depositTypeIDParameter, batchProgramIDParameter, fatherNameParameter, phoneNoParameter, cNICParameter, depositSlipNoParameter, purchaseDateParameter, accountIDParameter, createdByParameter, isActiveParameter, modifiedByParameter, isReceivedParameter, receiveDateParameter, firstNameParameter, lastNameParameter, degreeIDParameter, wavier_DiscountParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> InsertLMSStudentQuizAttempt(Nullable<int> lMSWeekDetailAttemptID, Nullable<int> lMSWeekDetailID, Nullable<int> lMSWeekID, Nullable<int> weekListTypeID, Nullable<int> studentID, Nullable<bool> isAttempt, Nullable<int> createdBy, Nullable<int> modifiedBy, string isActive)
        {
            var lMSWeekDetailAttemptIDParameter = lMSWeekDetailAttemptID.HasValue ?
                new ObjectParameter("LMSWeekDetailAttemptID", lMSWeekDetailAttemptID) :
                new ObjectParameter("LMSWeekDetailAttemptID", typeof(int));
    
            var lMSWeekDetailIDParameter = lMSWeekDetailID.HasValue ?
                new ObjectParameter("LMSWeekDetailID", lMSWeekDetailID) :
                new ObjectParameter("LMSWeekDetailID", typeof(int));
    
            var lMSWeekIDParameter = lMSWeekID.HasValue ?
                new ObjectParameter("LMSWeekID", lMSWeekID) :
                new ObjectParameter("LMSWeekID", typeof(int));
    
            var weekListTypeIDParameter = weekListTypeID.HasValue ?
                new ObjectParameter("WeekListTypeID", weekListTypeID) :
                new ObjectParameter("WeekListTypeID", typeof(int));
    
            var studentIDParameter = studentID.HasValue ?
                new ObjectParameter("StudentID", studentID) :
                new ObjectParameter("StudentID", typeof(int));
    
            var isAttemptParameter = isAttempt.HasValue ?
                new ObjectParameter("IsAttempt", isAttempt) :
                new ObjectParameter("IsAttempt", typeof(bool));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(int));
    
            var modifiedByParameter = modifiedBy.HasValue ?
                new ObjectParameter("ModifiedBy", modifiedBy) :
                new ObjectParameter("ModifiedBy", typeof(int));
    
            var isActiveParameter = isActive != null ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("InsertLMSStudentQuizAttempt", lMSWeekDetailAttemptIDParameter, lMSWeekDetailIDParameter, lMSWeekIDParameter, weekListTypeIDParameter, studentIDParameter, isAttemptParameter, createdByParameter, modifiedByParameter, isActiveParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> InsertLMSStudentQuizAttemptDetail(Nullable<int> lMSStudentQuizAttemptID, Nullable<int> lMSQuizIQuestionD, Nullable<int> lMSQuizID, Nullable<int> lMSQuestionTypeID, Nullable<int> studentID, Nullable<bool> isNegativeMarking, Nullable<bool> answerMCQ1, Nullable<bool> answerMCQ2, Nullable<bool> answerMCQ3, Nullable<bool> answerMCQ4, Nullable<bool> answerTrueFalse, Nullable<bool> answerSCQ1, Nullable<bool> answerSCQ2, Nullable<bool> answerSCQ3, Nullable<bool> answerSCQ4, Nullable<bool> overallAnswer, Nullable<decimal> questionMarks, Nullable<decimal> obtainMarks, Nullable<System.DateTime> createdOn, Nullable<int> createdBy, string isActive, Nullable<System.DateTime> modifiedOn, Nullable<int> modifiedBy)
        {
            var lMSStudentQuizAttemptIDParameter = lMSStudentQuizAttemptID.HasValue ?
                new ObjectParameter("LMSStudentQuizAttemptID", lMSStudentQuizAttemptID) :
                new ObjectParameter("LMSStudentQuizAttemptID", typeof(int));
    
            var lMSQuizIQuestionDParameter = lMSQuizIQuestionD.HasValue ?
                new ObjectParameter("LMSQuizIQuestionD", lMSQuizIQuestionD) :
                new ObjectParameter("LMSQuizIQuestionD", typeof(int));
    
            var lMSQuizIDParameter = lMSQuizID.HasValue ?
                new ObjectParameter("LMSQuizID", lMSQuizID) :
                new ObjectParameter("LMSQuizID", typeof(int));
    
            var lMSQuestionTypeIDParameter = lMSQuestionTypeID.HasValue ?
                new ObjectParameter("LMSQuestionTypeID", lMSQuestionTypeID) :
                new ObjectParameter("LMSQuestionTypeID", typeof(int));
    
            var studentIDParameter = studentID.HasValue ?
                new ObjectParameter("StudentID", studentID) :
                new ObjectParameter("StudentID", typeof(int));
    
            var isNegativeMarkingParameter = isNegativeMarking.HasValue ?
                new ObjectParameter("IsNegativeMarking", isNegativeMarking) :
                new ObjectParameter("IsNegativeMarking", typeof(bool));
    
            var answerMCQ1Parameter = answerMCQ1.HasValue ?
                new ObjectParameter("AnswerMCQ1", answerMCQ1) :
                new ObjectParameter("AnswerMCQ1", typeof(bool));
    
            var answerMCQ2Parameter = answerMCQ2.HasValue ?
                new ObjectParameter("AnswerMCQ2", answerMCQ2) :
                new ObjectParameter("AnswerMCQ2", typeof(bool));
    
            var answerMCQ3Parameter = answerMCQ3.HasValue ?
                new ObjectParameter("AnswerMCQ3", answerMCQ3) :
                new ObjectParameter("AnswerMCQ3", typeof(bool));
    
            var answerMCQ4Parameter = answerMCQ4.HasValue ?
                new ObjectParameter("AnswerMCQ4", answerMCQ4) :
                new ObjectParameter("AnswerMCQ4", typeof(bool));
    
            var answerTrueFalseParameter = answerTrueFalse.HasValue ?
                new ObjectParameter("AnswerTrueFalse", answerTrueFalse) :
                new ObjectParameter("AnswerTrueFalse", typeof(bool));
    
            var answerSCQ1Parameter = answerSCQ1.HasValue ?
                new ObjectParameter("AnswerSCQ1", answerSCQ1) :
                new ObjectParameter("AnswerSCQ1", typeof(bool));
    
            var answerSCQ2Parameter = answerSCQ2.HasValue ?
                new ObjectParameter("AnswerSCQ2", answerSCQ2) :
                new ObjectParameter("AnswerSCQ2", typeof(bool));
    
            var answerSCQ3Parameter = answerSCQ3.HasValue ?
                new ObjectParameter("AnswerSCQ3", answerSCQ3) :
                new ObjectParameter("AnswerSCQ3", typeof(bool));
    
            var answerSCQ4Parameter = answerSCQ4.HasValue ?
                new ObjectParameter("AnswerSCQ4", answerSCQ4) :
                new ObjectParameter("AnswerSCQ4", typeof(bool));
    
            var overallAnswerParameter = overallAnswer.HasValue ?
                new ObjectParameter("OverallAnswer", overallAnswer) :
                new ObjectParameter("OverallAnswer", typeof(bool));
    
            var questionMarksParameter = questionMarks.HasValue ?
                new ObjectParameter("QuestionMarks", questionMarks) :
                new ObjectParameter("QuestionMarks", typeof(decimal));
    
            var obtainMarksParameter = obtainMarks.HasValue ?
                new ObjectParameter("ObtainMarks", obtainMarks) :
                new ObjectParameter("ObtainMarks", typeof(decimal));
    
            var createdOnParameter = createdOn.HasValue ?
                new ObjectParameter("CreatedOn", createdOn) :
                new ObjectParameter("CreatedOn", typeof(System.DateTime));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(int));
    
            var isActiveParameter = isActive != null ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(string));
    
            var modifiedOnParameter = modifiedOn.HasValue ?
                new ObjectParameter("ModifiedOn", modifiedOn) :
                new ObjectParameter("ModifiedOn", typeof(System.DateTime));
    
            var modifiedByParameter = modifiedBy.HasValue ?
                new ObjectParameter("ModifiedBy", modifiedBy) :
                new ObjectParameter("ModifiedBy", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("InsertLMSStudentQuizAttemptDetail", lMSStudentQuizAttemptIDParameter, lMSQuizIQuestionDParameter, lMSQuizIDParameter, lMSQuestionTypeIDParameter, studentIDParameter, isNegativeMarkingParameter, answerMCQ1Parameter, answerMCQ2Parameter, answerMCQ3Parameter, answerMCQ4Parameter, answerTrueFalseParameter, answerSCQ1Parameter, answerSCQ2Parameter, answerSCQ3Parameter, answerSCQ4Parameter, overallAnswerParameter, questionMarksParameter, obtainMarksParameter, createdOnParameter, createdByParameter, isActiveParameter, modifiedOnParameter, modifiedByParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> InsertOrUpdateEmployeePagesRight(Nullable<int> emp_ID, Nullable<int> module_ID, Nullable<int> page_ID, Nullable<int> iD, Nullable<int> modulePriority, Nullable<int> pagePriority, Nullable<bool> isChecked)
        {
            var emp_IDParameter = emp_ID.HasValue ?
                new ObjectParameter("Emp_ID", emp_ID) :
                new ObjectParameter("Emp_ID", typeof(int));
    
            var module_IDParameter = module_ID.HasValue ?
                new ObjectParameter("Module_ID", module_ID) :
                new ObjectParameter("Module_ID", typeof(int));
    
            var page_IDParameter = page_ID.HasValue ?
                new ObjectParameter("Page_ID", page_ID) :
                new ObjectParameter("Page_ID", typeof(int));
    
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var modulePriorityParameter = modulePriority.HasValue ?
                new ObjectParameter("ModulePriority", modulePriority) :
                new ObjectParameter("ModulePriority", typeof(int));
    
            var pagePriorityParameter = pagePriority.HasValue ?
                new ObjectParameter("PagePriority", pagePriority) :
                new ObjectParameter("PagePriority", typeof(int));
    
            var isCheckedParameter = isChecked.HasValue ?
                new ObjectParameter("IsChecked", isChecked) :
                new ObjectParameter("IsChecked", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("InsertOrUpdateEmployeePagesRight", emp_IDParameter, module_IDParameter, page_IDParameter, iDParameter, modulePriorityParameter, pagePriorityParameter, isCheckedParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> InsertOrUpdateExamEligibleStudentForExam(Nullable<int> examEligibleStudentForExamID, Nullable<int> examID, Nullable<int> studentBatchProgramCourseID, Nullable<int> isEligible, string remarks, Nullable<System.DateTime> createdOn, Nullable<int> createdBy, string isActive, Nullable<System.DateTime> modifiedOn, Nullable<int> modifiedBy)
        {
            var examEligibleStudentForExamIDParameter = examEligibleStudentForExamID.HasValue ?
                new ObjectParameter("ExamEligibleStudentForExamID", examEligibleStudentForExamID) :
                new ObjectParameter("ExamEligibleStudentForExamID", typeof(int));
    
            var examIDParameter = examID.HasValue ?
                new ObjectParameter("ExamID", examID) :
                new ObjectParameter("ExamID", typeof(int));
    
            var studentBatchProgramCourseIDParameter = studentBatchProgramCourseID.HasValue ?
                new ObjectParameter("StudentBatchProgramCourseID", studentBatchProgramCourseID) :
                new ObjectParameter("StudentBatchProgramCourseID", typeof(int));
    
            var isEligibleParameter = isEligible.HasValue ?
                new ObjectParameter("IsEligible", isEligible) :
                new ObjectParameter("IsEligible", typeof(int));
    
            var remarksParameter = remarks != null ?
                new ObjectParameter("Remarks", remarks) :
                new ObjectParameter("Remarks", typeof(string));
    
            var createdOnParameter = createdOn.HasValue ?
                new ObjectParameter("CreatedOn", createdOn) :
                new ObjectParameter("CreatedOn", typeof(System.DateTime));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(int));
    
            var isActiveParameter = isActive != null ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(string));
    
            var modifiedOnParameter = modifiedOn.HasValue ?
                new ObjectParameter("ModifiedOn", modifiedOn) :
                new ObjectParameter("ModifiedOn", typeof(System.DateTime));
    
            var modifiedByParameter = modifiedBy.HasValue ?
                new ObjectParameter("ModifiedBy", modifiedBy) :
                new ObjectParameter("ModifiedBy", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("InsertOrUpdateExamEligibleStudentForExam", examEligibleStudentForExamIDParameter, examIDParameter, studentBatchProgramCourseIDParameter, isEligibleParameter, remarksParameter, createdOnParameter, createdByParameter, isActiveParameter, modifiedOnParameter, modifiedByParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> InsertOrUpdateExamGradeAppealForm(Nullable<int> examGradeAppealFormID, Nullable<int> examID, Nullable<int> studentID, string studentSignature, Nullable<bool> isStudentSignature, string studentComment, Nullable<bool> approveComment, Nullable<bool> notApprove, string hodComment, string hodSignature, Nullable<bool> isHodSignature, Nullable<System.DateTime> createdOn, Nullable<int> createdBy, string isActive, Nullable<System.DateTime> modifiedOn, Nullable<int> modifiedBy)
        {
            var examGradeAppealFormIDParameter = examGradeAppealFormID.HasValue ?
                new ObjectParameter("ExamGradeAppealFormID", examGradeAppealFormID) :
                new ObjectParameter("ExamGradeAppealFormID", typeof(int));
    
            var examIDParameter = examID.HasValue ?
                new ObjectParameter("ExamID", examID) :
                new ObjectParameter("ExamID", typeof(int));
    
            var studentIDParameter = studentID.HasValue ?
                new ObjectParameter("StudentID", studentID) :
                new ObjectParameter("StudentID", typeof(int));
    
            var studentSignatureParameter = studentSignature != null ?
                new ObjectParameter("StudentSignature", studentSignature) :
                new ObjectParameter("StudentSignature", typeof(string));
    
            var isStudentSignatureParameter = isStudentSignature.HasValue ?
                new ObjectParameter("IsStudentSignature", isStudentSignature) :
                new ObjectParameter("IsStudentSignature", typeof(bool));
    
            var studentCommentParameter = studentComment != null ?
                new ObjectParameter("StudentComment", studentComment) :
                new ObjectParameter("StudentComment", typeof(string));
    
            var approveCommentParameter = approveComment.HasValue ?
                new ObjectParameter("ApproveComment", approveComment) :
                new ObjectParameter("ApproveComment", typeof(bool));
    
            var notApproveParameter = notApprove.HasValue ?
                new ObjectParameter("NotApprove", notApprove) :
                new ObjectParameter("NotApprove", typeof(bool));
    
            var hodCommentParameter = hodComment != null ?
                new ObjectParameter("HodComment", hodComment) :
                new ObjectParameter("HodComment", typeof(string));
    
            var hodSignatureParameter = hodSignature != null ?
                new ObjectParameter("HodSignature", hodSignature) :
                new ObjectParameter("HodSignature", typeof(string));
    
            var isHodSignatureParameter = isHodSignature.HasValue ?
                new ObjectParameter("IsHodSignature", isHodSignature) :
                new ObjectParameter("IsHodSignature", typeof(bool));
    
            var createdOnParameter = createdOn.HasValue ?
                new ObjectParameter("CreatedOn", createdOn) :
                new ObjectParameter("CreatedOn", typeof(System.DateTime));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(int));
    
            var isActiveParameter = isActive != null ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(string));
    
            var modifiedOnParameter = modifiedOn.HasValue ?
                new ObjectParameter("ModifiedOn", modifiedOn) :
                new ObjectParameter("ModifiedOn", typeof(System.DateTime));
    
            var modifiedByParameter = modifiedBy.HasValue ?
                new ObjectParameter("ModifiedBy", modifiedBy) :
                new ObjectParameter("ModifiedBy", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("InsertOrUpdateExamGradeAppealForm", examGradeAppealFormIDParameter, examIDParameter, studentIDParameter, studentSignatureParameter, isStudentSignatureParameter, studentCommentParameter, approveCommentParameter, notApproveParameter, hodCommentParameter, hodSignatureParameter, isHodSignatureParameter, createdOnParameter, createdByParameter, isActiveParameter, modifiedOnParameter, modifiedByParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> InsertOrUpdateExamGradeAppealFormCourseDetail(Nullable<int> examGradeAppealFormCourseDetailID, Nullable<int> examGradeAppealFormID, Nullable<int> examID, Nullable<int> studentID, Nullable<int> programCourseID, Nullable<int> teacherID, string paperRecheking, Nullable<System.DateTime> createdOn, Nullable<int> createdBy, string isActive, Nullable<System.DateTime> modifiedOn, Nullable<int> modifiedBy)
        {
            var examGradeAppealFormCourseDetailIDParameter = examGradeAppealFormCourseDetailID.HasValue ?
                new ObjectParameter("ExamGradeAppealFormCourseDetailID", examGradeAppealFormCourseDetailID) :
                new ObjectParameter("ExamGradeAppealFormCourseDetailID", typeof(int));
    
            var examGradeAppealFormIDParameter = examGradeAppealFormID.HasValue ?
                new ObjectParameter("ExamGradeAppealFormID", examGradeAppealFormID) :
                new ObjectParameter("ExamGradeAppealFormID", typeof(int));
    
            var examIDParameter = examID.HasValue ?
                new ObjectParameter("ExamID", examID) :
                new ObjectParameter("ExamID", typeof(int));
    
            var studentIDParameter = studentID.HasValue ?
                new ObjectParameter("StudentID", studentID) :
                new ObjectParameter("StudentID", typeof(int));
    
            var programCourseIDParameter = programCourseID.HasValue ?
                new ObjectParameter("ProgramCourseID", programCourseID) :
                new ObjectParameter("ProgramCourseID", typeof(int));
    
            var teacherIDParameter = teacherID.HasValue ?
                new ObjectParameter("TeacherID", teacherID) :
                new ObjectParameter("TeacherID", typeof(int));
    
            var paperRechekingParameter = paperRecheking != null ?
                new ObjectParameter("PaperRecheking", paperRecheking) :
                new ObjectParameter("PaperRecheking", typeof(string));
    
            var createdOnParameter = createdOn.HasValue ?
                new ObjectParameter("CreatedOn", createdOn) :
                new ObjectParameter("CreatedOn", typeof(System.DateTime));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(int));
    
            var isActiveParameter = isActive != null ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(string));
    
            var modifiedOnParameter = modifiedOn.HasValue ?
                new ObjectParameter("ModifiedOn", modifiedOn) :
                new ObjectParameter("ModifiedOn", typeof(System.DateTime));
    
            var modifiedByParameter = modifiedBy.HasValue ?
                new ObjectParameter("ModifiedBy", modifiedBy) :
                new ObjectParameter("ModifiedBy", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("InsertOrUpdateExamGradeAppealFormCourseDetail", examGradeAppealFormCourseDetailIDParameter, examGradeAppealFormIDParameter, examIDParameter, studentIDParameter, programCourseIDParameter, teacherIDParameter, paperRechekingParameter, createdOnParameter, createdByParameter, isActiveParameter, modifiedOnParameter, modifiedByParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> InsertOrUpdateExamStudentGradeRequest(Nullable<int> examStudentSubjectChangeGradeFormID, Nullable<int> examStudentSubjectMarkID, Nullable<int> examID, Nullable<int> programCourseID, Nullable<int> studentID, Nullable<decimal> obtainOldMarks, Nullable<decimal> obtainNewMarks, Nullable<int> yearSemesterNo, string reason, string teacherName, Nullable<int> isTeacherApproveOrDisapprove, string hodName, Nullable<int> isHodApproveOrDisapprove, string deanName, Nullable<int> isDeanApproveOrDisapprove, Nullable<int> createdBy, string isActive, Nullable<int> modifiedBy)
        {
            var examStudentSubjectChangeGradeFormIDParameter = examStudentSubjectChangeGradeFormID.HasValue ?
                new ObjectParameter("ExamStudentSubjectChangeGradeFormID", examStudentSubjectChangeGradeFormID) :
                new ObjectParameter("ExamStudentSubjectChangeGradeFormID", typeof(int));
    
            var examStudentSubjectMarkIDParameter = examStudentSubjectMarkID.HasValue ?
                new ObjectParameter("ExamStudentSubjectMarkID", examStudentSubjectMarkID) :
                new ObjectParameter("ExamStudentSubjectMarkID", typeof(int));
    
            var examIDParameter = examID.HasValue ?
                new ObjectParameter("ExamID", examID) :
                new ObjectParameter("ExamID", typeof(int));
    
            var programCourseIDParameter = programCourseID.HasValue ?
                new ObjectParameter("ProgramCourseID", programCourseID) :
                new ObjectParameter("ProgramCourseID", typeof(int));
    
            var studentIDParameter = studentID.HasValue ?
                new ObjectParameter("StudentID", studentID) :
                new ObjectParameter("StudentID", typeof(int));
    
            var obtainOldMarksParameter = obtainOldMarks.HasValue ?
                new ObjectParameter("ObtainOldMarks", obtainOldMarks) :
                new ObjectParameter("ObtainOldMarks", typeof(decimal));
    
            var obtainNewMarksParameter = obtainNewMarks.HasValue ?
                new ObjectParameter("ObtainNewMarks", obtainNewMarks) :
                new ObjectParameter("ObtainNewMarks", typeof(decimal));
    
            var yearSemesterNoParameter = yearSemesterNo.HasValue ?
                new ObjectParameter("YearSemesterNo", yearSemesterNo) :
                new ObjectParameter("YearSemesterNo", typeof(int));
    
            var reasonParameter = reason != null ?
                new ObjectParameter("Reason", reason) :
                new ObjectParameter("Reason", typeof(string));
    
            var teacherNameParameter = teacherName != null ?
                new ObjectParameter("TeacherName", teacherName) :
                new ObjectParameter("TeacherName", typeof(string));
    
            var isTeacherApproveOrDisapproveParameter = isTeacherApproveOrDisapprove.HasValue ?
                new ObjectParameter("IsTeacherApproveOrDisapprove", isTeacherApproveOrDisapprove) :
                new ObjectParameter("IsTeacherApproveOrDisapprove", typeof(int));
    
            var hodNameParameter = hodName != null ?
                new ObjectParameter("HodName", hodName) :
                new ObjectParameter("HodName", typeof(string));
    
            var isHodApproveOrDisapproveParameter = isHodApproveOrDisapprove.HasValue ?
                new ObjectParameter("IsHodApproveOrDisapprove", isHodApproveOrDisapprove) :
                new ObjectParameter("IsHodApproveOrDisapprove", typeof(int));
    
            var deanNameParameter = deanName != null ?
                new ObjectParameter("DeanName", deanName) :
                new ObjectParameter("DeanName", typeof(string));
    
            var isDeanApproveOrDisapproveParameter = isDeanApproveOrDisapprove.HasValue ?
                new ObjectParameter("IsDeanApproveOrDisapprove", isDeanApproveOrDisapprove) :
                new ObjectParameter("IsDeanApproveOrDisapprove", typeof(int));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(int));
    
            var isActiveParameter = isActive != null ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(string));
    
            var modifiedByParameter = modifiedBy.HasValue ?
                new ObjectParameter("ModifiedBy", modifiedBy) :
                new ObjectParameter("ModifiedBy", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("InsertOrUpdateExamStudentGradeRequest", examStudentSubjectChangeGradeFormIDParameter, examStudentSubjectMarkIDParameter, examIDParameter, programCourseIDParameter, studentIDParameter, obtainOldMarksParameter, obtainNewMarksParameter, yearSemesterNoParameter, reasonParameter, teacherNameParameter, isTeacherApproveOrDisapproveParameter, hodNameParameter, isHodApproveOrDisapproveParameter, deanNameParameter, isDeanApproveOrDisapproveParameter, createdByParameter, isActiveParameter, modifiedByParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> InsertOrUpdateExamStudentSubjectMark(Nullable<int> examStudentSubjectMarkID, Nullable<int> examID, Nullable<int> programCourseID, Nullable<int> studentID, Nullable<decimal> totalSubjectMarks, Nullable<decimal> writtenTestMarks, Nullable<decimal> obtainWrittenTestMarks, Nullable<int> studentPresentStatusID, Nullable<int> isTeacherSubmitted, Nullable<int> createdBy, Nullable<int> modifiedBy)
        {
            var examStudentSubjectMarkIDParameter = examStudentSubjectMarkID.HasValue ?
                new ObjectParameter("ExamStudentSubjectMarkID", examStudentSubjectMarkID) :
                new ObjectParameter("ExamStudentSubjectMarkID", typeof(int));
    
            var examIDParameter = examID.HasValue ?
                new ObjectParameter("ExamID", examID) :
                new ObjectParameter("ExamID", typeof(int));
    
            var programCourseIDParameter = programCourseID.HasValue ?
                new ObjectParameter("ProgramCourseID", programCourseID) :
                new ObjectParameter("ProgramCourseID", typeof(int));
    
            var studentIDParameter = studentID.HasValue ?
                new ObjectParameter("StudentID", studentID) :
                new ObjectParameter("StudentID", typeof(int));
    
            var totalSubjectMarksParameter = totalSubjectMarks.HasValue ?
                new ObjectParameter("TotalSubjectMarks", totalSubjectMarks) :
                new ObjectParameter("TotalSubjectMarks", typeof(decimal));
    
            var writtenTestMarksParameter = writtenTestMarks.HasValue ?
                new ObjectParameter("WrittenTestMarks", writtenTestMarks) :
                new ObjectParameter("WrittenTestMarks", typeof(decimal));
    
            var obtainWrittenTestMarksParameter = obtainWrittenTestMarks.HasValue ?
                new ObjectParameter("ObtainWrittenTestMarks", obtainWrittenTestMarks) :
                new ObjectParameter("ObtainWrittenTestMarks", typeof(decimal));
    
            var studentPresentStatusIDParameter = studentPresentStatusID.HasValue ?
                new ObjectParameter("StudentPresentStatusID", studentPresentStatusID) :
                new ObjectParameter("StudentPresentStatusID", typeof(int));
    
            var isTeacherSubmittedParameter = isTeacherSubmitted.HasValue ?
                new ObjectParameter("IsTeacherSubmitted", isTeacherSubmitted) :
                new ObjectParameter("IsTeacherSubmitted", typeof(int));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(int));
    
            var modifiedByParameter = modifiedBy.HasValue ?
                new ObjectParameter("ModifiedBy", modifiedBy) :
                new ObjectParameter("ModifiedBy", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("InsertOrUpdateExamStudentSubjectMark", examStudentSubjectMarkIDParameter, examIDParameter, programCourseIDParameter, studentIDParameter, totalSubjectMarksParameter, writtenTestMarksParameter, obtainWrittenTestMarksParameter, studentPresentStatusIDParameter, isTeacherSubmittedParameter, createdByParameter, modifiedByParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> InsertOrUpdateExamStudentSubjectMarkDetail(Nullable<int> examStudentSubjectMarkDetailID, Nullable<int> examStudentSubjectMarkID, Nullable<int> examID, Nullable<int> programCourseID, Nullable<int> studentID, Nullable<int> examStudentSubjectMarkTypeID, Nullable<decimal> totalMarks, Nullable<decimal> obtainMarks, Nullable<int> studentPresentStatusID, Nullable<int> isTeacherSubmitted, Nullable<int> createdBy, Nullable<int> modifiedBy)
        {
            var examStudentSubjectMarkDetailIDParameter = examStudentSubjectMarkDetailID.HasValue ?
                new ObjectParameter("ExamStudentSubjectMarkDetailID", examStudentSubjectMarkDetailID) :
                new ObjectParameter("ExamStudentSubjectMarkDetailID", typeof(int));
    
            var examStudentSubjectMarkIDParameter = examStudentSubjectMarkID.HasValue ?
                new ObjectParameter("ExamStudentSubjectMarkID", examStudentSubjectMarkID) :
                new ObjectParameter("ExamStudentSubjectMarkID", typeof(int));
    
            var examIDParameter = examID.HasValue ?
                new ObjectParameter("ExamID", examID) :
                new ObjectParameter("ExamID", typeof(int));
    
            var programCourseIDParameter = programCourseID.HasValue ?
                new ObjectParameter("ProgramCourseID", programCourseID) :
                new ObjectParameter("ProgramCourseID", typeof(int));
    
            var studentIDParameter = studentID.HasValue ?
                new ObjectParameter("StudentID", studentID) :
                new ObjectParameter("StudentID", typeof(int));
    
            var examStudentSubjectMarkTypeIDParameter = examStudentSubjectMarkTypeID.HasValue ?
                new ObjectParameter("ExamStudentSubjectMarkTypeID", examStudentSubjectMarkTypeID) :
                new ObjectParameter("ExamStudentSubjectMarkTypeID", typeof(int));
    
            var totalMarksParameter = totalMarks.HasValue ?
                new ObjectParameter("TotalMarks", totalMarks) :
                new ObjectParameter("TotalMarks", typeof(decimal));
    
            var obtainMarksParameter = obtainMarks.HasValue ?
                new ObjectParameter("ObtainMarks", obtainMarks) :
                new ObjectParameter("ObtainMarks", typeof(decimal));
    
            var studentPresentStatusIDParameter = studentPresentStatusID.HasValue ?
                new ObjectParameter("StudentPresentStatusID", studentPresentStatusID) :
                new ObjectParameter("StudentPresentStatusID", typeof(int));
    
            var isTeacherSubmittedParameter = isTeacherSubmitted.HasValue ?
                new ObjectParameter("IsTeacherSubmitted", isTeacherSubmitted) :
                new ObjectParameter("IsTeacherSubmitted", typeof(int));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(int));
    
            var modifiedByParameter = modifiedBy.HasValue ?
                new ObjectParameter("ModifiedBy", modifiedBy) :
                new ObjectParameter("ModifiedBy", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("InsertOrUpdateExamStudentSubjectMarkDetail", examStudentSubjectMarkDetailIDParameter, examStudentSubjectMarkIDParameter, examIDParameter, programCourseIDParameter, studentIDParameter, examStudentSubjectMarkTypeIDParameter, totalMarksParameter, obtainMarksParameter, studentPresentStatusIDParameter, isTeacherSubmittedParameter, createdByParameter, modifiedByParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> InsertOrUpdateOBE_CourseCLO(Nullable<int> cLOID, Nullable<int> courseID, string cLOCode, string cLOName, string description, Nullable<System.DateTime> createdOn, Nullable<int> createdBy, string isActive, Nullable<System.DateTime> modifiedOn, Nullable<int> modifiedBy)
        {
            var cLOIDParameter = cLOID.HasValue ?
                new ObjectParameter("CLOID", cLOID) :
                new ObjectParameter("CLOID", typeof(int));
    
            var courseIDParameter = courseID.HasValue ?
                new ObjectParameter("CourseID", courseID) :
                new ObjectParameter("CourseID", typeof(int));
    
            var cLOCodeParameter = cLOCode != null ?
                new ObjectParameter("CLOCode", cLOCode) :
                new ObjectParameter("CLOCode", typeof(string));
    
            var cLONameParameter = cLOName != null ?
                new ObjectParameter("CLOName", cLOName) :
                new ObjectParameter("CLOName", typeof(string));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            var createdOnParameter = createdOn.HasValue ?
                new ObjectParameter("CreatedOn", createdOn) :
                new ObjectParameter("CreatedOn", typeof(System.DateTime));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(int));
    
            var isActiveParameter = isActive != null ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(string));
    
            var modifiedOnParameter = modifiedOn.HasValue ?
                new ObjectParameter("ModifiedOn", modifiedOn) :
                new ObjectParameter("ModifiedOn", typeof(System.DateTime));
    
            var modifiedByParameter = modifiedBy.HasValue ?
                new ObjectParameter("ModifiedBy", modifiedBy) :
                new ObjectParameter("ModifiedBy", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("InsertOrUpdateOBE_CourseCLO", cLOIDParameter, courseIDParameter, cLOCodeParameter, cLONameParameter, descriptionParameter, createdOnParameter, createdByParameter, isActiveParameter, modifiedOnParameter, modifiedByParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> InsertOrUpdateOBE_ProgramPLO(Nullable<int> pLOID, Nullable<int> programID, string pLOCode, string pLOName, Nullable<int> pLOTypeID, string description, Nullable<System.DateTime> createdOn, Nullable<int> createdBy, string isActive, Nullable<System.DateTime> modifiedOn, Nullable<int> modifiedBy)
        {
            var pLOIDParameter = pLOID.HasValue ?
                new ObjectParameter("PLOID", pLOID) :
                new ObjectParameter("PLOID", typeof(int));
    
            var programIDParameter = programID.HasValue ?
                new ObjectParameter("ProgramID", programID) :
                new ObjectParameter("ProgramID", typeof(int));
    
            var pLOCodeParameter = pLOCode != null ?
                new ObjectParameter("PLOCode", pLOCode) :
                new ObjectParameter("PLOCode", typeof(string));
    
            var pLONameParameter = pLOName != null ?
                new ObjectParameter("PLOName", pLOName) :
                new ObjectParameter("PLOName", typeof(string));
    
            var pLOTypeIDParameter = pLOTypeID.HasValue ?
                new ObjectParameter("PLOTypeID", pLOTypeID) :
                new ObjectParameter("PLOTypeID", typeof(int));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            var createdOnParameter = createdOn.HasValue ?
                new ObjectParameter("CreatedOn", createdOn) :
                new ObjectParameter("CreatedOn", typeof(System.DateTime));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(int));
    
            var isActiveParameter = isActive != null ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(string));
    
            var modifiedOnParameter = modifiedOn.HasValue ?
                new ObjectParameter("ModifiedOn", modifiedOn) :
                new ObjectParameter("ModifiedOn", typeof(System.DateTime));
    
            var modifiedByParameter = modifiedBy.HasValue ?
                new ObjectParameter("ModifiedBy", modifiedBy) :
                new ObjectParameter("ModifiedBy", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("InsertOrUpdateOBE_ProgramPLO", pLOIDParameter, programIDParameter, pLOCodeParameter, pLONameParameter, pLOTypeIDParameter, descriptionParameter, createdOnParameter, createdByParameter, isActiveParameter, modifiedOnParameter, modifiedByParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> InsertOrUpdateOBE_QuestionAnswer(Nullable<int> questionAnswerID, Nullable<int> questionID, Nullable<int> isCorrectAnswer, string answerDescription, Nullable<System.DateTime> createdOn, Nullable<int> createdBy, string isActive, Nullable<System.DateTime> modifiedOn, Nullable<int> modifiedBy)
        {
            var questionAnswerIDParameter = questionAnswerID.HasValue ?
                new ObjectParameter("QuestionAnswerID", questionAnswerID) :
                new ObjectParameter("QuestionAnswerID", typeof(int));
    
            var questionIDParameter = questionID.HasValue ?
                new ObjectParameter("QuestionID", questionID) :
                new ObjectParameter("QuestionID", typeof(int));
    
            var isCorrectAnswerParameter = isCorrectAnswer.HasValue ?
                new ObjectParameter("IsCorrectAnswer", isCorrectAnswer) :
                new ObjectParameter("IsCorrectAnswer", typeof(int));
    
            var answerDescriptionParameter = answerDescription != null ?
                new ObjectParameter("AnswerDescription", answerDescription) :
                new ObjectParameter("AnswerDescription", typeof(string));
    
            var createdOnParameter = createdOn.HasValue ?
                new ObjectParameter("CreatedOn", createdOn) :
                new ObjectParameter("CreatedOn", typeof(System.DateTime));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(int));
    
            var isActiveParameter = isActive != null ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(string));
    
            var modifiedOnParameter = modifiedOn.HasValue ?
                new ObjectParameter("ModifiedOn", modifiedOn) :
                new ObjectParameter("ModifiedOn", typeof(System.DateTime));
    
            var modifiedByParameter = modifiedBy.HasValue ?
                new ObjectParameter("ModifiedBy", modifiedBy) :
                new ObjectParameter("ModifiedBy", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("InsertOrUpdateOBE_QuestionAnswer", questionAnswerIDParameter, questionIDParameter, isCorrectAnswerParameter, answerDescriptionParameter, createdOnParameter, createdByParameter, isActiveParameter, modifiedOnParameter, modifiedByParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> InsertOrUpdateOBE_QuestionBank(Nullable<int> questionID, Nullable<int> levelID, Nullable<int> questionTypeID, string questionName, string description, Nullable<System.DateTime> createdOn, Nullable<int> createdBy, string isActive, Nullable<System.DateTime> modifiedOn, Nullable<int> modifiedBy)
        {
            var questionIDParameter = questionID.HasValue ?
                new ObjectParameter("QuestionID", questionID) :
                new ObjectParameter("QuestionID", typeof(int));
    
            var levelIDParameter = levelID.HasValue ?
                new ObjectParameter("LevelID", levelID) :
                new ObjectParameter("LevelID", typeof(int));
    
            var questionTypeIDParameter = questionTypeID.HasValue ?
                new ObjectParameter("QuestionTypeID", questionTypeID) :
                new ObjectParameter("QuestionTypeID", typeof(int));
    
            var questionNameParameter = questionName != null ?
                new ObjectParameter("QuestionName", questionName) :
                new ObjectParameter("QuestionName", typeof(string));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            var createdOnParameter = createdOn.HasValue ?
                new ObjectParameter("CreatedOn", createdOn) :
                new ObjectParameter("CreatedOn", typeof(System.DateTime));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(int));
    
            var isActiveParameter = isActive != null ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(string));
    
            var modifiedOnParameter = modifiedOn.HasValue ?
                new ObjectParameter("ModifiedOn", modifiedOn) :
                new ObjectParameter("ModifiedOn", typeof(System.DateTime));
    
            var modifiedByParameter = modifiedBy.HasValue ?
                new ObjectParameter("ModifiedBy", modifiedBy) :
                new ObjectParameter("ModifiedBy", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("InsertOrUpdateOBE_QuestionBank", questionIDParameter, levelIDParameter, questionTypeIDParameter, questionNameParameter, descriptionParameter, createdOnParameter, createdByParameter, isActiveParameter, modifiedOnParameter, modifiedByParameter);
        }
    
        public virtual ObjectResult<InsertOrValidateStudentQuizAttempt_Result> InsertOrValidateStudentQuizAttempt(Nullable<int> lMSQuizID, Nullable<int> studentID, Nullable<int> createdBy, Nullable<int> modifiedBy)
        {
            var lMSQuizIDParameter = lMSQuizID.HasValue ?
                new ObjectParameter("LMSQuizID", lMSQuizID) :
                new ObjectParameter("LMSQuizID", typeof(int));
    
            var studentIDParameter = studentID.HasValue ?
                new ObjectParameter("StudentID", studentID) :
                new ObjectParameter("StudentID", typeof(int));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(int));
    
            var modifiedByParameter = modifiedBy.HasValue ?
                new ObjectParameter("ModifiedBy", modifiedBy) :
                new ObjectParameter("ModifiedBy", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<InsertOrValidateStudentQuizAttempt_Result>("InsertOrValidateStudentQuizAttempt", lMSQuizIDParameter, studentIDParameter, createdByParameter, modifiedByParameter);
        }
    
        public virtual int InsertPostedVouchers(Nullable<int> formID)
        {
            var formIDParameter = formID.HasValue ?
                new ObjectParameter("FormID", formID) :
                new ObjectParameter("FormID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertPostedVouchers", formIDParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> InsertStudentAttandance(Nullable<int> batchProgramID, Nullable<int> yearSemesterNo, Nullable<int> courseID, Nullable<int> studentID, Nullable<int> teacherID, Nullable<int> studentPresentStatusID, Nullable<System.DateTime> presentDate, Nullable<System.DateTime> createdOn, Nullable<int> createdBy, string isActive, Nullable<System.DateTime> modifiedOn, Nullable<int> modifiedBy)
        {
            var batchProgramIDParameter = batchProgramID.HasValue ?
                new ObjectParameter("BatchProgramID", batchProgramID) :
                new ObjectParameter("BatchProgramID", typeof(int));
    
            var yearSemesterNoParameter = yearSemesterNo.HasValue ?
                new ObjectParameter("YearSemesterNo", yearSemesterNo) :
                new ObjectParameter("YearSemesterNo", typeof(int));
    
            var courseIDParameter = courseID.HasValue ?
                new ObjectParameter("CourseID", courseID) :
                new ObjectParameter("CourseID", typeof(int));
    
            var studentIDParameter = studentID.HasValue ?
                new ObjectParameter("StudentID", studentID) :
                new ObjectParameter("StudentID", typeof(int));
    
            var teacherIDParameter = teacherID.HasValue ?
                new ObjectParameter("TeacherID", teacherID) :
                new ObjectParameter("TeacherID", typeof(int));
    
            var studentPresentStatusIDParameter = studentPresentStatusID.HasValue ?
                new ObjectParameter("StudentPresentStatusID", studentPresentStatusID) :
                new ObjectParameter("StudentPresentStatusID", typeof(int));
    
            var presentDateParameter = presentDate.HasValue ?
                new ObjectParameter("PresentDate", presentDate) :
                new ObjectParameter("PresentDate", typeof(System.DateTime));
    
            var createdOnParameter = createdOn.HasValue ?
                new ObjectParameter("CreatedOn", createdOn) :
                new ObjectParameter("CreatedOn", typeof(System.DateTime));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(int));
    
            var isActiveParameter = isActive != null ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(string));
    
            var modifiedOnParameter = modifiedOn.HasValue ?
                new ObjectParameter("ModifiedOn", modifiedOn) :
                new ObjectParameter("ModifiedOn", typeof(System.DateTime));
    
            var modifiedByParameter = modifiedBy.HasValue ?
                new ObjectParameter("ModifiedBy", modifiedBy) :
                new ObjectParameter("ModifiedBy", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("InsertStudentAttandance", batchProgramIDParameter, yearSemesterNoParameter, courseIDParameter, studentIDParameter, teacherIDParameter, studentPresentStatusIDParameter, presentDateParameter, createdOnParameter, createdByParameter, isActiveParameter, modifiedOnParameter, modifiedByParameter);
        }
    
        public virtual int InsertStudentBatchProgramCourse(Nullable<int> programCourseID, Nullable<int> studentID, Nullable<int> courseID, Nullable<int> yearSemesterNo, Nullable<int> batchProgramID, Nullable<int> createdBy, string isActive, Nullable<int> queryID)
        {
            var programCourseIDParameter = programCourseID.HasValue ?
                new ObjectParameter("ProgramCourseID", programCourseID) :
                new ObjectParameter("ProgramCourseID", typeof(int));
    
            var studentIDParameter = studentID.HasValue ?
                new ObjectParameter("StudentID", studentID) :
                new ObjectParameter("StudentID", typeof(int));
    
            var courseIDParameter = courseID.HasValue ?
                new ObjectParameter("CourseID", courseID) :
                new ObjectParameter("CourseID", typeof(int));
    
            var yearSemesterNoParameter = yearSemesterNo.HasValue ?
                new ObjectParameter("YearSemesterNo", yearSemesterNo) :
                new ObjectParameter("YearSemesterNo", typeof(int));
    
            var batchProgramIDParameter = batchProgramID.HasValue ?
                new ObjectParameter("BatchProgramID", batchProgramID) :
                new ObjectParameter("BatchProgramID", typeof(int));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(int));
    
            var isActiveParameter = isActive != null ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(string));
    
            var queryIDParameter = queryID.HasValue ?
                new ObjectParameter("QueryID", queryID) :
                new ObjectParameter("QueryID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertStudentBatchProgramCourse", programCourseIDParameter, studentIDParameter, courseIDParameter, yearSemesterNoParameter, batchProgramIDParameter, createdByParameter, isActiveParameter, queryIDParameter);
        }
    
        public virtual int InsertTimeTable(Nullable<int> timeSlotID, Nullable<int> tCourseAllocationID, Nullable<int> isDelete)
        {
            var timeSlotIDParameter = timeSlotID.HasValue ?
                new ObjectParameter("TimeSlotID", timeSlotID) :
                new ObjectParameter("TimeSlotID", typeof(int));
    
            var tCourseAllocationIDParameter = tCourseAllocationID.HasValue ?
                new ObjectParameter("TCourseAllocationID", tCourseAllocationID) :
                new ObjectParameter("TCourseAllocationID", typeof(int));
    
            var isDeleteParameter = isDelete.HasValue ?
                new ObjectParameter("IsDelete", isDelete) :
                new ObjectParameter("IsDelete", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertTimeTable", timeSlotIDParameter, tCourseAllocationIDParameter, isDeleteParameter);
        }
    
        public virtual int InsertUserChatMessages(Nullable<int> userChatID, Nullable<int> chatUserID1, Nullable<int> chatUserID2, Nullable<int> createdBy, Nullable<int> modifiedBy, Nullable<int> userFromID, Nullable<int> userToID, string userMessage)
        {
            var userChatIDParameter = userChatID.HasValue ?
                new ObjectParameter("UserChatID", userChatID) :
                new ObjectParameter("UserChatID", typeof(int));
    
            var chatUserID1Parameter = chatUserID1.HasValue ?
                new ObjectParameter("ChatUserID1", chatUserID1) :
                new ObjectParameter("ChatUserID1", typeof(int));
    
            var chatUserID2Parameter = chatUserID2.HasValue ?
                new ObjectParameter("ChatUserID2", chatUserID2) :
                new ObjectParameter("ChatUserID2", typeof(int));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(int));
    
            var modifiedByParameter = modifiedBy.HasValue ?
                new ObjectParameter("ModifiedBy", modifiedBy) :
                new ObjectParameter("ModifiedBy", typeof(int));
    
            var userFromIDParameter = userFromID.HasValue ?
                new ObjectParameter("UserFromID", userFromID) :
                new ObjectParameter("UserFromID", typeof(int));
    
            var userToIDParameter = userToID.HasValue ?
                new ObjectParameter("UserToID", userToID) :
                new ObjectParameter("UserToID", typeof(int));
    
            var userMessageParameter = userMessage != null ?
                new ObjectParameter("UserMessage", userMessage) :
                new ObjectParameter("UserMessage", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertUserChatMessages", userChatIDParameter, chatUserID1Parameter, chatUserID2Parameter, createdByParameter, modifiedByParameter, userFromIDParameter, userToIDParameter, userMessageParameter);
        }
    
        public virtual int MoveStudentsToNextSemester(Nullable<int> batchProgramID, Nullable<int> yearSemesterNo, Nullable<int> studentID, Nullable<int> modifiedBy)
        {
            var batchProgramIDParameter = batchProgramID.HasValue ?
                new ObjectParameter("BatchProgramID", batchProgramID) :
                new ObjectParameter("BatchProgramID", typeof(int));
    
            var yearSemesterNoParameter = yearSemesterNo.HasValue ?
                new ObjectParameter("YearSemesterNo", yearSemesterNo) :
                new ObjectParameter("YearSemesterNo", typeof(int));
    
            var studentIDParameter = studentID.HasValue ?
                new ObjectParameter("StudentID", studentID) :
                new ObjectParameter("StudentID", typeof(int));
    
            var modifiedByParameter = modifiedBy.HasValue ?
                new ObjectParameter("ModifiedBy", modifiedBy) :
                new ObjectParameter("ModifiedBy", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("MoveStudentsToNextSemester", batchProgramIDParameter, yearSemesterNoParameter, studentIDParameter, modifiedByParameter);
        }
    
        public virtual ObjectResult<string> Post_FinancialImpact_Challan(string challanID, Nullable<decimal> emp_id, Nullable<int> subdept_ID, Nullable<int> dept_ID, string type)
        {
            var challanIDParameter = challanID != null ?
                new ObjectParameter("ChallanID", challanID) :
                new ObjectParameter("ChallanID", typeof(string));
    
            var emp_idParameter = emp_id.HasValue ?
                new ObjectParameter("emp_id", emp_id) :
                new ObjectParameter("emp_id", typeof(decimal));
    
            var subdept_IDParameter = subdept_ID.HasValue ?
                new ObjectParameter("Subdept_ID", subdept_ID) :
                new ObjectParameter("Subdept_ID", typeof(int));
    
            var dept_IDParameter = dept_ID.HasValue ?
                new ObjectParameter("Dept_ID", dept_ID) :
                new ObjectParameter("Dept_ID", typeof(int));
    
            var typeParameter = type != null ?
                new ObjectParameter("Type", type) :
                new ObjectParameter("Type", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("Post_FinancialImpact_Challan", challanIDParameter, emp_idParameter, subdept_IDParameter, dept_IDParameter, typeParameter);
        }
    
        public virtual ObjectResult<rpt_ApplicantMissingDetail_Result> rpt_ApplicantMissingDetail(Nullable<int> batchID, Nullable<int> batchProgramID, string search, Nullable<System.DateTime> datefrom, Nullable<System.DateTime> dateTo)
        {
            var batchIDParameter = batchID.HasValue ?
                new ObjectParameter("BatchID", batchID) :
                new ObjectParameter("BatchID", typeof(int));
    
            var batchProgramIDParameter = batchProgramID.HasValue ?
                new ObjectParameter("BatchProgramID", batchProgramID) :
                new ObjectParameter("BatchProgramID", typeof(int));
    
            var searchParameter = search != null ?
                new ObjectParameter("Search", search) :
                new ObjectParameter("Search", typeof(string));
    
            var datefromParameter = datefrom.HasValue ?
                new ObjectParameter("Datefrom", datefrom) :
                new ObjectParameter("Datefrom", typeof(System.DateTime));
    
            var dateToParameter = dateTo.HasValue ?
                new ObjectParameter("DateTo", dateTo) :
                new ObjectParameter("DateTo", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<rpt_ApplicantMissingDetail_Result>("rpt_ApplicantMissingDetail", batchIDParameter, batchProgramIDParameter, searchParameter, datefromParameter, dateToParameter);
        }
    
        public virtual ObjectResult<rpt_Batches_Result> rpt_Batches(string search)
        {
            var searchParameter = search != null ?
                new ObjectParameter("Search", search) :
                new ObjectParameter("Search", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<rpt_Batches_Result>("rpt_Batches", searchParameter);
        }
    
        public virtual ObjectResult<rpt_BatchProgramCourses_Result> rpt_BatchProgramCourses(string search, Nullable<int> subDept_Id)
        {
            var searchParameter = search != null ?
                new ObjectParameter("Search", search) :
                new ObjectParameter("Search", typeof(string));
    
            var subDept_IdParameter = subDept_Id.HasValue ?
                new ObjectParameter("SubDept_Id", subDept_Id) :
                new ObjectParameter("SubDept_Id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<rpt_BatchProgramCourses_Result>("rpt_BatchProgramCourses", searchParameter, subDept_IdParameter);
        }
    
        public virtual ObjectResult<rpt_BatchPrograms_Result> rpt_BatchPrograms(string search, Nullable<int> subDept_Id)
        {
            var searchParameter = search != null ?
                new ObjectParameter("Search", search) :
                new ObjectParameter("Search", typeof(string));
    
            var subDept_IdParameter = subDept_Id.HasValue ?
                new ObjectParameter("SubDept_Id", subDept_Id) :
                new ObjectParameter("SubDept_Id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<rpt_BatchPrograms_Result>("rpt_BatchPrograms", searchParameter, subDept_IdParameter);
        }
    
        public virtual ObjectResult<rpt_Courses_Result> rpt_Courses(string search)
        {
            var searchParameter = search != null ?
                new ObjectParameter("Search", search) :
                new ObjectParameter("Search", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<rpt_Courses_Result>("rpt_Courses", searchParameter);
        }
    
        public virtual ObjectResult<rpt_FormSaleSummary_Result> rpt_FormSaleSummary(Nullable<int> batchProgramID, Nullable<int> subDept_Id)
        {
            var batchProgramIDParameter = batchProgramID.HasValue ?
                new ObjectParameter("BatchProgramID", batchProgramID) :
                new ObjectParameter("BatchProgramID", typeof(int));
    
            var subDept_IdParameter = subDept_Id.HasValue ?
                new ObjectParameter("SubDept_Id", subDept_Id) :
                new ObjectParameter("SubDept_Id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<rpt_FormSaleSummary_Result>("rpt_FormSaleSummary", batchProgramIDParameter, subDept_IdParameter);
        }
    
        public virtual ObjectResult<rpt_GetAdmissionApplicantAcademicRecords_Result> rpt_GetAdmissionApplicantAcademicRecords(string formNo, Nullable<int> batchID, Nullable<int> batchProgramID, Nullable<int> subDept_Id)
        {
            var formNoParameter = formNo != null ?
                new ObjectParameter("FormNo", formNo) :
                new ObjectParameter("FormNo", typeof(string));
    
            var batchIDParameter = batchID.HasValue ?
                new ObjectParameter("BatchID", batchID) :
                new ObjectParameter("BatchID", typeof(int));
    
            var batchProgramIDParameter = batchProgramID.HasValue ?
                new ObjectParameter("BatchProgramID", batchProgramID) :
                new ObjectParameter("BatchProgramID", typeof(int));
    
            var subDept_IdParameter = subDept_Id.HasValue ?
                new ObjectParameter("SubDept_Id", subDept_Id) :
                new ObjectParameter("SubDept_Id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<rpt_GetAdmissionApplicantAcademicRecords_Result>("rpt_GetAdmissionApplicantAcademicRecords", formNoParameter, batchIDParameter, batchProgramIDParameter, subDept_IdParameter);
        }
    
        public virtual ObjectResult<rpt_GetAdmissionApplicantAcademicRecordsPHD_Result> rpt_GetAdmissionApplicantAcademicRecordsPHD(string formNo, Nullable<int> batchID, Nullable<int> batchProgramID)
        {
            var formNoParameter = formNo != null ?
                new ObjectParameter("FormNo", formNo) :
                new ObjectParameter("FormNo", typeof(string));
    
            var batchIDParameter = batchID.HasValue ?
                new ObjectParameter("BatchID", batchID) :
                new ObjectParameter("BatchID", typeof(int));
    
            var batchProgramIDParameter = batchProgramID.HasValue ?
                new ObjectParameter("BatchProgramID", batchProgramID) :
                new ObjectParameter("BatchProgramID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<rpt_GetAdmissionApplicantAcademicRecordsPHD_Result>("rpt_GetAdmissionApplicantAcademicRecordsPHD", formNoParameter, batchIDParameter, batchProgramIDParameter);
        }
    
        public virtual ObjectResult<rpt_GetAdmissionApplicantMeritList_Result> rpt_GetAdmissionApplicantMeritList(Nullable<int> facultyID, string formNo, Nullable<int> batchID, Nullable<int> batchProgramID, Nullable<int> entryTestID, string applicantStatus, Nullable<int> queryID)
        {
            var facultyIDParameter = facultyID.HasValue ?
                new ObjectParameter("FacultyID", facultyID) :
                new ObjectParameter("FacultyID", typeof(int));
    
            var formNoParameter = formNo != null ?
                new ObjectParameter("FormNo", formNo) :
                new ObjectParameter("FormNo", typeof(string));
    
            var batchIDParameter = batchID.HasValue ?
                new ObjectParameter("BatchID", batchID) :
                new ObjectParameter("BatchID", typeof(int));
    
            var batchProgramIDParameter = batchProgramID.HasValue ?
                new ObjectParameter("BatchProgramID", batchProgramID) :
                new ObjectParameter("BatchProgramID", typeof(int));
    
            var entryTestIDParameter = entryTestID.HasValue ?
                new ObjectParameter("EntryTestID", entryTestID) :
                new ObjectParameter("EntryTestID", typeof(int));
    
            var applicantStatusParameter = applicantStatus != null ?
                new ObjectParameter("ApplicantStatus", applicantStatus) :
                new ObjectParameter("ApplicantStatus", typeof(string));
    
            var queryIDParameter = queryID.HasValue ?
                new ObjectParameter("QueryID", queryID) :
                new ObjectParameter("QueryID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<rpt_GetAdmissionApplicantMeritList_Result>("rpt_GetAdmissionApplicantMeritList", facultyIDParameter, formNoParameter, batchIDParameter, batchProgramIDParameter, entryTestIDParameter, applicantStatusParameter, queryIDParameter);
        }
    
        public virtual ObjectResult<rpt_GetAdmissionApplicantsSummery_Result> rpt_GetAdmissionApplicantsSummery(Nullable<int> batchID, Nullable<int> programID, string search, Nullable<System.DateTime> datefrom, Nullable<System.DateTime> dateTo)
        {
            var batchIDParameter = batchID.HasValue ?
                new ObjectParameter("BatchID", batchID) :
                new ObjectParameter("BatchID", typeof(int));
    
            var programIDParameter = programID.HasValue ?
                new ObjectParameter("ProgramID", programID) :
                new ObjectParameter("ProgramID", typeof(int));
    
            var searchParameter = search != null ?
                new ObjectParameter("Search", search) :
                new ObjectParameter("Search", typeof(string));
    
            var datefromParameter = datefrom.HasValue ?
                new ObjectParameter("Datefrom", datefrom) :
                new ObjectParameter("Datefrom", typeof(System.DateTime));
    
            var dateToParameter = dateTo.HasValue ?
                new ObjectParameter("DateTo", dateTo) :
                new ObjectParameter("DateTo", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<rpt_GetAdmissionApplicantsSummery_Result>("rpt_GetAdmissionApplicantsSummery", batchIDParameter, programIDParameter, searchParameter, datefromParameter, dateToParameter);
        }
    
        public virtual ObjectResult<rpt_GetAdmissionApplicationDetail_Result> rpt_GetAdmissionApplicationDetail(Nullable<int> facultyID, Nullable<int> batchID, Nullable<int> batchProgramID, Nullable<int> entryTestID)
        {
            var facultyIDParameter = facultyID.HasValue ?
                new ObjectParameter("FacultyID", facultyID) :
                new ObjectParameter("FacultyID", typeof(int));
    
            var batchIDParameter = batchID.HasValue ?
                new ObjectParameter("BatchID", batchID) :
                new ObjectParameter("BatchID", typeof(int));
    
            var batchProgramIDParameter = batchProgramID.HasValue ?
                new ObjectParameter("BatchProgramID", batchProgramID) :
                new ObjectParameter("BatchProgramID", typeof(int));
    
            var entryTestIDParameter = entryTestID.HasValue ?
                new ObjectParameter("EntryTestID", entryTestID) :
                new ObjectParameter("EntryTestID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<rpt_GetAdmissionApplicationDetail_Result>("rpt_GetAdmissionApplicationDetail", facultyIDParameter, batchIDParameter, batchProgramIDParameter, entryTestIDParameter);
        }
    
        public virtual ObjectResult<rpt_GetAdmissionApplicationsMissingEntries_Result> rpt_GetAdmissionApplicationsMissingEntries(Nullable<int> batchID, Nullable<int> batchProgramID)
        {
            var batchIDParameter = batchID.HasValue ?
                new ObjectParameter("BatchID", batchID) :
                new ObjectParameter("BatchID", typeof(int));
    
            var batchProgramIDParameter = batchProgramID.HasValue ?
                new ObjectParameter("BatchProgramID", batchProgramID) :
                new ObjectParameter("BatchProgramID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<rpt_GetAdmissionApplicationsMissingEntries_Result>("rpt_GetAdmissionApplicationsMissingEntries", batchIDParameter, batchProgramIDParameter);
        }
    
        public virtual ObjectResult<rpt_GetAdmissionApplicationSubmittedDateWiseSummary_Result> rpt_GetAdmissionApplicationSubmittedDateWiseSummary(Nullable<int> batchID, Nullable<int> batchProgramID)
        {
            var batchIDParameter = batchID.HasValue ?
                new ObjectParameter("BatchID", batchID) :
                new ObjectParameter("BatchID", typeof(int));
    
            var batchProgramIDParameter = batchProgramID.HasValue ?
                new ObjectParameter("BatchProgramID", batchProgramID) :
                new ObjectParameter("BatchProgramID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<rpt_GetAdmissionApplicationSubmittedDateWiseSummary_Result>("rpt_GetAdmissionApplicationSubmittedDateWiseSummary", batchIDParameter, batchProgramIDParameter);
        }
    
        public virtual ObjectResult<rpt_GetAdmissionApplicationSummary_Result> rpt_GetAdmissionApplicationSummary(Nullable<int> facultyID, Nullable<int> batchID, Nullable<int> batchProgramID, Nullable<int> entryTestID)
        {
            var facultyIDParameter = facultyID.HasValue ?
                new ObjectParameter("FacultyID", facultyID) :
                new ObjectParameter("FacultyID", typeof(int));
    
            var batchIDParameter = batchID.HasValue ?
                new ObjectParameter("BatchID", batchID) :
                new ObjectParameter("BatchID", typeof(int));
    
            var batchProgramIDParameter = batchProgramID.HasValue ?
                new ObjectParameter("BatchProgramID", batchProgramID) :
                new ObjectParameter("BatchProgramID", typeof(int));
    
            var entryTestIDParameter = entryTestID.HasValue ?
                new ObjectParameter("EntryTestID", entryTestID) :
                new ObjectParameter("EntryTestID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<rpt_GetAdmissionApplicationSummary_Result>("rpt_GetAdmissionApplicationSummary", facultyIDParameter, batchIDParameter, batchProgramIDParameter, entryTestIDParameter);
        }
    
        public virtual ObjectResult<rpt_GetAdmissionFormSaleDetail_Result> rpt_GetAdmissionFormSaleDetail(string paramSearch, Nullable<int> batchID, Nullable<int> batchProgramID)
        {
            var paramSearchParameter = paramSearch != null ?
                new ObjectParameter("paramSearch", paramSearch) :
                new ObjectParameter("paramSearch", typeof(string));
    
            var batchIDParameter = batchID.HasValue ?
                new ObjectParameter("BatchID", batchID) :
                new ObjectParameter("BatchID", typeof(int));
    
            var batchProgramIDParameter = batchProgramID.HasValue ?
                new ObjectParameter("BatchProgramID", batchProgramID) :
                new ObjectParameter("BatchProgramID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<rpt_GetAdmissionFormSaleDetail_Result>("rpt_GetAdmissionFormSaleDetail", paramSearchParameter, batchIDParameter, batchProgramIDParameter);
        }
    
        public virtual ObjectResult<rpt_GetApplicantDetails_Result> rpt_GetApplicantDetails(string formNo)
        {
            var formNoParameter = formNo != null ?
                new ObjectParameter("FormNo", formNo) :
                new ObjectParameter("FormNo", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<rpt_GetApplicantDetails_Result>("rpt_GetApplicantDetails", formNoParameter);
        }
    
        public virtual ObjectResult<rpt_GetApplicantStudentChallans_Result> rpt_GetApplicantStudentChallans(string formNo, Nullable<int> batchID, Nullable<int> batchProgramID, Nullable<int> yearSemesterNo, string challanType, string isDeposited)
        {
            var formNoParameter = formNo != null ?
                new ObjectParameter("FormNo", formNo) :
                new ObjectParameter("FormNo", typeof(string));
    
            var batchIDParameter = batchID.HasValue ?
                new ObjectParameter("BatchID", batchID) :
                new ObjectParameter("BatchID", typeof(int));
    
            var batchProgramIDParameter = batchProgramID.HasValue ?
                new ObjectParameter("BatchProgramID", batchProgramID) :
                new ObjectParameter("BatchProgramID", typeof(int));
    
            var yearSemesterNoParameter = yearSemesterNo.HasValue ?
                new ObjectParameter("YearSemesterNo", yearSemesterNo) :
                new ObjectParameter("YearSemesterNo", typeof(int));
    
            var challanTypeParameter = challanType != null ?
                new ObjectParameter("ChallanType", challanType) :
                new ObjectParameter("ChallanType", typeof(string));
    
            var isDepositedParameter = isDeposited != null ?
                new ObjectParameter("IsDeposited", isDeposited) :
                new ObjectParameter("IsDeposited", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<rpt_GetApplicantStudentChallans_Result>("rpt_GetApplicantStudentChallans", formNoParameter, batchIDParameter, batchProgramIDParameter, yearSemesterNoParameter, challanTypeParameter, isDepositedParameter);
        }
    
        public virtual ObjectResult<rpt_GetBatchProgramStudentSummary_Result> rpt_GetBatchProgramStudentSummary(string search, Nullable<int> subDept_Id)
        {
            var searchParameter = search != null ?
                new ObjectParameter("Search", search) :
                new ObjectParameter("Search", typeof(string));
    
            var subDept_IdParameter = subDept_Id.HasValue ?
                new ObjectParameter("SubDept_Id", subDept_Id) :
                new ObjectParameter("SubDept_Id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<rpt_GetBatchProgramStudentSummary_Result>("rpt_GetBatchProgramStudentSummary", searchParameter, subDept_IdParameter);
        }
    
        public virtual ObjectResult<rpt_GetBeliTrust_Result> rpt_GetBeliTrust(string formNo)
        {
            var formNoParameter = formNo != null ?
                new ObjectParameter("FormNo", formNo) :
                new ObjectParameter("FormNo", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<rpt_GetBeliTrust_Result>("rpt_GetBeliTrust", formNoParameter);
        }
    
        public virtual ObjectResult<rpt_GetBeliTrustAffidavit_Result> rpt_GetBeliTrustAffidavit(string formNo)
        {
            var formNoParameter = formNo != null ?
                new ObjectParameter("FormNo", formNo) :
                new ObjectParameter("FormNo", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<rpt_GetBeliTrustAffidavit_Result>("rpt_GetBeliTrustAffidavit", formNoParameter);
        }
    
        public virtual ObjectResult<rpt_GetBeliTrustFamilyMembers_Result> rpt_GetBeliTrustFamilyMembers(string formNo)
        {
            var formNoParameter = formNo != null ?
                new ObjectParameter("FormNo", formNo) :
                new ObjectParameter("FormNo", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<rpt_GetBeliTrustFamilyMembers_Result>("rpt_GetBeliTrustFamilyMembers", formNoParameter);
        }
    
        public virtual ObjectResult<rpt_GetBeliTrustFinancialSupport_Result> rpt_GetBeliTrustFinancialSupport(string formNo)
        {
            var formNoParameter = formNo != null ?
                new ObjectParameter("FormNo", formNo) :
                new ObjectParameter("FormNo", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<rpt_GetBeliTrustFinancialSupport_Result>("rpt_GetBeliTrustFinancialSupport", formNoParameter);
        }
    
        public virtual ObjectResult<rpt_GetEligibleStudentsForExam_Result> rpt_GetEligibleStudentsForExam(Nullable<int> examId, Nullable<int> examSeasonID, Nullable<int> examTermID, Nullable<int> isEligible, Nullable<int> batchID, Nullable<int> batchProgramID, Nullable<int> yearSemesterNo)
        {
            var examIdParameter = examId.HasValue ?
                new ObjectParameter("ExamId", examId) :
                new ObjectParameter("ExamId", typeof(int));
    
            var examSeasonIDParameter = examSeasonID.HasValue ?
                new ObjectParameter("ExamSeasonID", examSeasonID) :
                new ObjectParameter("ExamSeasonID", typeof(int));
    
            var examTermIDParameter = examTermID.HasValue ?
                new ObjectParameter("ExamTermID", examTermID) :
                new ObjectParameter("ExamTermID", typeof(int));
    
            var isEligibleParameter = isEligible.HasValue ?
                new ObjectParameter("IsEligible", isEligible) :
                new ObjectParameter("IsEligible", typeof(int));
    
            var batchIDParameter = batchID.HasValue ?
                new ObjectParameter("BatchID", batchID) :
                new ObjectParameter("BatchID", typeof(int));
    
            var batchProgramIDParameter = batchProgramID.HasValue ?
                new ObjectParameter("BatchProgramID", batchProgramID) :
                new ObjectParameter("BatchProgramID", typeof(int));
    
            var yearSemesterNoParameter = yearSemesterNo.HasValue ?
                new ObjectParameter("YearSemesterNo", yearSemesterNo) :
                new ObjectParameter("YearSemesterNo", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<rpt_GetEligibleStudentsForExam_Result>("rpt_GetEligibleStudentsForExam", examIdParameter, examSeasonIDParameter, examTermIDParameter, isEligibleParameter, batchIDParameter, batchProgramIDParameter, yearSemesterNoParameter);
        }
    
        public virtual ObjectResult<rpt_GetEntrytestDrawingTest_Result> rpt_GetEntrytestDrawingTest(Nullable<int> facultyID, string formNo, Nullable<int> batchID, Nullable<int> batchProgramID, Nullable<int> entryTestID)
        {
            var facultyIDParameter = facultyID.HasValue ?
                new ObjectParameter("FacultyID", facultyID) :
                new ObjectParameter("FacultyID", typeof(int));
    
            var formNoParameter = formNo != null ?
                new ObjectParameter("FormNo", formNo) :
                new ObjectParameter("FormNo", typeof(string));
    
            var batchIDParameter = batchID.HasValue ?
                new ObjectParameter("BatchID", batchID) :
                new ObjectParameter("BatchID", typeof(int));
    
            var batchProgramIDParameter = batchProgramID.HasValue ?
                new ObjectParameter("BatchProgramID", batchProgramID) :
                new ObjectParameter("BatchProgramID", typeof(int));
    
            var entryTestIDParameter = entryTestID.HasValue ?
                new ObjectParameter("EntryTestID", entryTestID) :
                new ObjectParameter("EntryTestID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<rpt_GetEntrytestDrawingTest_Result>("rpt_GetEntrytestDrawingTest", facultyIDParameter, formNoParameter, batchIDParameter, batchProgramIDParameter, entryTestIDParameter);
        }
    
        public virtual ObjectResult<rpt_GetExamStudentSubjectClashReport_Result> rpt_GetExamStudentSubjectClashReport(Nullable<int> examID)
        {
            var examIDParameter = examID.HasValue ?
                new ObjectParameter("ExamID", examID) :
                new ObjectParameter("ExamID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<rpt_GetExamStudentSubjectClashReport_Result>("rpt_GetExamStudentSubjectClashReport", examIDParameter);
        }
    
        public virtual ObjectResult<rpt_GetExamStudentSubjectReport_Result> rpt_GetExamStudentSubjectReport(Nullable<int> examID)
        {
            var examIDParameter = examID.HasValue ?
                new ObjectParameter("ExamID", examID) :
                new ObjectParameter("ExamID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<rpt_GetExamStudentSubjectReport_Result>("rpt_GetExamStudentSubjectReport", examIDParameter);
        }
    
        public virtual ObjectResult<rpt_GetFormSaleDetail_Result> rpt_GetFormSaleDetail()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<rpt_GetFormSaleDetail_Result>("rpt_GetFormSaleDetail");
        }
    
        public virtual ObjectResult<rpt_GetFormSaleSlip_Result> rpt_GetFormSaleSlip(Nullable<int> formID)
        {
            var formIDParameter = formID.HasValue ?
                new ObjectParameter("FormID", formID) :
                new ObjectParameter("FormID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<rpt_GetFormSaleSlip_Result>("rpt_GetFormSaleSlip", formIDParameter);
        }
    
        public virtual ObjectResult<rpt_GetMeritList_Result> rpt_GetMeritList(Nullable<int> batchProgramID)
        {
            var batchProgramIDParameter = batchProgramID.HasValue ?
                new ObjectParameter("BatchProgramID", batchProgramID) :
                new ObjectParameter("BatchProgramID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<rpt_GetMeritList_Result>("rpt_GetMeritList", batchProgramIDParameter);
        }
    
        public virtual ObjectResult<rpt_GetMeritListOnlyPercentage_Result> rpt_GetMeritListOnlyPercentage(Nullable<int> batchProgramID, Nullable<int> entryTestID, Nullable<int> queryID)
        {
            var batchProgramIDParameter = batchProgramID.HasValue ?
                new ObjectParameter("BatchProgramID", batchProgramID) :
                new ObjectParameter("BatchProgramID", typeof(int));
    
            var entryTestIDParameter = entryTestID.HasValue ?
                new ObjectParameter("EntryTestID", entryTestID) :
                new ObjectParameter("EntryTestID", typeof(int));
    
            var queryIDParameter = queryID.HasValue ?
                new ObjectParameter("QueryID", queryID) :
                new ObjectParameter("QueryID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<rpt_GetMeritListOnlyPercentage_Result>("rpt_GetMeritListOnlyPercentage", batchProgramIDParameter, entryTestIDParameter, queryIDParameter);
        }
    
        public virtual ObjectResult<rpt_GetMeritListOnlyPercentage_FormWise_Result> rpt_GetMeritListOnlyPercentage_FormWise(Nullable<int> batchProgramID, Nullable<int> entryTestID, Nullable<int> queryID)
        {
            var batchProgramIDParameter = batchProgramID.HasValue ?
                new ObjectParameter("BatchProgramID", batchProgramID) :
                new ObjectParameter("BatchProgramID", typeof(int));
    
            var entryTestIDParameter = entryTestID.HasValue ?
                new ObjectParameter("EntryTestID", entryTestID) :
                new ObjectParameter("EntryTestID", typeof(int));
    
            var queryIDParameter = queryID.HasValue ?
                new ObjectParameter("QueryID", queryID) :
                new ObjectParameter("QueryID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<rpt_GetMeritListOnlyPercentage_FormWise_Result>("rpt_GetMeritListOnlyPercentage_FormWise", batchProgramIDParameter, entryTestIDParameter, queryIDParameter);
        }
    
        public virtual ObjectResult<rpt_GetOfferLetter_Result> rpt_GetOfferLetter(string formNo)
        {
            var formNoParameter = formNo != null ?
                new ObjectParameter("FormNo", formNo) :
                new ObjectParameter("FormNo", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<rpt_GetOfferLetter_Result>("rpt_GetOfferLetter", formNoParameter);
        }
    
        public virtual ObjectResult<rpt_GetStudentCoursesDetail_Result> rpt_GetStudentCoursesDetail(Nullable<int> batchProgramID, Nullable<int> studentID, Nullable<int> yearSemesterNo)
        {
            var batchProgramIDParameter = batchProgramID.HasValue ?
                new ObjectParameter("BatchProgramID", batchProgramID) :
                new ObjectParameter("BatchProgramID", typeof(int));
    
            var studentIDParameter = studentID.HasValue ?
                new ObjectParameter("StudentID", studentID) :
                new ObjectParameter("StudentID", typeof(int));
    
            var yearSemesterNoParameter = yearSemesterNo.HasValue ?
                new ObjectParameter("YearSemesterNo", yearSemesterNo) :
                new ObjectParameter("YearSemesterNo", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<rpt_GetStudentCoursesDetail_Result>("rpt_GetStudentCoursesDetail", batchProgramIDParameter, studentIDParameter, yearSemesterNoParameter);
        }
    
        public virtual ObjectResult<rpt_GetStudentSummary_Result> rpt_GetStudentSummary(string search)
        {
            var searchParameter = search != null ?
                new ObjectParameter("Search", search) :
                new ObjectParameter("Search", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<rpt_GetStudentSummary_Result>("rpt_GetStudentSummary", searchParameter);
        }
    
        public virtual ObjectResult<rpt_Programs_Result> rpt_Programs(string search, Nullable<int> subDept_Id)
        {
            var searchParameter = search != null ?
                new ObjectParameter("Search", search) :
                new ObjectParameter("Search", typeof(string));
    
            var subDept_IdParameter = subDept_Id.HasValue ?
                new ObjectParameter("SubDept_Id", subDept_Id) :
                new ObjectParameter("SubDept_Id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<rpt_Programs_Result>("rpt_Programs", searchParameter, subDept_IdParameter);
        }
    
        public virtual ObjectResult<rpt_StudentBatchProgramCourses_Result> rpt_StudentBatchProgramCourses(string search)
        {
            var searchParameter = search != null ?
                new ObjectParameter("Search", search) :
                new ObjectParameter("Search", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<rpt_StudentBatchProgramCourses_Result>("rpt_StudentBatchProgramCourses", searchParameter);
        }
    
        public virtual ObjectResult<rpt_StudentFinanceDetail_Result> rpt_StudentFinanceDetail()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<rpt_StudentFinanceDetail_Result>("rpt_StudentFinanceDetail");
        }
    
        public virtual ObjectResult<rptGetAdmitCard_Result> rptGetAdmitCard(string search)
        {
            var searchParameter = search != null ?
                new ObjectParameter("Search", search) :
                new ObjectParameter("Search", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<rptGetAdmitCard_Result>("rptGetAdmitCard", searchParameter);
        }
    
        public virtual ObjectResult<rptGetAdmitCardFormReceived_Result> rptGetAdmitCardFormReceived(string search)
        {
            var searchParameter = search != null ?
                new ObjectParameter("Search", search) :
                new ObjectParameter("Search", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<rptGetAdmitCardFormReceived_Result>("rptGetAdmitCardFormReceived", searchParameter);
        }
    
        public virtual ObjectResult<rptGetApplicantQualifications_Result> rptGetApplicantQualifications(Nullable<int> statusID, string formNo, Nullable<System.DateTime> startDate, Nullable<System.DateTime> endDate)
        {
            var statusIDParameter = statusID.HasValue ?
                new ObjectParameter("StatusID", statusID) :
                new ObjectParameter("StatusID", typeof(int));
    
            var formNoParameter = formNo != null ?
                new ObjectParameter("FormNo", formNo) :
                new ObjectParameter("FormNo", typeof(string));
    
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("StartDate", startDate) :
                new ObjectParameter("StartDate", typeof(System.DateTime));
    
            var endDateParameter = endDate.HasValue ?
                new ObjectParameter("EndDate", endDate) :
                new ObjectParameter("EndDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<rptGetApplicantQualifications_Result>("rptGetApplicantQualifications", statusIDParameter, formNoParameter, startDateParameter, endDateParameter);
        }
    
        public virtual ObjectResult<rptGetChallanEmpty_Result> rptGetChallanEmpty()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<rptGetChallanEmpty_Result>("rptGetChallanEmpty");
        }
    
        public virtual ObjectResult<rptGetListOfStudentsAppliedViaNtsAndEntryTest_Result> rptGetListOfStudentsAppliedViaNtsAndEntryTest(Nullable<int> batchID, Nullable<int> batchProgramID, Nullable<int> degreeID, Nullable<int> subDept_Id)
        {
            var batchIDParameter = batchID.HasValue ?
                new ObjectParameter("BatchID", batchID) :
                new ObjectParameter("BatchID", typeof(int));
    
            var batchProgramIDParameter = batchProgramID.HasValue ?
                new ObjectParameter("BatchProgramID", batchProgramID) :
                new ObjectParameter("BatchProgramID", typeof(int));
    
            var degreeIDParameter = degreeID.HasValue ?
                new ObjectParameter("DegreeID", degreeID) :
                new ObjectParameter("DegreeID", typeof(int));
    
            var subDept_IdParameter = subDept_Id.HasValue ?
                new ObjectParameter("SubDept_Id", subDept_Id) :
                new ObjectParameter("SubDept_Id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<rptGetListOfStudentsAppliedViaNtsAndEntryTest_Result>("rptGetListOfStudentsAppliedViaNtsAndEntryTest", batchIDParameter, batchProgramIDParameter, degreeIDParameter, subDept_IdParameter);
        }
    
        public virtual ObjectResult<rptGetNTSnonNTSStudents_Result> rptGetNTSnonNTSStudents(Nullable<int> batchID, Nullable<int> batchProgramID, Nullable<int> degreeID, Nullable<int> subDept_Id)
        {
            var batchIDParameter = batchID.HasValue ?
                new ObjectParameter("BatchID", batchID) :
                new ObjectParameter("BatchID", typeof(int));
    
            var batchProgramIDParameter = batchProgramID.HasValue ?
                new ObjectParameter("BatchProgramID", batchProgramID) :
                new ObjectParameter("BatchProgramID", typeof(int));
    
            var degreeIDParameter = degreeID.HasValue ?
                new ObjectParameter("DegreeID", degreeID) :
                new ObjectParameter("DegreeID", typeof(int));
    
            var subDept_IdParameter = subDept_Id.HasValue ?
                new ObjectParameter("SubDept_Id", subDept_Id) :
                new ObjectParameter("SubDept_Id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<rptGetNTSnonNTSStudents_Result>("rptGetNTSnonNTSStudents", batchIDParameter, batchProgramIDParameter, degreeIDParameter, subDept_IdParameter);
        }
    
        public virtual ObjectResult<string> SF_GenerateStudentServiceChallans(Nullable<int> batchProgramID, Nullable<int> yearSemesterNo, Nullable<System.DateTime> issueDate, Nullable<System.DateTime> lastDate, Nullable<int> accountID, Nullable<int> createdBy, Nullable<int> queryID, Nullable<int> paramStudentID)
        {
            var batchProgramIDParameter = batchProgramID.HasValue ?
                new ObjectParameter("BatchProgramID", batchProgramID) :
                new ObjectParameter("BatchProgramID", typeof(int));
    
            var yearSemesterNoParameter = yearSemesterNo.HasValue ?
                new ObjectParameter("YearSemesterNo", yearSemesterNo) :
                new ObjectParameter("YearSemesterNo", typeof(int));
    
            var issueDateParameter = issueDate.HasValue ?
                new ObjectParameter("IssueDate", issueDate) :
                new ObjectParameter("IssueDate", typeof(System.DateTime));
    
            var lastDateParameter = lastDate.HasValue ?
                new ObjectParameter("LastDate", lastDate) :
                new ObjectParameter("LastDate", typeof(System.DateTime));
    
            var accountIDParameter = accountID.HasValue ?
                new ObjectParameter("AccountID", accountID) :
                new ObjectParameter("AccountID", typeof(int));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(int));
    
            var queryIDParameter = queryID.HasValue ?
                new ObjectParameter("QueryID", queryID) :
                new ObjectParameter("QueryID", typeof(int));
    
            var paramStudentIDParameter = paramStudentID.HasValue ?
                new ObjectParameter("paramStudentID", paramStudentID) :
                new ObjectParameter("paramStudentID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("SF_GenerateStudentServiceChallans", batchProgramIDParameter, yearSemesterNoParameter, issueDateParameter, lastDateParameter, accountIDParameter, createdByParameter, queryIDParameter, paramStudentIDParameter);
        }
    
        public virtual ObjectResult<SF_GetApplicantsForDiscounts_Result> SF_GetApplicantsForDiscounts(string paramSearch, Nullable<int> batchProgramID, Nullable<int> statusID)
        {
            var paramSearchParameter = paramSearch != null ?
                new ObjectParameter("paramSearch", paramSearch) :
                new ObjectParameter("paramSearch", typeof(string));
    
            var batchProgramIDParameter = batchProgramID.HasValue ?
                new ObjectParameter("BatchProgramID", batchProgramID) :
                new ObjectParameter("BatchProgramID", typeof(int));
    
            var statusIDParameter = statusID.HasValue ?
                new ObjectParameter("StatusID", statusID) :
                new ObjectParameter("StatusID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SF_GetApplicantsForDiscounts_Result>("SF_GetApplicantsForDiscounts", paramSearchParameter, batchProgramIDParameter, statusIDParameter);
        }
    
        public virtual ObjectResult<SF_GetApplicantStudentChallansFeeDefaulterSummary_Result> SF_GetApplicantStudentChallansFeeDefaulterSummary(string formNo, string challanType, Nullable<int> batchID, Nullable<int> batchProgramID)
        {
            var formNoParameter = formNo != null ?
                new ObjectParameter("FormNo", formNo) :
                new ObjectParameter("FormNo", typeof(string));
    
            var challanTypeParameter = challanType != null ?
                new ObjectParameter("ChallanType", challanType) :
                new ObjectParameter("ChallanType", typeof(string));
    
            var batchIDParameter = batchID.HasValue ?
                new ObjectParameter("BatchID", batchID) :
                new ObjectParameter("BatchID", typeof(int));
    
            var batchProgramIDParameter = batchProgramID.HasValue ?
                new ObjectParameter("BatchProgramID", batchProgramID) :
                new ObjectParameter("BatchProgramID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SF_GetApplicantStudentChallansFeeDefaulterSummary_Result>("SF_GetApplicantStudentChallansFeeDefaulterSummary", formNoParameter, challanTypeParameter, batchIDParameter, batchProgramIDParameter);
        }
    
        public virtual ObjectResult<SF_GetBatchWiseAmounts_Result> SF_GetBatchWiseAmounts(string isDeposited, string formNo, string challanType, Nullable<int> batchID, Nullable<int> batchProgramID, Nullable<int> queryID)
        {
            var isDepositedParameter = isDeposited != null ?
                new ObjectParameter("IsDeposited", isDeposited) :
                new ObjectParameter("IsDeposited", typeof(string));
    
            var formNoParameter = formNo != null ?
                new ObjectParameter("FormNo", formNo) :
                new ObjectParameter("FormNo", typeof(string));
    
            var challanTypeParameter = challanType != null ?
                new ObjectParameter("ChallanType", challanType) :
                new ObjectParameter("ChallanType", typeof(string));
    
            var batchIDParameter = batchID.HasValue ?
                new ObjectParameter("BatchID", batchID) :
                new ObjectParameter("BatchID", typeof(int));
    
            var batchProgramIDParameter = batchProgramID.HasValue ?
                new ObjectParameter("BatchProgramID", batchProgramID) :
                new ObjectParameter("BatchProgramID", typeof(int));
    
            var queryIDParameter = queryID.HasValue ?
                new ObjectParameter("QueryID", queryID) :
                new ObjectParameter("QueryID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SF_GetBatchWiseAmounts_Result>("SF_GetBatchWiseAmounts", isDepositedParameter, formNoParameter, challanTypeParameter, batchIDParameter, batchProgramIDParameter, queryIDParameter);
        }
    
        public virtual ObjectResult<SF_GetCollegeServiceWiseAmounts_Result> SF_GetCollegeServiceWiseAmounts(string isDeposited, string formNo, string challanType, Nullable<int> batchID, Nullable<int> batchProgramID)
        {
            var isDepositedParameter = isDeposited != null ?
                new ObjectParameter("IsDeposited", isDeposited) :
                new ObjectParameter("IsDeposited", typeof(string));
    
            var formNoParameter = formNo != null ?
                new ObjectParameter("FormNo", formNo) :
                new ObjectParameter("FormNo", typeof(string));
    
            var challanTypeParameter = challanType != null ?
                new ObjectParameter("ChallanType", challanType) :
                new ObjectParameter("ChallanType", typeof(string));
    
            var batchIDParameter = batchID.HasValue ?
                new ObjectParameter("BatchID", batchID) :
                new ObjectParameter("BatchID", typeof(int));
    
            var batchProgramIDParameter = batchProgramID.HasValue ?
                new ObjectParameter("BatchProgramID", batchProgramID) :
                new ObjectParameter("BatchProgramID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SF_GetCollegeServiceWiseAmounts_Result>("SF_GetCollegeServiceWiseAmounts", isDepositedParameter, formNoParameter, challanTypeParameter, batchIDParameter, batchProgramIDParameter);
        }
    
        public virtual ObjectResult<sf_GetFeeCompleteDetailAllStudentBatchWise_Result> sf_GetFeeCompleteDetailAllStudentBatchWise(Nullable<int> batchID, string isDeposited)
        {
            var batchIDParameter = batchID.HasValue ?
                new ObjectParameter("BatchID", batchID) :
                new ObjectParameter("BatchID", typeof(int));
    
            var isDepositedParameter = isDeposited != null ?
                new ObjectParameter("IsDeposited", isDeposited) :
                new ObjectParameter("IsDeposited", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sf_GetFeeCompleteDetailAllStudentBatchWise_Result>("sf_GetFeeCompleteDetailAllStudentBatchWise", batchIDParameter, isDepositedParameter);
        }
    
        public virtual ObjectResult<sf_GetFeeReceiptDetailBatchWise_Result> sf_GetFeeReceiptDetailBatchWise(Nullable<int> batchID, Nullable<int> batchProgramID, string isDeposited, Nullable<System.DateTime> startDate, Nullable<System.DateTime> endDate)
        {
            var batchIDParameter = batchID.HasValue ?
                new ObjectParameter("BatchID", batchID) :
                new ObjectParameter("BatchID", typeof(int));
    
            var batchProgramIDParameter = batchProgramID.HasValue ?
                new ObjectParameter("BatchProgramID", batchProgramID) :
                new ObjectParameter("BatchProgramID", typeof(int));
    
            var isDepositedParameter = isDeposited != null ?
                new ObjectParameter("IsDeposited", isDeposited) :
                new ObjectParameter("IsDeposited", typeof(string));
    
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("StartDate", startDate) :
                new ObjectParameter("StartDate", typeof(System.DateTime));
    
            var endDateParameter = endDate.HasValue ?
                new ObjectParameter("EndDate", endDate) :
                new ObjectParameter("EndDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sf_GetFeeReceiptDetailBatchWise_Result>("sf_GetFeeReceiptDetailBatchWise", batchIDParameter, batchProgramIDParameter, isDepositedParameter, startDateParameter, endDateParameter);
        }
    
        public virtual ObjectResult<sf_GetFeeReceiptSummaryBatchWise_Result> sf_GetFeeReceiptSummaryBatchWise(Nullable<int> batchID, Nullable<int> batchProgramID, string isDeposited)
        {
            var batchIDParameter = batchID.HasValue ?
                new ObjectParameter("BatchID", batchID) :
                new ObjectParameter("BatchID", typeof(int));
    
            var batchProgramIDParameter = batchProgramID.HasValue ?
                new ObjectParameter("BatchProgramID", batchProgramID) :
                new ObjectParameter("BatchProgramID", typeof(int));
    
            var isDepositedParameter = isDeposited != null ?
                new ObjectParameter("IsDeposited", isDeposited) :
                new ObjectParameter("IsDeposited", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sf_GetFeeReceiptSummaryBatchWise_Result>("sf_GetFeeReceiptSummaryBatchWise", batchIDParameter, batchProgramIDParameter, isDepositedParameter);
        }
    
        public virtual ObjectResult<sf_GetFeeRefundExistingDetailBatchWise_Result> sf_GetFeeRefundExistingDetailBatchWise(Nullable<int> batchID, string isDeposited)
        {
            var batchIDParameter = batchID.HasValue ?
                new ObjectParameter("BatchID", batchID) :
                new ObjectParameter("BatchID", typeof(int));
    
            var isDepositedParameter = isDeposited != null ?
                new ObjectParameter("IsDeposited", isDeposited) :
                new ObjectParameter("IsDeposited", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sf_GetFeeRefundExistingDetailBatchWise_Result>("sf_GetFeeRefundExistingDetailBatchWise", batchIDParameter, isDepositedParameter);
        }
    
        public virtual ObjectResult<SF_GetStudentApplicantDiscounts_Result> SF_GetStudentApplicantDiscounts(Nullable<int> studentID, Nullable<int> queryID)
        {
            var studentIDParameter = studentID.HasValue ?
                new ObjectParameter("StudentID", studentID) :
                new ObjectParameter("StudentID", typeof(int));
    
            var queryIDParameter = queryID.HasValue ?
                new ObjectParameter("QueryID", queryID) :
                new ObjectParameter("QueryID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SF_GetStudentApplicantDiscounts_Result>("SF_GetStudentApplicantDiscounts", studentIDParameter, queryIDParameter);
        }
    
        public virtual ObjectResult<SF_GetStudentFines_Result> SF_GetStudentFines(Nullable<int> studentID, Nullable<int> queryID)
        {
            var studentIDParameter = studentID.HasValue ?
                new ObjectParameter("StudentID", studentID) :
                new ObjectParameter("StudentID", typeof(int));
    
            var queryIDParameter = queryID.HasValue ?
                new ObjectParameter("QueryID", queryID) :
                new ObjectParameter("QueryID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SF_GetStudentFines_Result>("SF_GetStudentFines", studentIDParameter, queryIDParameter);
        }
    
        public virtual ObjectResult<SF_GetStudentServiceDetail_Result> SF_GetStudentServiceDetail(Nullable<int> batchProgramID, Nullable<int> yearSemesterNo, Nullable<int> statusID, Nullable<int> studentID, Nullable<int> queryID)
        {
            var batchProgramIDParameter = batchProgramID.HasValue ?
                new ObjectParameter("BatchProgramID", batchProgramID) :
                new ObjectParameter("BatchProgramID", typeof(int));
    
            var yearSemesterNoParameter = yearSemesterNo.HasValue ?
                new ObjectParameter("YearSemesterNo", yearSemesterNo) :
                new ObjectParameter("YearSemesterNo", typeof(int));
    
            var statusIDParameter = statusID.HasValue ?
                new ObjectParameter("StatusID", statusID) :
                new ObjectParameter("StatusID", typeof(int));
    
            var studentIDParameter = studentID.HasValue ?
                new ObjectParameter("StudentID", studentID) :
                new ObjectParameter("StudentID", typeof(int));
    
            var queryIDParameter = queryID.HasValue ?
                new ObjectParameter("QueryID", queryID) :
                new ObjectParameter("QueryID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SF_GetStudentServiceDetail_Result>("SF_GetStudentServiceDetail", batchProgramIDParameter, yearSemesterNoParameter, statusIDParameter, studentIDParameter, queryIDParameter);
        }
    
        public virtual int SF_Insert_StudentService(Nullable<int> applicantID, string formNo, Nullable<int> studentID, Nullable<int> batchProgramID, Nullable<int> yearSemesterNo, Nullable<int> createdBy, Nullable<int> queryID, Nullable<int> studentDiscountID, Nullable<int> studentFineID)
        {
            var applicantIDParameter = applicantID.HasValue ?
                new ObjectParameter("ApplicantID", applicantID) :
                new ObjectParameter("ApplicantID", typeof(int));
    
            var formNoParameter = formNo != null ?
                new ObjectParameter("FormNo", formNo) :
                new ObjectParameter("FormNo", typeof(string));
    
            var studentIDParameter = studentID.HasValue ?
                new ObjectParameter("StudentID", studentID) :
                new ObjectParameter("StudentID", typeof(int));
    
            var batchProgramIDParameter = batchProgramID.HasValue ?
                new ObjectParameter("BatchProgramID", batchProgramID) :
                new ObjectParameter("BatchProgramID", typeof(int));
    
            var yearSemesterNoParameter = yearSemesterNo.HasValue ?
                new ObjectParameter("YearSemesterNo", yearSemesterNo) :
                new ObjectParameter("YearSemesterNo", typeof(int));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(int));
    
            var queryIDParameter = queryID.HasValue ?
                new ObjectParameter("QueryID", queryID) :
                new ObjectParameter("QueryID", typeof(int));
    
            var studentDiscountIDParameter = studentDiscountID.HasValue ?
                new ObjectParameter("StudentDiscountID", studentDiscountID) :
                new ObjectParameter("StudentDiscountID", typeof(int));
    
            var studentFineIDParameter = studentFineID.HasValue ?
                new ObjectParameter("StudentFineID", studentFineID) :
                new ObjectParameter("StudentFineID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SF_Insert_StudentService", applicantIDParameter, formNoParameter, studentIDParameter, batchProgramIDParameter, yearSemesterNoParameter, createdByParameter, queryIDParameter, studentDiscountIDParameter, studentFineIDParameter);
        }
    
        public virtual int SF_UpdateStudentServiceStatus(Nullable<int> batchProgramID, Nullable<int> yearSemesterNo, Nullable<int> statusID, Nullable<int> studentID, Nullable<int> createdBy, Nullable<int> studentServiceID, Nullable<int> queryID, Nullable<int> updateStatusID)
        {
            var batchProgramIDParameter = batchProgramID.HasValue ?
                new ObjectParameter("BatchProgramID", batchProgramID) :
                new ObjectParameter("BatchProgramID", typeof(int));
    
            var yearSemesterNoParameter = yearSemesterNo.HasValue ?
                new ObjectParameter("YearSemesterNo", yearSemesterNo) :
                new ObjectParameter("YearSemesterNo", typeof(int));
    
            var statusIDParameter = statusID.HasValue ?
                new ObjectParameter("StatusID", statusID) :
                new ObjectParameter("StatusID", typeof(int));
    
            var studentIDParameter = studentID.HasValue ?
                new ObjectParameter("StudentID", studentID) :
                new ObjectParameter("StudentID", typeof(int));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(int));
    
            var studentServiceIDParameter = studentServiceID.HasValue ?
                new ObjectParameter("StudentServiceID", studentServiceID) :
                new ObjectParameter("StudentServiceID", typeof(int));
    
            var queryIDParameter = queryID.HasValue ?
                new ObjectParameter("QueryID", queryID) :
                new ObjectParameter("QueryID", typeof(int));
    
            var updateStatusIDParameter = updateStatusID.HasValue ?
                new ObjectParameter("UpdateStatusID", updateStatusID) :
                new ObjectParameter("UpdateStatusID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SF_UpdateStudentServiceStatus", batchProgramIDParameter, yearSemesterNoParameter, statusIDParameter, studentIDParameter, createdByParameter, studentServiceIDParameter, queryIDParameter, updateStatusIDParameter);
        }
    
        public virtual int sp_alterdiagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));
    
            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_alterdiagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }
    
        public virtual int sp_creatediagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));
    
            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_creatediagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }
    
        public virtual ObjectResult<SP_DegreeTitleForPage_Result> SP_DegreeTitleForPage(string search)
        {
            var searchParameter = search != null ?
                new ObjectParameter("Search", search) :
                new ObjectParameter("Search", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_DegreeTitleForPage_Result>("SP_DegreeTitleForPage", searchParameter);
        }
    
        public virtual int sp_dropdiagram(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_dropdiagram", diagramnameParameter, owner_idParameter);
        }
    
        public virtual int sp_GetApplicantSelectedPrograms(string formNo, ObjectParameter selectedPrograms)
        {
            var formNoParameter = formNo != null ?
                new ObjectParameter("FormNo", formNo) :
                new ObjectParameter("FormNo", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_GetApplicantSelectedPrograms", formNoParameter, selectedPrograms);
        }
    
        public virtual ObjectResult<sp_GetFormSaleDatailForPage_Result> sp_GetFormSaleDatailForPage(string formNo, Nullable<int> batchID)
        {
            var formNoParameter = formNo != null ?
                new ObjectParameter("FormNo", formNo) :
                new ObjectParameter("FormNo", typeof(string));
    
            var batchIDParameter = batchID.HasValue ?
                new ObjectParameter("BatchID", batchID) :
                new ObjectParameter("BatchID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_GetFormSaleDatailForPage_Result>("sp_GetFormSaleDatailForPage", formNoParameter, batchIDParameter);
        }
    
        public virtual ObjectResult<sp_helpdiagramdefinition_Result> sp_helpdiagramdefinition(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_helpdiagramdefinition_Result>("sp_helpdiagramdefinition", diagramnameParameter, owner_idParameter);
        }
    
        public virtual ObjectResult<sp_helpdiagrams_Result> sp_helpdiagrams(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_helpdiagrams_Result>("sp_helpdiagrams", diagramnameParameter, owner_idParameter);
        }
    
        public virtual int sp_output_param(string input_param, ObjectParameter response)
        {
            var input_paramParameter = input_param != null ?
                new ObjectParameter("input_param", input_param) :
                new ObjectParameter("input_param", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_output_param", input_paramParameter, response);
        }
    
        public virtual ObjectResult<SP_ProgramForPage_Result> SP_ProgramForPage(string search)
        {
            var searchParameter = search != null ?
                new ObjectParameter("Search", search) :
                new ObjectParameter("Search", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_ProgramForPage_Result>("SP_ProgramForPage", searchParameter);
        }
    
        public virtual int sp_renamediagram(string diagramname, Nullable<int> owner_id, string new_diagramname)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var new_diagramnameParameter = new_diagramname != null ?
                new ObjectParameter("new_diagramname", new_diagramname) :
                new ObjectParameter("new_diagramname", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_renamediagram", diagramnameParameter, owner_idParameter, new_diagramnameParameter);
        }
    
        public virtual ObjectResult<SP_roomForPage_Result> SP_roomForPage(string search)
        {
            var searchParameter = search != null ?
                new ObjectParameter("Search", search) :
                new ObjectParameter("Search", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_roomForPage_Result>("SP_roomForPage", searchParameter);
        }
    
        public virtual int sp_upgraddiagrams()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_upgraddiagrams");
        }
    
        public virtual int tt_GenerateTimeTable(Nullable<int> batchID, Nullable<int> batchProgramID, Nullable<int> yearSemesterNo, Nullable<int> studentID, Nullable<int> createdBy, Nullable<int> timeTableMainID, Nullable<int> queryID)
        {
            var batchIDParameter = batchID.HasValue ?
                new ObjectParameter("BatchID", batchID) :
                new ObjectParameter("BatchID", typeof(int));
    
            var batchProgramIDParameter = batchProgramID.HasValue ?
                new ObjectParameter("BatchProgramID", batchProgramID) :
                new ObjectParameter("BatchProgramID", typeof(int));
    
            var yearSemesterNoParameter = yearSemesterNo.HasValue ?
                new ObjectParameter("YearSemesterNo", yearSemesterNo) :
                new ObjectParameter("YearSemesterNo", typeof(int));
    
            var studentIDParameter = studentID.HasValue ?
                new ObjectParameter("StudentID", studentID) :
                new ObjectParameter("StudentID", typeof(int));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(int));
    
            var timeTableMainIDParameter = timeTableMainID.HasValue ?
                new ObjectParameter("TimeTableMainID", timeTableMainID) :
                new ObjectParameter("TimeTableMainID", typeof(int));
    
            var queryIDParameter = queryID.HasValue ?
                new ObjectParameter("QueryID", queryID) :
                new ObjectParameter("QueryID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("tt_GenerateTimeTable", batchIDParameter, batchProgramIDParameter, yearSemesterNoParameter, studentIDParameter, createdByParameter, timeTableMainIDParameter, queryIDParameter);
        }
    
        public virtual ObjectResult<tt_GetTimeTableManualTimeSlot_Result> tt_GetTimeTableManualTimeSlot(string search)
        {
            var searchParameter = search != null ?
                new ObjectParameter("Search", search) :
                new ObjectParameter("Search", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<tt_GetTimeTableManualTimeSlot_Result>("tt_GetTimeTableManualTimeSlot", searchParameter);
        }
    
        public virtual int tt_InsertUpdateDelete_TimeTableManualTimeSlot(Nullable<int> timeTableManualTimeSlotID, Nullable<int> timeTableSlotID, string dayName, Nullable<int> roomID, Nullable<int> createdBy, string isActive, Nullable<int> timeTableMainID, Nullable<int> queryID)
        {
            var timeTableManualTimeSlotIDParameter = timeTableManualTimeSlotID.HasValue ?
                new ObjectParameter("TimeTableManualTimeSlotID", timeTableManualTimeSlotID) :
                new ObjectParameter("TimeTableManualTimeSlotID", typeof(int));
    
            var timeTableSlotIDParameter = timeTableSlotID.HasValue ?
                new ObjectParameter("TimeTableSlotID", timeTableSlotID) :
                new ObjectParameter("TimeTableSlotID", typeof(int));
    
            var dayNameParameter = dayName != null ?
                new ObjectParameter("DayName", dayName) :
                new ObjectParameter("DayName", typeof(string));
    
            var roomIDParameter = roomID.HasValue ?
                new ObjectParameter("RoomID", roomID) :
                new ObjectParameter("RoomID", typeof(int));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(int));
    
            var isActiveParameter = isActive != null ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(string));
    
            var timeTableMainIDParameter = timeTableMainID.HasValue ?
                new ObjectParameter("TimeTableMainID", timeTableMainID) :
                new ObjectParameter("TimeTableMainID", typeof(int));
    
            var queryIDParameter = queryID.HasValue ?
                new ObjectParameter("QueryID", queryID) :
                new ObjectParameter("QueryID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("tt_InsertUpdateDelete_TimeTableManualTimeSlot", timeTableManualTimeSlotIDParameter, timeTableSlotIDParameter, dayNameParameter, roomIDParameter, createdByParameter, isActiveParameter, timeTableMainIDParameter, queryIDParameter);
        }
    
        public virtual int um_AssignPages_Employees(Nullable<int> empID, string rightsType)
        {
            var empIDParameter = empID.HasValue ?
                new ObjectParameter("EmpID", empID) :
                new ObjectParameter("EmpID", typeof(int));
    
            var rightsTypeParameter = rightsType != null ?
                new ObjectParameter("RightsType", rightsType) :
                new ObjectParameter("RightsType", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("um_AssignPages_Employees", empIDParameter, rightsTypeParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> um_CheckEmployeeRights(Nullable<int> empID)
        {
            var empIDParameter = empID.HasValue ?
                new ObjectParameter("EmpID", empID) :
                new ObjectParameter("EmpID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("um_CheckEmployeeRights", empIDParameter);
        }
    
        public virtual int um_CreateStudentLogin(string formNo)
        {
            var formNoParameter = formNo != null ?
                new ObjectParameter("FormNo", formNo) :
                new ObjectParameter("FormNo", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("um_CreateStudentLogin", formNoParameter);
        }
    
        public virtual int um_DeleteUser(string userName)
        {
            var userNameParameter = userName != null ?
                new ObjectParameter("UserName", userName) :
                new ObjectParameter("UserName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("um_DeleteUser", userNameParameter);
        }
    
        public virtual ObjectResult<um_GetCurrentUserID_Result> um_GetCurrentUserID(Nullable<int> empID, string password, string empType)
        {
            var empIDParameter = empID.HasValue ?
                new ObjectParameter("EmpID", empID) :
                new ObjectParameter("EmpID", typeof(int));
    
            var passwordParameter = password != null ?
                new ObjectParameter("Password", password) :
                new ObjectParameter("Password", typeof(string));
    
            var empTypeParameter = empType != null ?
                new ObjectParameter("EmpType", empType) :
                new ObjectParameter("EmpType", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<um_GetCurrentUserID_Result>("um_GetCurrentUserID", empIDParameter, passwordParameter, empTypeParameter);
        }
    
        public virtual ObjectResult<um_GetEmployees_Result> um_GetEmployees(string paramSearch)
        {
            var paramSearchParameter = paramSearch != null ?
                new ObjectParameter("paramSearch", paramSearch) :
                new ObjectParameter("paramSearch", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<um_GetEmployees_Result>("um_GetEmployees", paramSearchParameter);
        }
    
        public virtual ObjectResult<um_GetEmployees_ByID_Result> um_GetEmployees_ByID(Nullable<int> empID)
        {
            var empIDParameter = empID.HasValue ?
                new ObjectParameter("EmpID", empID) :
                new ObjectParameter("EmpID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<um_GetEmployees_ByID_Result>("um_GetEmployees_ByID", empIDParameter);
        }
    
        public virtual ObjectResult<um_GetEmployeesForAdmission_Result> um_GetEmployeesForAdmission(string paramSearch)
        {
            var paramSearchParameter = paramSearch != null ?
                new ObjectParameter("paramSearch", paramSearch) :
                new ObjectParameter("paramSearch", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<um_GetEmployeesForAdmission_Result>("um_GetEmployeesForAdmission", paramSearchParameter);
        }
    
        public virtual ObjectResult<um_GetEmployeesForSubjectAllocation_Result> um_GetEmployeesForSubjectAllocation(Nullable<int> queryID)
        {
            var queryIDParameter = queryID.HasValue ?
                new ObjectParameter("QueryID", queryID) :
                new ObjectParameter("QueryID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<um_GetEmployeesForSubjectAllocation_Result>("um_GetEmployeesForSubjectAllocation", queryIDParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> um_GetMaxEmployeeID()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("um_GetMaxEmployeeID");
        }
    
        public virtual ObjectResult<Um_GetUserDetailForAdmin_Result> Um_GetUserDetailForAdmin(string userName, string password, string empType)
        {
            var userNameParameter = userName != null ?
                new ObjectParameter("UserName", userName) :
                new ObjectParameter("UserName", typeof(string));
    
            var passwordParameter = password != null ?
                new ObjectParameter("Password", password) :
                new ObjectParameter("Password", typeof(string));
    
            var empTypeParameter = empType != null ?
                new ObjectParameter("EmpType", empType) :
                new ObjectParameter("EmpType", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Um_GetUserDetailForAdmin_Result>("Um_GetUserDetailForAdmin", userNameParameter, passwordParameter, empTypeParameter);
        }
    
        public virtual int um_ResetPassword(string userName, string password)
        {
            var userNameParameter = userName != null ?
                new ObjectParameter("UserName", userName) :
                new ObjectParameter("UserName", typeof(string));
    
            var passwordParameter = password != null ?
                new ObjectParameter("Password", password) :
                new ObjectParameter("Password", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("um_ResetPassword", userNameParameter, passwordParameter);
        }
    
        public virtual int um_RevertEmployeeRights(Nullable<int> empID)
        {
            var empIDParameter = empID.HasValue ?
                new ObjectParameter("EmpID", empID) :
                new ObjectParameter("EmpID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("um_RevertEmployeeRights", empIDParameter);
        }
    
        public virtual ObjectResult<um_rpt_GetIncompleteApplicantDetail_Result> um_rpt_GetIncompleteApplicantDetail(string paramSearch)
        {
            var paramSearchParameter = paramSearch != null ?
                new ObjectParameter("paramSearch", paramSearch) :
                new ObjectParameter("paramSearch", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<um_rpt_GetIncompleteApplicantDetail_Result>("um_rpt_GetIncompleteApplicantDetail", paramSearchParameter);
        }
    
        public virtual int um_UpdatePassword(string userName, string oldPassword, string newPassword)
        {
            var userNameParameter = userName != null ?
                new ObjectParameter("UserName", userName) :
                new ObjectParameter("UserName", typeof(string));
    
            var oldPasswordParameter = oldPassword != null ?
                new ObjectParameter("OldPassword", oldPassword) :
                new ObjectParameter("OldPassword", typeof(string));
    
            var newPasswordParameter = newPassword != null ?
                new ObjectParameter("NewPassword", newPassword) :
                new ObjectParameter("NewPassword", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("um_UpdatePassword", userNameParameter, oldPasswordParameter, newPasswordParameter);
        }
    
        public virtual int Update_StudentDiscountRequest(Nullable<int> studentDiscountRequestID, string formNo, string requestTypeName, string studentRequestStatusName, string discountPercentage, Nullable<int> empID)
        {
            var studentDiscountRequestIDParameter = studentDiscountRequestID.HasValue ?
                new ObjectParameter("StudentDiscountRequestID", studentDiscountRequestID) :
                new ObjectParameter("StudentDiscountRequestID", typeof(int));
    
            var formNoParameter = formNo != null ?
                new ObjectParameter("FormNo", formNo) :
                new ObjectParameter("FormNo", typeof(string));
    
            var requestTypeNameParameter = requestTypeName != null ?
                new ObjectParameter("RequestTypeName", requestTypeName) :
                new ObjectParameter("RequestTypeName", typeof(string));
    
            var studentRequestStatusNameParameter = studentRequestStatusName != null ?
                new ObjectParameter("StudentRequestStatusName", studentRequestStatusName) :
                new ObjectParameter("StudentRequestStatusName", typeof(string));
    
            var discountPercentageParameter = discountPercentage != null ?
                new ObjectParameter("DiscountPercentage", discountPercentage) :
                new ObjectParameter("DiscountPercentage", typeof(string));
    
            var empIDParameter = empID.HasValue ?
                new ObjectParameter("EmpID", empID) :
                new ObjectParameter("EmpID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Update_StudentDiscountRequest", studentDiscountRequestIDParameter, formNoParameter, requestTypeNameParameter, studentRequestStatusNameParameter, discountPercentageParameter, empIDParameter);
        }
    
        public virtual int UpdateActiveExam(Nullable<int> examID, Nullable<int> modifiedBy)
        {
            var examIDParameter = examID.HasValue ?
                new ObjectParameter("ExamID", examID) :
                new ObjectParameter("ExamID", typeof(int));
    
            var modifiedByParameter = modifiedBy.HasValue ?
                new ObjectParameter("ModifiedBy", modifiedBy) :
                new ObjectParameter("ModifiedBy", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateActiveExam", examIDParameter, modifiedByParameter);
        }
    
        public virtual int UpdateActiveSession(Nullable<int> batchID, Nullable<int> modifiedBy)
        {
            var batchIDParameter = batchID.HasValue ?
                new ObjectParameter("BatchID", batchID) :
                new ObjectParameter("BatchID", typeof(int));
    
            var modifiedByParameter = modifiedBy.HasValue ?
                new ObjectParameter("ModifiedBy", modifiedBy) :
                new ObjectParameter("ModifiedBy", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateActiveSession", batchIDParameter, modifiedByParameter);
        }
    
        public virtual int UpdateApplicantFields(string exCampus, string exProgram, string exRegistrationNo, string exReasonForLeaving, string transferInstituteAttendend, string transferProgram, string transferCGPA, string transferCreditHoursCompleted, string transferReasonForLeaving, string resultAwaitingOf, string resultAwaitingRollNo, string resultAwaitingBoardUniversity, string resultAwaitingYear, string applicantStatus, Nullable<int> modifiedBy, string disciplinaryIssue, string formNo)
        {
            var exCampusParameter = exCampus != null ?
                new ObjectParameter("ExCampus", exCampus) :
                new ObjectParameter("ExCampus", typeof(string));
    
            var exProgramParameter = exProgram != null ?
                new ObjectParameter("ExProgram", exProgram) :
                new ObjectParameter("ExProgram", typeof(string));
    
            var exRegistrationNoParameter = exRegistrationNo != null ?
                new ObjectParameter("ExRegistrationNo", exRegistrationNo) :
                new ObjectParameter("ExRegistrationNo", typeof(string));
    
            var exReasonForLeavingParameter = exReasonForLeaving != null ?
                new ObjectParameter("ExReasonForLeaving", exReasonForLeaving) :
                new ObjectParameter("ExReasonForLeaving", typeof(string));
    
            var transferInstituteAttendendParameter = transferInstituteAttendend != null ?
                new ObjectParameter("TransferInstituteAttendend", transferInstituteAttendend) :
                new ObjectParameter("TransferInstituteAttendend", typeof(string));
    
            var transferProgramParameter = transferProgram != null ?
                new ObjectParameter("TransferProgram", transferProgram) :
                new ObjectParameter("TransferProgram", typeof(string));
    
            var transferCGPAParameter = transferCGPA != null ?
                new ObjectParameter("TransferCGPA", transferCGPA) :
                new ObjectParameter("TransferCGPA", typeof(string));
    
            var transferCreditHoursCompletedParameter = transferCreditHoursCompleted != null ?
                new ObjectParameter("TransferCreditHoursCompleted", transferCreditHoursCompleted) :
                new ObjectParameter("TransferCreditHoursCompleted", typeof(string));
    
            var transferReasonForLeavingParameter = transferReasonForLeaving != null ?
                new ObjectParameter("TransferReasonForLeaving", transferReasonForLeaving) :
                new ObjectParameter("TransferReasonForLeaving", typeof(string));
    
            var resultAwaitingOfParameter = resultAwaitingOf != null ?
                new ObjectParameter("ResultAwaitingOf", resultAwaitingOf) :
                new ObjectParameter("ResultAwaitingOf", typeof(string));
    
            var resultAwaitingRollNoParameter = resultAwaitingRollNo != null ?
                new ObjectParameter("ResultAwaitingRollNo", resultAwaitingRollNo) :
                new ObjectParameter("ResultAwaitingRollNo", typeof(string));
    
            var resultAwaitingBoardUniversityParameter = resultAwaitingBoardUniversity != null ?
                new ObjectParameter("ResultAwaitingBoardUniversity", resultAwaitingBoardUniversity) :
                new ObjectParameter("ResultAwaitingBoardUniversity", typeof(string));
    
            var resultAwaitingYearParameter = resultAwaitingYear != null ?
                new ObjectParameter("ResultAwaitingYear", resultAwaitingYear) :
                new ObjectParameter("ResultAwaitingYear", typeof(string));
    
            var applicantStatusParameter = applicantStatus != null ?
                new ObjectParameter("ApplicantStatus", applicantStatus) :
                new ObjectParameter("ApplicantStatus", typeof(string));
    
            var modifiedByParameter = modifiedBy.HasValue ?
                new ObjectParameter("ModifiedBy", modifiedBy) :
                new ObjectParameter("ModifiedBy", typeof(int));
    
            var disciplinaryIssueParameter = disciplinaryIssue != null ?
                new ObjectParameter("DisciplinaryIssue", disciplinaryIssue) :
                new ObjectParameter("DisciplinaryIssue", typeof(string));
    
            var formNoParameter = formNo != null ?
                new ObjectParameter("FormNo", formNo) :
                new ObjectParameter("FormNo", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateApplicantFields", exCampusParameter, exProgramParameter, exRegistrationNoParameter, exReasonForLeavingParameter, transferInstituteAttendendParameter, transferProgramParameter, transferCGPAParameter, transferCreditHoursCompletedParameter, transferReasonForLeavingParameter, resultAwaitingOfParameter, resultAwaitingRollNoParameter, resultAwaitingBoardUniversityParameter, resultAwaitingYearParameter, applicantStatusParameter, modifiedByParameter, disciplinaryIssueParameter, formNoParameter);
        }
    
        public virtual int UpdateDateSheetApproveByExamID(Nullable<int> examID, Nullable<int> isDateSheetApproved, Nullable<int> modifiedBy)
        {
            var examIDParameter = examID.HasValue ?
                new ObjectParameter("ExamID", examID) :
                new ObjectParameter("ExamID", typeof(int));
    
            var isDateSheetApprovedParameter = isDateSheetApproved.HasValue ?
                new ObjectParameter("IsDateSheetApproved", isDateSheetApproved) :
                new ObjectParameter("IsDateSheetApproved", typeof(int));
    
            var modifiedByParameter = modifiedBy.HasValue ?
                new ObjectParameter("ModifiedBy", modifiedBy) :
                new ObjectParameter("ModifiedBy", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateDateSheetApproveByExamID", examIDParameter, isDateSheetApprovedParameter, modifiedByParameter);
        }
    
        public virtual ObjectResult<UpdateEntryTest_Result> UpdateEntryTest(Nullable<int> formNo)
        {
            var formNoParameter = formNo.HasValue ?
                new ObjectParameter("FormNo", formNo) :
                new ObjectParameter("FormNo", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<UpdateEntryTest_Result>("UpdateEntryTest", formNoParameter);
        }
    
        public virtual int UpdateEntryTestForApplicants(Nullable<int> formNo, Nullable<int> modifiedBy, Nullable<int> queryID, Nullable<double> obtainedMarks, Nullable<double> interviewMarks, Nullable<double> drawingTestMakrs)
        {
            var formNoParameter = formNo.HasValue ?
                new ObjectParameter("FormNo", formNo) :
                new ObjectParameter("FormNo", typeof(int));
    
            var modifiedByParameter = modifiedBy.HasValue ?
                new ObjectParameter("ModifiedBy", modifiedBy) :
                new ObjectParameter("ModifiedBy", typeof(int));
    
            var queryIDParameter = queryID.HasValue ?
                new ObjectParameter("QueryID", queryID) :
                new ObjectParameter("QueryID", typeof(int));
    
            var obtainedMarksParameter = obtainedMarks.HasValue ?
                new ObjectParameter("ObtainedMarks", obtainedMarks) :
                new ObjectParameter("ObtainedMarks", typeof(double));
    
            var interviewMarksParameter = interviewMarks.HasValue ?
                new ObjectParameter("InterviewMarks", interviewMarks) :
                new ObjectParameter("InterviewMarks", typeof(double));
    
            var drawingTestMakrsParameter = drawingTestMakrs.HasValue ?
                new ObjectParameter("DrawingTestMakrs", drawingTestMakrs) :
                new ObjectParameter("DrawingTestMakrs", typeof(double));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateEntryTestForApplicants", formNoParameter, modifiedByParameter, queryIDParameter, obtainedMarksParameter, interviewMarksParameter, drawingTestMakrsParameter);
        }
    
        public virtual int UpdateEntryTestStatus(Nullable<int> entryTestID, Nullable<int> modifiedBy)
        {
            var entryTestIDParameter = entryTestID.HasValue ?
                new ObjectParameter("EntryTestID", entryTestID) :
                new ObjectParameter("EntryTestID", typeof(int));
    
            var modifiedByParameter = modifiedBy.HasValue ?
                new ObjectParameter("ModifiedBy", modifiedBy) :
                new ObjectParameter("ModifiedBy", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateEntryTestStatus", entryTestIDParameter, modifiedByParameter);
        }
    
        public virtual int UpdateExamDatesheetDetail(Nullable<int> examsDateSheetDetailID, Nullable<int> examDateID, Nullable<int> examDateTimeSlotID, Nullable<int> programCourseID, Nullable<System.DateTime> modifiedOn, Nullable<int> modifiedBy)
        {
            var examsDateSheetDetailIDParameter = examsDateSheetDetailID.HasValue ?
                new ObjectParameter("ExamsDateSheetDetailID", examsDateSheetDetailID) :
                new ObjectParameter("ExamsDateSheetDetailID", typeof(int));
    
            var examDateIDParameter = examDateID.HasValue ?
                new ObjectParameter("ExamDateID", examDateID) :
                new ObjectParameter("ExamDateID", typeof(int));
    
            var examDateTimeSlotIDParameter = examDateTimeSlotID.HasValue ?
                new ObjectParameter("ExamDateTimeSlotID", examDateTimeSlotID) :
                new ObjectParameter("ExamDateTimeSlotID", typeof(int));
    
            var programCourseIDParameter = programCourseID.HasValue ?
                new ObjectParameter("ProgramCourseID", programCourseID) :
                new ObjectParameter("ProgramCourseID", typeof(int));
    
            var modifiedOnParameter = modifiedOn.HasValue ?
                new ObjectParameter("ModifiedOn", modifiedOn) :
                new ObjectParameter("ModifiedOn", typeof(System.DateTime));
    
            var modifiedByParameter = modifiedBy.HasValue ?
                new ObjectParameter("ModifiedBy", modifiedBy) :
                new ObjectParameter("ModifiedBy", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateExamDatesheetDetail", examsDateSheetDetailIDParameter, examDateIDParameter, examDateTimeSlotIDParameter, programCourseIDParameter, modifiedOnParameter, modifiedByParameter);
        }
    
        public virtual int UpdateExamEligibleStudentForExam(Nullable<int> examEligibleStudentForExamID, Nullable<int> modifiedBy)
        {
            var examEligibleStudentForExamIDParameter = examEligibleStudentForExamID.HasValue ?
                new ObjectParameter("ExamEligibleStudentForExamID", examEligibleStudentForExamID) :
                new ObjectParameter("ExamEligibleStudentForExamID", typeof(int));
    
            var modifiedByParameter = modifiedBy.HasValue ?
                new ObjectParameter("ModifiedBy", modifiedBy) :
                new ObjectParameter("ModifiedBy", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateExamEligibleStudentForExam", examEligibleStudentForExamIDParameter, modifiedByParameter);
        }
    
        public virtual int UpdateExamGradFormApproval(Nullable<int> examStudentSubjectMarkID, string teacherName, Nullable<bool> isTeacherApproveOrDisapprove, Nullable<System.DateTime> teacherApproveOrDisapproveDate, string hodName, Nullable<bool> isHodApproveOrDisapprove, Nullable<System.DateTime> hodApproveOrDisapproveDate, Nullable<bool> isTeacherStudentApprove, Nullable<bool> isHodStudentApprove, Nullable<int> modifiedBy)
        {
            var examStudentSubjectMarkIDParameter = examStudentSubjectMarkID.HasValue ?
                new ObjectParameter("ExamStudentSubjectMarkID", examStudentSubjectMarkID) :
                new ObjectParameter("ExamStudentSubjectMarkID", typeof(int));
    
            var teacherNameParameter = teacherName != null ?
                new ObjectParameter("TeacherName", teacherName) :
                new ObjectParameter("TeacherName", typeof(string));
    
            var isTeacherApproveOrDisapproveParameter = isTeacherApproveOrDisapprove.HasValue ?
                new ObjectParameter("IsTeacherApproveOrDisapprove", isTeacherApproveOrDisapprove) :
                new ObjectParameter("IsTeacherApproveOrDisapprove", typeof(bool));
    
            var teacherApproveOrDisapproveDateParameter = teacherApproveOrDisapproveDate.HasValue ?
                new ObjectParameter("TeacherApproveOrDisapproveDate", teacherApproveOrDisapproveDate) :
                new ObjectParameter("TeacherApproveOrDisapproveDate", typeof(System.DateTime));
    
            var hodNameParameter = hodName != null ?
                new ObjectParameter("HodName", hodName) :
                new ObjectParameter("HodName", typeof(string));
    
            var isHodApproveOrDisapproveParameter = isHodApproveOrDisapprove.HasValue ?
                new ObjectParameter("IsHodApproveOrDisapprove", isHodApproveOrDisapprove) :
                new ObjectParameter("IsHodApproveOrDisapprove", typeof(bool));
    
            var hodApproveOrDisapproveDateParameter = hodApproveOrDisapproveDate.HasValue ?
                new ObjectParameter("HodApproveOrDisapproveDate", hodApproveOrDisapproveDate) :
                new ObjectParameter("HodApproveOrDisapproveDate", typeof(System.DateTime));
    
            var isTeacherStudentApproveParameter = isTeacherStudentApprove.HasValue ?
                new ObjectParameter("IsTeacherStudentApprove", isTeacherStudentApprove) :
                new ObjectParameter("IsTeacherStudentApprove", typeof(bool));
    
            var isHodStudentApproveParameter = isHodStudentApprove.HasValue ?
                new ObjectParameter("IsHodStudentApprove", isHodStudentApprove) :
                new ObjectParameter("IsHodStudentApprove", typeof(bool));
    
            var modifiedByParameter = modifiedBy.HasValue ?
                new ObjectParameter("ModifiedBy", modifiedBy) :
                new ObjectParameter("ModifiedBy", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateExamGradFormApproval", examStudentSubjectMarkIDParameter, teacherNameParameter, isTeacherApproveOrDisapproveParameter, teacherApproveOrDisapproveDateParameter, hodNameParameter, isHodApproveOrDisapproveParameter, hodApproveOrDisapproveDateParameter, isTeacherStudentApproveParameter, isHodStudentApproveParameter, modifiedByParameter);
        }
    
        public virtual int UpdateExamRosterAttandanceByID(Nullable<int> examRosterDetailID, Nullable<int> attandanceStatusID, string remarks, string arivalTime, string arivalDate, Nullable<int> modifiedBy)
        {
            var examRosterDetailIDParameter = examRosterDetailID.HasValue ?
                new ObjectParameter("ExamRosterDetailID", examRosterDetailID) :
                new ObjectParameter("ExamRosterDetailID", typeof(int));
    
            var attandanceStatusIDParameter = attandanceStatusID.HasValue ?
                new ObjectParameter("AttandanceStatusID", attandanceStatusID) :
                new ObjectParameter("AttandanceStatusID", typeof(int));
    
            var remarksParameter = remarks != null ?
                new ObjectParameter("Remarks", remarks) :
                new ObjectParameter("Remarks", typeof(string));
    
            var arivalTimeParameter = arivalTime != null ?
                new ObjectParameter("ArivalTime", arivalTime) :
                new ObjectParameter("ArivalTime", typeof(string));
    
            var arivalDateParameter = arivalDate != null ?
                new ObjectParameter("ArivalDate", arivalDate) :
                new ObjectParameter("ArivalDate", typeof(string));
    
            var modifiedByParameter = modifiedBy.HasValue ?
                new ObjectParameter("ModifiedBy", modifiedBy) :
                new ObjectParameter("ModifiedBy", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateExamRosterAttandanceByID", examRosterDetailIDParameter, attandanceStatusIDParameter, remarksParameter, arivalTimeParameter, arivalDateParameter, modifiedByParameter);
        }
    
        public virtual int UpdateExamStudentAttandancebyEEStudentsID(Nullable<int> examEligibleStudentsID, Nullable<int> studentPresentStatusID, string remarks, Nullable<int> modifiedBy)
        {
            var examEligibleStudentsIDParameter = examEligibleStudentsID.HasValue ?
                new ObjectParameter("ExamEligibleStudentsID", examEligibleStudentsID) :
                new ObjectParameter("ExamEligibleStudentsID", typeof(int));
    
            var studentPresentStatusIDParameter = studentPresentStatusID.HasValue ?
                new ObjectParameter("StudentPresentStatusID", studentPresentStatusID) :
                new ObjectParameter("StudentPresentStatusID", typeof(int));
    
            var remarksParameter = remarks != null ?
                new ObjectParameter("Remarks", remarks) :
                new ObjectParameter("Remarks", typeof(string));
    
            var modifiedByParameter = modifiedBy.HasValue ?
                new ObjectParameter("ModifiedBy", modifiedBy) :
                new ObjectParameter("ModifiedBy", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateExamStudentAttandancebyEEStudentsID", examEligibleStudentsIDParameter, studentPresentStatusIDParameter, remarksParameter, modifiedByParameter);
        }
    
        public virtual int UpdateExamStudentSubjectMarkDetailEntry(Nullable<int> examStudentSubjectMarkDetailID, Nullable<int> modifiedBy)
        {
            var examStudentSubjectMarkDetailIDParameter = examStudentSubjectMarkDetailID.HasValue ?
                new ObjectParameter("ExamStudentSubjectMarkDetailID", examStudentSubjectMarkDetailID) :
                new ObjectParameter("ExamStudentSubjectMarkDetailID", typeof(int));
    
            var modifiedByParameter = modifiedBy.HasValue ?
                new ObjectParameter("ModifiedBy", modifiedBy) :
                new ObjectParameter("ModifiedBy", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateExamStudentSubjectMarkDetailEntry", examStudentSubjectMarkDetailIDParameter, modifiedByParameter);
        }
    
        public virtual int UpdateExamSubjectsStudentMarkEntry(Nullable<int> examStudentSubjectMarkID, Nullable<int> modifiedBy)
        {
            var examStudentSubjectMarkIDParameter = examStudentSubjectMarkID.HasValue ?
                new ObjectParameter("ExamStudentSubjectMarkID", examStudentSubjectMarkID) :
                new ObjectParameter("ExamStudentSubjectMarkID", typeof(int));
    
            var modifiedByParameter = modifiedBy.HasValue ?
                new ObjectParameter("ModifiedBy", modifiedBy) :
                new ObjectParameter("ModifiedBy", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateExamSubjectsStudentMarkEntry", examStudentSubjectMarkIDParameter, modifiedByParameter);
        }
    
        public virtual int UpdateRoomDispatch(Nullable<int> rowFrom, Nullable<int> rowTo, Nullable<int> examsDateSheetDetailID, Nullable<int> roomID)
        {
            var rowFromParameter = rowFrom.HasValue ?
                new ObjectParameter("RowFrom", rowFrom) :
                new ObjectParameter("RowFrom", typeof(int));
    
            var rowToParameter = rowTo.HasValue ?
                new ObjectParameter("RowTo", rowTo) :
                new ObjectParameter("RowTo", typeof(int));
    
            var examsDateSheetDetailIDParameter = examsDateSheetDetailID.HasValue ?
                new ObjectParameter("ExamsDateSheetDetailID", examsDateSheetDetailID) :
                new ObjectParameter("ExamsDateSheetDetailID", typeof(int));
    
            var roomIDParameter = roomID.HasValue ?
                new ObjectParameter("RoomID", roomID) :
                new ObjectParameter("RoomID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateRoomDispatch", rowFromParameter, rowToParameter, examsDateSheetDetailIDParameter, roomIDParameter);
        }
    
        public virtual int UpdateStatusByFormNo(Nullable<int> statusID, string formNo, Nullable<int> modifiedBy, Nullable<int> queryID)
        {
            var statusIDParameter = statusID.HasValue ?
                new ObjectParameter("StatusID", statusID) :
                new ObjectParameter("StatusID", typeof(int));
    
            var formNoParameter = formNo != null ?
                new ObjectParameter("FormNo", formNo) :
                new ObjectParameter("FormNo", typeof(string));
    
            var modifiedByParameter = modifiedBy.HasValue ?
                new ObjectParameter("ModifiedBy", modifiedBy) :
                new ObjectParameter("ModifiedBy", typeof(int));
    
            var queryIDParameter = queryID.HasValue ?
                new ObjectParameter("QueryID", queryID) :
                new ObjectParameter("QueryID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateStatusByFormNo", statusIDParameter, formNoParameter, modifiedByParameter, queryIDParameter);
        }
    
        public virtual int UpdateStudentApprovalStatus(Nullable<int> studentID, Nullable<int> statusID, string formNo)
        {
            var studentIDParameter = studentID.HasValue ?
                new ObjectParameter("StudentID", studentID) :
                new ObjectParameter("StudentID", typeof(int));
    
            var statusIDParameter = statusID.HasValue ?
                new ObjectParameter("StatusID", statusID) :
                new ObjectParameter("StatusID", typeof(int));
    
            var formNoParameter = formNo != null ?
                new ObjectParameter("FormNo", formNo) :
                new ObjectParameter("FormNo", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateStudentApprovalStatus", studentIDParameter, statusIDParameter, formNoParameter);
        }
    
        public virtual int UpdateStudentStatus(Nullable<int> batchProgramID, Nullable<int> yearSemesterNo, Nullable<int> studentID, Nullable<int> courseID, Nullable<int> queryID)
        {
            var batchProgramIDParameter = batchProgramID.HasValue ?
                new ObjectParameter("BatchProgramID", batchProgramID) :
                new ObjectParameter("BatchProgramID", typeof(int));
    
            var yearSemesterNoParameter = yearSemesterNo.HasValue ?
                new ObjectParameter("YearSemesterNo", yearSemesterNo) :
                new ObjectParameter("YearSemesterNo", typeof(int));
    
            var studentIDParameter = studentID.HasValue ?
                new ObjectParameter("StudentID", studentID) :
                new ObjectParameter("StudentID", typeof(int));
    
            var courseIDParameter = courseID.HasValue ?
                new ObjectParameter("CourseID", courseID) :
                new ObjectParameter("CourseID", typeof(int));
    
            var queryIDParameter = queryID.HasValue ?
                new ObjectParameter("QueryID", queryID) :
                new ObjectParameter("QueryID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateStudentStatus", batchProgramIDParameter, yearSemesterNoParameter, studentIDParameter, courseIDParameter, queryIDParameter);
        }
    
        public virtual int UpdateTestByFormNo(string formNo, Nullable<int> entryTestID, Nullable<int> queryID)
        {
            var formNoParameter = formNo != null ?
                new ObjectParameter("FormNo", formNo) :
                new ObjectParameter("FormNo", typeof(string));
    
            var entryTestIDParameter = entryTestID.HasValue ?
                new ObjectParameter("EntryTestID", entryTestID) :
                new ObjectParameter("EntryTestID", typeof(int));
    
            var queryIDParameter = queryID.HasValue ?
                new ObjectParameter("QueryID", queryID) :
                new ObjectParameter("QueryID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateTestByFormNo", formNoParameter, entryTestIDParameter, queryIDParameter);
        }
    
        public virtual ObjectResult<Nullable<bool>> VerifyRoomDispatch(Nullable<int> examsDateSheetDetailID)
        {
            var examsDateSheetDetailIDParameter = examsDateSheetDetailID.HasValue ?
                new ObjectParameter("ExamsDateSheetDetailID", examsDateSheetDetailID) :
                new ObjectParameter("ExamsDateSheetDetailID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<bool>>("VerifyRoomDispatch", examsDateSheetDetailIDParameter);
        }
    }
}
